;**************************************************************************************       
; Copyright 2009 Aptina Imaging Corporation. All rights reserved.                             
;                                                                                             
;                                                                                             
; No permission to use, copy, modify, or distribute this software and/or                      
; its documentation for any purpose has been granted by Aptina Imaging Corporation.           
; If any such permission has been granted ( by separate agreement ), it                       
; is required that the above copyright notice appear in all copies and                        
; that both that copyright notice and this permission notice appear in                        
; supporting documentation, and that the name of Aptina Imaging Corporation or any            
; of its trademarks may not be used in advertising or publicity pertaining                    
; to distribution of the software without specific, written prior permission.                 
;                                                                                             
;                                                                                             
;      This software and any associated documentation are provided "AS IS" and                
;      without warranty of any kind.   APTINA IMAGING CORPORATION EXPRESSLY DISCLAIMS         
;      ALL WARRANTIES EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, NONINFRINGEMENT       
;      OF THIRD PARTY RIGHTS, AND ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS        
;      FOR A PARTICULAR PURPOSE.  APTINA DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED        
;      IN THIS SOFTWARE WILL MEET YOUR REQUIREMENTS, OR THAT THE OPERATION OF THIS SOFTWARE   
;      WILL BE UNINTERRUPTED OR ERROR-FREE.  FURTHERMORE, APTINA DOES NOT WARRANT OR          
;      MAKE ANY REPRESENTATIONS REGARDING THE USE OR THE RESULTS OF THE USE OF ANY            
;      ACCOMPANYING DOCUMENTATION IN TERMS OF ITS CORRECTNESS, ACCURACY, RELIABILITY,         
;      OR OTHERWISE.                                                                          
;*************************************************************************************/       
; Default INI file for the A-2020SOC-REV1 (Chip ID 0x1519)
;
; $Revision: 23722 $
; $Date: 2010-03-09 18:06:03 -0800 (Tue, 09 Mar 2010) $ 
;
; This file holds groups of register presets (sections) specific for this sensor. The 
; presets allow you to overwrite the power-on default settings with optimized register 
; settings. 
; The [Demo Initialization] section contains all optimized register settings for running
; the sensor in the demo environment. Other sections include settings optimized for a
; variety of situations like: Running at different master clock speeds, running under
; different lighting situations, running with different lenses, etc.
; Most of the demonstration software (DevWare, SensorDemo, ...) make use of this file
; to load and store the user presets.
;
; Keyname description:
; REG      = assign a new register value
; BITFIELD = do a READ-MODIFY-WRITE to part of a register. The part is defined as a mask.
; FIELD_WR = Write any register, variable or bitfield, specified by its symbol name
; LOAD     = load an alternate section from this section
; STATE    = set non-register state
; DELAY    = delay a certain amount of milliseconds before continuing 
; POLL_REG = Read a register a specified number of times, or until the register
;            value no longer meets a specified condition. You specify the
;            register by its address, and it only works with simple registers.
;            You also specify a delay between each iteration of the loop.
; POLL_FIELD = Like POLL_REG except you specify the register by its symbol name
;            as defined in the sensor data file. POLL_FIELD works with any kind
;            of register or variable.
;
; Keyname format:
; REG      = [<page>,] <address>, <value>             //<comment>
; BITFIELD = [<page>,] <address>, <mask>, <value>
;            Some examples: 
;            BITFIELD=2, 0x05, 0x0020, 1 //for register 5 on page 2, set the 6th bit to 1
;            BITFIELD=0x06, 0x000F, 0    //for register 6, clear the first 4 bits
; FIELD_WR = <registername>, [<bitfieldname>,] <value>
; LOAD     = <section>
; STATE    = <state>, <value>
; DELAY    = <milliseconds>
; POLL_REG = [<page>,]<address>,<mask>,<condition>,DELAY=<milliseconds>,TIMEOUT=<count> //<comment>
;            Example:  Poll every 50ms, stop when value <= 8 or after 5 times (250ms).
;            POLL_REG= 2, 0x3F, 0xFFFF, >8, DELAY=50, TIMEOUT=5
; POLL_FIELD = <registername>, [<bitfieldname>,] <condition>, DELAY=<milliseconds>, TIMEOUT=<count> //<comment>
;            Example:  Poll every 10 ms, stop when the value = 0, or after 500ms.
;            POLL_FIELD= SEQ_CMD, !=0, DELAY=10, TIMEOUT=50
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developer's guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <registername> Name of a register or variable as defined the sensor data (.sdat) file
; <bitfieldname> Optional name of a bitfield
; <condition>    <  <=  ==  !=  >  or  >=  followed by a numerical value
; <count>        Number of iterations of the polling loop
; <section>      the name of another section to load
; <state>        non-register program state names [do not modify]
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .ini file
;
;*************************************************************************************/

[Reset]
//-------------------------------------
// Reset Image Sensor by Resetting MCU
//-------------------------------------
FIELD_WR=MCU_BOOT_MODE, RESET_MCU, 1  //RESET_MCU  stop MCU
FIELD_WR=MCU_BOOT_MODE, RESET_MCU, 0  //RESET_MCU  start MCU
DELAY=100

[Demo Initialization]
//-----------------------------------------------------------
// This Section Loads all the defaults from the sub-sections
//-----------------------------------------------------------
LOAD=Powerup
LOAD=One_Two_Patch
//LOAD=Black Level Oscillation Patch
DELAY=500
LOAD=PLL Setup 24Mhz/80Mhz Out
LOAD=Analog_Settings_Final
LOAD=Noise Reduction Settings
LOAD=CCM
LOAD=True Gray
LOAD=Lens Correction KANTATSU
LOAD=LUT_Moderate
LOAD=AE
LOAD=Mode
LOAD=Sequencer_Optimized_LowSat
LOAD=Low Power Preview 15 FPS
LOAD=State Setup
LOAD=Refresh

;**************************************************************
; This patch does: 
;	1. fix Black Level oscillation issue by  
; overriding of the AE_UploadRegs() function.
; New function does not write to ADCref register if ADCref value was not changed.
; Default behavior can be switched on by setting variable 'flag' allocated at 0x02F0 address to 
; non 0 value  
;
;		if ((R65_prev != ae.R65) || (flag > 0))
;		{
;			IoWrite (0x0047, (WORD)ae.R65);
;			R65_prev = ae.R65;
;		}
;
;	2. calculate Nosie Redaction thesholds vs Analog gain for each color separately . 
;
;   NH_TH2          ---
;                 / 
;                /
;               /
;   NR_TH1  ---
;              |   |
;             G1   G2
; NR_TH1 -> sq.NR_minTH;
; NR_TH2 -> sq.NR_maxTH;
; G1     -> sq.NR_GainTH;
; G2     -> sq.NR_Slope;
;**************************************************************
; S19-->Ini created on Monday, February 06, 2006 : 13:06:15
;
[One_Two_Patch]
REG=1, 0x338C, 0x0400 	// MCU_ADDRESS
REG=1, 0x3390, 0x3730 	// MCU_DATA_0
REG=1, 0x3392, 0x8FC3 	// MCU_DATA_1
REG=1, 0x3394, 0xFFEF 	// MCU_DATA_2
REG=1, 0x3396, 0x8F35 	// MCU_DATA_3
REG=1, 0x3398, 0xCC00 	// MCU_DATA_4
REG=1, 0x339A, 0x2DBD 	// MCU_DATA_5
REG=1, 0x339C, 0x82CF 	// MCU_DATA_6
REG=1, 0x339E, 0x5F84 	// MCU_DATA_7
REG=1, 0x338C, 0x0410 	// MCU_ADDRESS
REG=1, 0x3390, 0x0730 	// MCU_DATA_0
REG=1, 0x3392, 0xED0B 	// MCU_DATA_1
REG=1, 0x3394, 0xCC00 	// MCU_DATA_2
REG=1, 0x3396, 0x2FBD 	// MCU_DATA_3
REG=1, 0x3398, 0x82CF 	// MCU_DATA_4
REG=1, 0x339A, 0x5F84 	// MCU_DATA_5
REG=1, 0x339C, 0x0730 	// MCU_DATA_6
REG=1, 0x339E, 0xED09 	// MCU_DATA_7
REG=1, 0x338C, 0x0420 	// MCU_ADDRESS
REG=1, 0x3390, 0xCC00 	// MCU_DATA_0
REG=1, 0x3392, 0x2CBD 	// MCU_DATA_1
REG=1, 0x3394, 0x82CF 	// MCU_DATA_2
REG=1, 0x3396, 0x5F84 	// MCU_DATA_3
REG=1, 0x3398, 0x0730 	// MCU_DATA_4
REG=1, 0x339A, 0xED07 	// MCU_DATA_5
REG=1, 0x339C, 0x6D11 	// MCU_DATA_6
REG=1, 0x339E, 0x2709 	// MCU_DATA_7
REG=1, 0x338C, 0x0430 	// MCU_ADDRESS
REG=1, 0x3390, 0xE611 	// MCU_DATA_0
REG=1, 0x3392, 0xC102 	// MCU_DATA_1
REG=1, 0x3394, 0x2703 	// MCU_DATA_2
REG=1, 0x3396, 0x7E04 	// MCU_DATA_3
REG=1, 0x3398, 0xDBDC 	// MCU_DATA_4
REG=1, 0x339A, 0x72B3 	// MCU_DATA_5
REG=1, 0x339C, 0x02EE 	// MCU_DATA_6
REG=1, 0x339E, 0x2605 	// MCU_DATA_7
REG=1, 0x338C, 0x0440 	// MCU_ADDRESS
REG=1, 0x3390, 0x7D02 	// MCU_DATA_0
REG=1, 0x3392, 0xF027 	// MCU_DATA_1
REG=1, 0x3394, 0x0FCC 	// MCU_DATA_2
REG=1, 0x3396, 0x0047 	// MCU_DATA_3
REG=1, 0x3398, 0xED00 	// MCU_DATA_4
REG=1, 0x339A, 0xDC72 	// MCU_DATA_5
REG=1, 0x339C, 0xBD82 	// MCU_DATA_6
REG=1, 0x339E, 0xBBDC 	// MCU_DATA_7
REG=1, 0x338C, 0x0450 	// MCU_ADDRESS
REG=1, 0x3390, 0x72FD 	// MCU_DATA_0
REG=1, 0x3392, 0x02EE 	// MCU_DATA_1
REG=1, 0x3394, 0xCC00 	// MCU_DATA_2
REG=1, 0x3396, 0x0A30 	// MCU_DATA_3
REG=1, 0x3398, 0xED00 	// MCU_DATA_4
REG=1, 0x339A, 0xDC67 	// MCU_DATA_5
REG=1, 0x339C, 0xBD82 	// MCU_DATA_6
REG=1, 0x339E, 0xBBDE 	// MCU_DATA_7
REG=1, 0x338C, 0x0460 	// MCU_ADDRESS
REG=1, 0x3390, 0x4DEE 	// MCU_DATA_0
REG=1, 0x3392, 0x14AD 	// MCU_DATA_1
REG=1, 0x3394, 0x00CC 	// MCU_DATA_2
REG=1, 0x3396, 0x0009 	// MCU_DATA_3
REG=1, 0x3398, 0x30ED 	// MCU_DATA_4
REG=1, 0x339A, 0x00DC 	// MCU_DATA_5
REG=1, 0x339C, 0x70BD 	// MCU_DATA_6
REG=1, 0x339E, 0x82BB 	// MCU_DATA_7
REG=1, 0x338C, 0x0470 	// MCU_ADDRESS
REG=1, 0x3390, 0xD66A 	// MCU_DATA_0
REG=1, 0x3392, 0x4F30 	// MCU_DATA_1
REG=1, 0x3394, 0xED02 	// MCU_DATA_2
REG=1, 0x3396, 0xD676 	// MCU_DATA_3
REG=1, 0x3398, 0xED00 	// MCU_DATA_4
REG=1, 0x339A, 0xCC00 	// MCU_DATA_5
REG=1, 0x339C, 0x80BD 	// MCU_DATA_6
REG=1, 0x339E, 0x81D1 	// MCU_DATA_7
REG=1, 0x338C, 0x0480 	// MCU_ADDRESS
REG=1, 0x3390, 0x30E6 	// MCU_DATA_0
REG=1, 0x3392, 0x03E7 	// MCU_DATA_1
REG=1, 0x3394, 0x06F6 	// MCU_DATA_2
REG=1, 0x3396, 0x0194 	// MCU_DATA_3
REG=1, 0x3398, 0xA606 	// MCU_DATA_4
REG=1, 0x339A, 0x3DED 	// MCU_DATA_5
REG=1, 0x339C, 0x0D04 	// MCU_DATA_6
REG=1, 0x339E, 0x0404 	// MCU_DATA_7
REG=1, 0x338C, 0x0490 	// MCU_ADDRESS
REG=1, 0x3390, 0x0404 	// MCU_DATA_0
REG=1, 0x3392, 0xE710 	// MCU_DATA_1
REG=1, 0x3394, 0xF601 	// MCU_DATA_2
REG=1, 0x3396, 0x96A6 	// MCU_DATA_3
REG=1, 0x3398, 0x063D 	// MCU_DATA_4
REG=1, 0x339A, 0xED0D 	// MCU_DATA_5
REG=1, 0x339C, 0x0404 	// MCU_DATA_6
REG=1, 0x339E, 0x0404 	// MCU_DATA_7
REG=1, 0x338C, 0x04A0 	// MCU_ADDRESS
REG=1, 0x3390, 0x04E7 	// MCU_DATA_0
REG=1, 0x3392, 0x0FA6 	// MCU_DATA_1
REG=1, 0x3394, 0x10A7 	// MCU_DATA_2
REG=1, 0x3396, 0x01A6 	// MCU_DATA_3
REG=1, 0x3398, 0x06A7 	// MCU_DATA_4
REG=1, 0x339A, 0x00BD 	// MCU_DATA_5
REG=1, 0x339C, 0x9904 	// MCU_DATA_6
REG=1, 0x339E, 0xCC00 	// MCU_DATA_7
REG=1, 0x338C, 0x04B0 	// MCU_ADDRESS
REG=1, 0x3390, 0x2F30 	// MCU_DATA_0
REG=1, 0x3392, 0xED00 	// MCU_DATA_1
REG=1, 0x3394, 0xDC81 	// MCU_DATA_2
REG=1, 0x3396, 0xEA0A 	// MCU_DATA_3
REG=1, 0x3398, 0xAA09 	// MCU_DATA_4
REG=1, 0x339A, 0xBD82 	// MCU_DATA_5
REG=1, 0x339C, 0xBBCC 	// MCU_DATA_6
REG=1, 0x339E, 0x002C 	// MCU_DATA_7
REG=1, 0x338C, 0x04C0 	// MCU_ADDRESS
REG=1, 0x3390, 0x30ED 	// MCU_DATA_0
REG=1, 0x3392, 0x00DC 	// MCU_DATA_1
REG=1, 0x3394, 0x83EA 	// MCU_DATA_2
REG=1, 0x3396, 0x08AA 	// MCU_DATA_3
REG=1, 0x3398, 0x07BD 	// MCU_DATA_4
REG=1, 0x339A, 0x82BB 	// MCU_DATA_5
REG=1, 0x339C, 0xCC00 	// MCU_DATA_6
REG=1, 0x339E, 0x2D30 	// MCU_DATA_7
REG=1, 0x338C, 0x04D0 	// MCU_ADDRESS
REG=1, 0x3390, 0xED00 	// MCU_DATA_0
REG=1, 0x3392, 0xDC7F 	// MCU_DATA_1
REG=1, 0x3394, 0xEA0C 	// MCU_DATA_2
REG=1, 0x3396, 0xAA0B 	// MCU_DATA_3
REG=1, 0x3398, 0xBD82 	// MCU_DATA_4
REG=1, 0x339A, 0xBB30 	// MCU_DATA_5
REG=1, 0x339C, 0xE611 	// MCU_DATA_6
REG=1, 0x339E, 0xC101 	// MCU_DATA_7
REG=1, 0x338C, 0x04E0 	// MCU_ADDRESS
REG=1, 0x3390, 0x2707 	// MCU_DATA_0
REG=1, 0x3392, 0xC102 	// MCU_DATA_1
REG=1, 0x3394, 0x2703 	// MCU_DATA_2
REG=1, 0x3396, 0x7E05 	// MCU_DATA_3
REG=1, 0x3398, 0xFBF6 	// MCU_DATA_4
REG=1, 0x339A, 0x019C 	// MCU_DATA_5
REG=1, 0x339C, 0xE710 	// MCU_DATA_6
REG=1, 0x339E, 0xB601 	// MCU_DATA_7
REG=1, 0x338C, 0x04F0 	// MCU_ADDRESS
REG=1, 0x3390, 0x9B11 	// MCU_DATA_0
REG=1, 0x3392, 0x2402 	// MCU_DATA_1
REG=1, 0x3394, 0xA710 	// MCU_DATA_2
REG=1, 0x3396, 0xF601 	// MCU_DATA_3
REG=1, 0x3398, 0x9DE1 	// MCU_DATA_4
REG=1, 0x339A, 0x1024 	// MCU_DATA_5
REG=1, 0x339C, 0x02E7 	// MCU_DATA_6
REG=1, 0x339E, 0x10CC 	// MCU_DATA_7
REG=1, 0x338C, 0x0500 	// MCU_ADDRESS
REG=1, 0x3390, 0x013C 	// MCU_DATA_0
REG=1, 0x3392, 0xBD82 	// MCU_DATA_1
REG=1, 0x3394, 0xCF30 	// MCU_DATA_2
REG=1, 0x3396, 0xED04 	// MCU_DATA_3
REG=1, 0x3398, 0xCC03 	// MCU_DATA_4
REG=1, 0x339A, 0xFFA3 	// MCU_DATA_5
REG=1, 0x339C, 0x04ED 	// MCU_DATA_6
REG=1, 0x339E, 0x09CC 	// MCU_DATA_7
REG=1, 0x338C, 0x0510 	// MCU_ADDRESS
REG=1, 0x3390, 0x0080 	// MCU_DATA_0
REG=1, 0x3392, 0xED02 	// MCU_DATA_1
REG=1, 0x3394, 0xCC03 	// MCU_DATA_2
REG=1, 0x3396, 0xFFED 	// MCU_DATA_3
REG=1, 0x3398, 0x008F 	// MCU_DATA_4
REG=1, 0x339A, 0x30ED 	// MCU_DATA_5
REG=1, 0x339C, 0x04EC 	// MCU_DATA_6
REG=1, 0x339E, 0x09EE 	// MCU_DATA_7
REG=1, 0x338C, 0x0520 	// MCU_ADDRESS
REG=1, 0x3390, 0x04BD 	// MCU_DATA_0
REG=1, 0x3392, 0x81D1 	// MCU_DATA_1
REG=1, 0x3394, 0x30EC 	// MCU_DATA_2
REG=1, 0x3396, 0x02ED 	// MCU_DATA_3
REG=1, 0x3398, 0x0DEC 	// MCU_DATA_4
REG=1, 0x339A, 0x0904 	// MCU_DATA_5
REG=1, 0x339C, 0xB310 	// MCU_DATA_6
REG=1, 0x339E, 0xC722 	// MCU_DATA_7
REG=1, 0x338C, 0x0530 	// MCU_ADDRESS
REG=1, 0x3390, 0x07EC 	// MCU_DATA_0
REG=1, 0x3392, 0x0DC3 	// MCU_DATA_1
REG=1, 0x3394, 0x0001 	// MCU_DATA_2
REG=1, 0x3396, 0xED0D 	// MCU_DATA_3
REG=1, 0x3398, 0xF601 	// MCU_DATA_4
REG=1, 0x339A, 0x9B4F 	// MCU_DATA_5
REG=1, 0x339C, 0xED02 	// MCU_DATA_6
REG=1, 0x339E, 0xEC0D 	// MCU_DATA_7
REG=1, 0x338C, 0x0540 	// MCU_ADDRESS
REG=1, 0x3390, 0xED00 	// MCU_DATA_0
REG=1, 0x3392, 0xE610 	// MCU_DATA_1
REG=1, 0x3394, 0x4FBD 	// MCU_DATA_2
REG=1, 0x3396, 0x81D1 	// MCU_DATA_3
REG=1, 0x3398, 0x30EC 	// MCU_DATA_4
REG=1, 0x339A, 0x02ED 	// MCU_DATA_5
REG=1, 0x339C, 0x0BF6 	// MCU_DATA_6
REG=1, 0x339E, 0x019C 	// MCU_DATA_7
REG=1, 0x338C, 0x0550 	// MCU_ADDRESS
REG=1, 0x3390, 0x4FED 	// MCU_DATA_0
REG=1, 0x3392, 0x02EC 	// MCU_DATA_1
REG=1, 0x3394, 0x0DED 	// MCU_DATA_2
REG=1, 0x3396, 0x00E6 	// MCU_DATA_3
REG=1, 0x3398, 0x104F 	// MCU_DATA_4
REG=1, 0x339A, 0xBD81 	// MCU_DATA_5
REG=1, 0x339C, 0xD130 	// MCU_DATA_6
REG=1, 0x339E, 0xEC02 	// MCU_DATA_7
REG=1, 0x338C, 0x0560 	// MCU_ADDRESS
REG=1, 0x3390, 0xED09 	// MCU_DATA_0
REG=1, 0x3392, 0xF601 	// MCU_DATA_1
REG=1, 0x3394, 0x9D4F 	// MCU_DATA_2
REG=1, 0x3396, 0xED02 	// MCU_DATA_3
REG=1, 0x3398, 0xEC0D 	// MCU_DATA_4
REG=1, 0x339A, 0xED00 	// MCU_DATA_5
REG=1, 0x339C, 0xE610 	// MCU_DATA_6
REG=1, 0x339E, 0x4FBD 	// MCU_DATA_7
REG=1, 0x338C, 0x0570 	// MCU_ADDRESS
REG=1, 0x3390, 0x81D1 	// MCU_DATA_0
REG=1, 0x3392, 0x30EC 	// MCU_DATA_1
REG=1, 0x3394, 0x02ED 	// MCU_DATA_2
REG=1, 0x3396, 0x07DC 	// MCU_DATA_3
REG=1, 0x3398, 0x6DED 	// MCU_DATA_4
REG=1, 0x339A, 0x02EC 	// MCU_DATA_5
REG=1, 0x339C, 0x0BED 	// MCU_DATA_6
REG=1, 0x339E, 0x00CC 	// MCU_DATA_7
REG=1, 0x338C, 0x0580 	// MCU_ADDRESS
REG=1, 0x3390, 0x0080 	// MCU_DATA_0
REG=1, 0x3392, 0xBD81 	// MCU_DATA_1
REG=1, 0x3394, 0xD130 	// MCU_DATA_2
REG=1, 0x3396, 0xEC02 	// MCU_DATA_3
REG=1, 0x3398, 0xED0D 	// MCU_DATA_4
REG=1, 0x339A, 0xCC01 	// MCU_DATA_5
REG=1, 0x339C, 0x6AED 	// MCU_DATA_6
REG=1, 0x339E, 0x00EC 	// MCU_DATA_7
REG=1, 0x338C, 0x0590 	// MCU_ADDRESS
REG=1, 0x3390, 0x0DBD 	// MCU_DATA_0
REG=1, 0x3392, 0x82BB 	// MCU_DATA_1
REG=1, 0x3394, 0xDC6D 	// MCU_DATA_2
REG=1, 0x3396, 0x30ED 	// MCU_DATA_3
REG=1, 0x3398, 0x02EC 	// MCU_DATA_4
REG=1, 0x339A, 0x09ED 	// MCU_DATA_5
REG=1, 0x339C, 0x00CC 	// MCU_DATA_6
REG=1, 0x339E, 0x0080 	// MCU_DATA_7
REG=1, 0x338C, 0x05A0 	// MCU_ADDRESS
REG=1, 0x3390, 0xBD81 	// MCU_DATA_0
REG=1, 0x3392, 0xD130 	// MCU_DATA_1
REG=1, 0x3394, 0xEC02 	// MCU_DATA_2
REG=1, 0x3396, 0xED0D 	// MCU_DATA_3
REG=1, 0x3398, 0xCC01 	// MCU_DATA_4
REG=1, 0x339A, 0x6BED 	// MCU_DATA_5
REG=1, 0x339C, 0x00EC 	// MCU_DATA_6
REG=1, 0x339E, 0x0DBD 	// MCU_DATA_7
REG=1, 0x338C, 0x05B0 	// MCU_ADDRESS
REG=1, 0x3390, 0x82BB 	// MCU_DATA_0
REG=1, 0x3392, 0x30EC 	// MCU_DATA_1
REG=1, 0x3394, 0x0DED 	// MCU_DATA_2
REG=1, 0x3396, 0x02D6 	// MCU_DATA_3
REG=1, 0x3398, 0x9C4F 	// MCU_DATA_4
REG=1, 0x339A, 0xED00 	// MCU_DATA_5
REG=1, 0x339C, 0xCC00 	// MCU_DATA_6
REG=1, 0x339E, 0x80BD 	// MCU_DATA_7
REG=1, 0x338C, 0x05C0 	// MCU_ADDRESS
REG=1, 0x3390, 0x81D1 	// MCU_DATA_0
REG=1, 0x3392, 0x30EC 	// MCU_DATA_1
REG=1, 0x3394, 0x02ED 	// MCU_DATA_2
REG=1, 0x3396, 0x0DCC 	// MCU_DATA_3
REG=1, 0x3398, 0x016C 	// MCU_DATA_4
REG=1, 0x339A, 0xED00 	// MCU_DATA_5
REG=1, 0x339C, 0xEC0D 	// MCU_DATA_6
REG=1, 0x339E, 0xBD82 	// MCU_DATA_7
REG=1, 0x338C, 0x05D0 	// MCU_ADDRESS
REG=1, 0x3390, 0xBBDC 	// MCU_DATA_0
REG=1, 0x3392, 0x6D30 	// MCU_DATA_1
REG=1, 0x3394, 0xED02 	// MCU_DATA_2
REG=1, 0x3396, 0xEC07 	// MCU_DATA_3
REG=1, 0x3398, 0xED00 	// MCU_DATA_4
REG=1, 0x339A, 0xCC00 	// MCU_DATA_5
REG=1, 0x339C, 0x80BD 	// MCU_DATA_6
REG=1, 0x339E, 0x81D1 	// MCU_DATA_7
REG=1, 0x338C, 0x05E0 	// MCU_ADDRESS
REG=1, 0x3390, 0x30EC 	// MCU_DATA_0
REG=1, 0x3392, 0x02ED 	// MCU_DATA_1
REG=1, 0x3394, 0x0DCC 	// MCU_DATA_2
REG=1, 0x3396, 0x016D 	// MCU_DATA_3
REG=1, 0x3398, 0xED00 	// MCU_DATA_4
REG=1, 0x339A, 0xEC0D 	// MCU_DATA_5
REG=1, 0x339C, 0xBD82 	// MCU_DATA_6
REG=1, 0x339E, 0xBBCC 	// MCU_DATA_7
REG=1, 0x338C, 0x05F0 	// MCU_ADDRESS
REG=1, 0x3390, 0x014E 	// MCU_DATA_0
REG=1, 0x3392, 0x30ED 	// MCU_DATA_1
REG=1, 0x3394, 0x00D6 	// MCU_DATA_2
REG=1, 0x3396, 0x6F4F 	// MCU_DATA_3
REG=1, 0x3398, 0xBD82 	// MCU_DATA_4
REG=1, 0x339A, 0xBB30 	// MCU_DATA_5
REG=1, 0x339C, 0xC612 	// MCU_DATA_6
REG=1, 0x339E, 0x3A35 	// MCU_DATA_7
REG=1, 0x338C, 0x0600 	// MCU_ADDRESS
REG=1, 0x3390, 0x3937 	// MCU_DATA_0
REG=1, 0x3392, 0x3C3C 	// MCU_DATA_1
REG=1, 0x3394, 0x3C3C 	// MCU_DATA_2
REG=1, 0x3396, 0x3C34 	// MCU_DATA_3
REG=1, 0x3398, 0xD63E 	// MCU_DATA_4
REG=1, 0x339A, 0x30E7 	// MCU_DATA_5
REG=1, 0x339C, 0x07D6 	// MCU_DATA_6
REG=1, 0x339E, 0x3FE7 	// MCU_DATA_7
REG=1, 0x338C, 0x0610 	// MCU_ADDRESS
REG=1, 0x3390, 0x06D6 	// MCU_DATA_0
REG=1, 0x3392, 0x40E7 	// MCU_DATA_1
REG=1, 0x3394, 0x05D6 	// MCU_DATA_2
REG=1, 0x3396, 0x41E7 	// MCU_DATA_3
REG=1, 0x3398, 0x04EC 	// MCU_DATA_4
REG=1, 0x339A, 0x0EED 	// MCU_DATA_5
REG=1, 0x339C, 0x02E6 	// MCU_DATA_6
REG=1, 0x339E, 0x0B4F 	// MCU_DATA_7
REG=1, 0x338C, 0x0620 	// MCU_ADDRESS
REG=1, 0x3390, 0xED00 	// MCU_DATA_0
REG=1, 0x3392, 0xCC00 	// MCU_DATA_1
REG=1, 0x3394, 0x20BD 	// MCU_DATA_2
REG=1, 0x3396, 0x81D1 	// MCU_DATA_3
REG=1, 0x3398, 0x30EC 	// MCU_DATA_4
REG=1, 0x339A, 0x02ED 	// MCU_DATA_5
REG=1, 0x339C, 0x0E6D 	// MCU_DATA_6
REG=1, 0x339E, 0x0E27 	// MCU_DATA_7
REG=1, 0x338C, 0x0630 	// MCU_ADDRESS
REG=1, 0x3390, 0x05CC 	// MCU_DATA_0
REG=1, 0x3392, 0x00FF 	// MCU_DATA_1
REG=1, 0x3394, 0xED0E 	// MCU_DATA_2
REG=1, 0x3396, 0xE605 	// MCU_DATA_3
REG=1, 0x3398, 0x4FA3 	// MCU_DATA_4
REG=1, 0x339A, 0x0E25 	// MCU_DATA_5
REG=1, 0x339C, 0x04E6 	// MCU_DATA_6
REG=1, 0x339E, 0x0720 	// MCU_DATA_7
REG=1, 0x338C, 0x0640 	// MCU_ADDRESS
REG=1, 0x3390, 0x37E6 	// MCU_DATA_0
REG=1, 0x3392, 0x044F 	// MCU_DATA_1
REG=1, 0x3394, 0xA30E 	// MCU_DATA_2
REG=1, 0x3396, 0x2204 	// MCU_DATA_3
REG=1, 0x3398, 0xE606 	// MCU_DATA_4
REG=1, 0x339A, 0x202C 	// MCU_DATA_5
REG=1, 0x339C, 0xE606 	// MCU_DATA_6
REG=1, 0x339E, 0xE007 	// MCU_DATA_7
REG=1, 0x338C, 0x0650 	// MCU_ADDRESS
REG=1, 0x3390, 0xE709 	// MCU_DATA_0
REG=1, 0x3392, 0xE604 	// MCU_DATA_1
REG=1, 0x3394, 0xE005 	// MCU_DATA_2
REG=1, 0x3396, 0xE70B 	// MCU_DATA_3
REG=1, 0x3398, 0xA60F 	// MCU_DATA_4
REG=1, 0x339A, 0xA005 	// MCU_DATA_5
REG=1, 0x339C, 0xA708 	// MCU_DATA_6
REG=1, 0x339E, 0x5D27 	// MCU_DATA_7
REG=1, 0x338C, 0x0660 	// MCU_ADDRESS
REG=1, 0x3390, 0x15E6 	// MCU_DATA_0
REG=1, 0x3392, 0x094F 	// MCU_DATA_1
REG=1, 0x3394, 0xED02 	// MCU_DATA_2
REG=1, 0x3396, 0xE608 	// MCU_DATA_3
REG=1, 0x3398, 0xED00 	// MCU_DATA_4
REG=1, 0x339A, 0xE60B 	// MCU_DATA_5
REG=1, 0x339C, 0xBD81 	// MCU_DATA_6
REG=1, 0x339E, 0xD130 	// MCU_DATA_7
REG=1, 0x338C, 0x0670 	// MCU_ADDRESS
REG=1, 0x3390, 0xE603 	// MCU_DATA_0
REG=1, 0x3392, 0xEB07 	// MCU_DATA_1
REG=1, 0x3394, 0x2002 	// MCU_DATA_2
REG=1, 0x3396, 0xE604 	// MCU_DATA_3
REG=1, 0x3398, 0xE70A 	// MCU_DATA_4
REG=1, 0x339A, 0x3838 	// MCU_DATA_5
REG=1, 0x339C, 0x3838 	// MCU_DATA_6
REG=1, 0x339E, 0x3838 	// MCU_DATA_7
REG=1, 0x338C, 0x0680 	// MCU_ADDRESS
REG=1, 0x3390, 0x3937 	// MCU_DATA_0
REG=1, 0x3392, 0x3C3C 	// MCU_DATA_1
REG=1, 0x3394, 0x3C3C 	// MCU_DATA_2
REG=1, 0x3396, 0x3430 	// MCU_DATA_3
REG=1, 0x3398, 0xE609 	// MCU_DATA_4
REG=1, 0x339A, 0xBD94 	// MCU_DATA_5
REG=1, 0x339C, 0x36D6 	// MCU_DATA_6
REG=1, 0x339E, 0x6A4F 	// MCU_DATA_7
REG=1, 0x338C, 0x0690 	// MCU_ADDRESS
REG=1, 0x3390, 0x0404 	// MCU_DATA_0
REG=1, 0x3392, 0x30ED 	// MCU_DATA_1
REG=1, 0x3394, 0x07ED 	// MCU_DATA_2
REG=1, 0x3396, 0x02DC 	// MCU_DATA_3
REG=1, 0x3398, 0x6DED 	// MCU_DATA_4
REG=1, 0x339A, 0x00CC 	// MCU_DATA_5
REG=1, 0x339C, 0x0080 	// MCU_DATA_6
REG=1, 0x339E, 0xBD81 	// MCU_DATA_7
REG=1, 0x338C, 0x06A0 	// MCU_ADDRESS
REG=1, 0x3390, 0xD130 	// MCU_DATA_0
REG=1, 0x3392, 0xEC02 	// MCU_DATA_1
REG=1, 0x3394, 0xED07 	// MCU_DATA_2
REG=1, 0x3396, 0xED02 	// MCU_DATA_3
REG=1, 0x3398, 0xD66F 	// MCU_DATA_4
REG=1, 0x339A, 0x4FED 	// MCU_DATA_5
REG=1, 0x339C, 0x00CC 	// MCU_DATA_6
REG=1, 0x339E, 0x0020 	// MCU_DATA_7
REG=1, 0x338C, 0x06B0 	// MCU_ADDRESS
REG=1, 0x3390, 0xBD81 	// MCU_DATA_0
REG=1, 0x3392, 0xD130 	// MCU_DATA_1
REG=1, 0x3394, 0xEC02 	// MCU_DATA_2
REG=1, 0x3396, 0xED07 	// MCU_DATA_3
REG=1, 0x3398, 0xED00 	// MCU_DATA_4
REG=1, 0x339A, 0xF601 	// MCU_DATA_5
REG=1, 0x339C, 0x94BD 	// MCU_DATA_6
REG=1, 0x339E, 0x0601 	// MCU_DATA_7
REG=1, 0x338C, 0x06C0 	// MCU_ADDRESS
REG=1, 0x3390, 0x30E7 	// MCU_DATA_0
REG=1, 0x3392, 0x05EC 	// MCU_DATA_1
REG=1, 0x3394, 0x07ED 	// MCU_DATA_2
REG=1, 0x3396, 0x00C6 	// MCU_DATA_3
REG=1, 0x3398, 0x20BD 	// MCU_DATA_4
REG=1, 0x339A, 0x0601 	// MCU_DATA_5
REG=1, 0x339C, 0x30E7 	// MCU_DATA_6
REG=1, 0x339E, 0x04EC 	// MCU_DATA_7
REG=1, 0x338C, 0x06D0 	// MCU_ADDRESS
REG=1, 0x3390, 0x07ED 	// MCU_DATA_0
REG=1, 0x3392, 0x00F6 	// MCU_DATA_1
REG=1, 0x3394, 0x0196 	// MCU_DATA_2
REG=1, 0x3396, 0xBD06 	// MCU_DATA_3
REG=1, 0x3398, 0x0130 	// MCU_DATA_4
REG=1, 0x339A, 0xE706 	// MCU_DATA_5
REG=1, 0x339C, 0xCC01 	// MCU_DATA_6
REG=1, 0x339E, 0xFEED 	// MCU_DATA_7
REG=1, 0x338C, 0x06E0 	// MCU_ADDRESS
REG=1, 0x3390, 0x00E6 	// MCU_DATA_0
REG=1, 0x3392, 0x044F 	// MCU_DATA_1
REG=1, 0x3394, 0xBD82 	// MCU_DATA_2
REG=1, 0x3396, 0xBBCC 	// MCU_DATA_3
REG=1, 0x3398, 0x01FB 	// MCU_DATA_4
REG=1, 0x339A, 0x30ED 	// MCU_DATA_5
REG=1, 0x339C, 0x00E6 	// MCU_DATA_6
REG=1, 0x339E, 0x054F 	// MCU_DATA_7
REG=1, 0x338C, 0x06F0 	// MCU_ADDRESS
REG=1, 0x3390, 0xBD82 	// MCU_DATA_0
REG=1, 0x3392, 0xBBCC 	// MCU_DATA_1
REG=1, 0x3394, 0x01FC 	// MCU_DATA_2
REG=1, 0x3396, 0x30ED 	// MCU_DATA_3
REG=1, 0x3398, 0x00E6 	// MCU_DATA_4
REG=1, 0x339A, 0x044F 	// MCU_DATA_5
REG=1, 0x339C, 0xBD82 	// MCU_DATA_6
REG=1, 0x339E, 0xBBCC 	// MCU_DATA_7
REG=1, 0x338C, 0x0700 	// MCU_ADDRESS
REG=1, 0x3390, 0x01FD 	// MCU_DATA_0
REG=1, 0x3392, 0x30ED 	// MCU_DATA_1
REG=1, 0x3394, 0x00E6 	// MCU_DATA_2
REG=1, 0x3396, 0x064F 	// MCU_DATA_3
REG=1, 0x3398, 0xBD82 	// MCU_DATA_4
REG=1, 0x339A, 0xBB30 	// MCU_DATA_5
REG=1, 0x339C, 0xC60A 	// MCU_DATA_6
REG=1, 0x339E, 0x3A35 	// MCU_DATA_7
REG=1, 0x338C, 0x0710 	// MCU_ADDRESS
REG=1, 0x3390, 0x393C 	// MCU_DATA_0
REG=1, 0x3392, 0x3C3C 	// MCU_DATA_1
REG=1, 0x3394, 0x34CC 	// MCU_DATA_2
REG=1, 0x3396, 0x0021 	// MCU_DATA_3
REG=1, 0x3398, 0xFD02 	// MCU_DATA_4
REG=1, 0x339A, 0xEEB7 	// MCU_DATA_5
REG=1, 0x339C, 0x02F0 	// MCU_DATA_6
REG=1, 0x339E, 0xC606 	// MCU_DATA_7
REG=1, 0x338C, 0x0720 	// MCU_ADDRESS
REG=1, 0x3390, 0xD73E 	// MCU_DATA_0
REG=1, 0x3392, 0xC63C 	// MCU_DATA_1
REG=1, 0x3394, 0xD73F 	// MCU_DATA_2
REG=1, 0x3396, 0xC604 	// MCU_DATA_3
REG=1, 0x3398, 0xD740 	// MCU_DATA_4
REG=1, 0x339A, 0xC680 	// MCU_DATA_5
REG=1, 0x339C, 0xD741 	// MCU_DATA_6
REG=1, 0x339E, 0xCC02 	// MCU_DATA_7
REG=1, 0x338C, 0x0730 	// MCU_ADDRESS
REG=1, 0x3390, 0xD030 	// MCU_DATA_0
REG=1, 0x3392, 0xED04 	// MCU_DATA_1
REG=1, 0x3394, 0xFE10 	// MCU_DATA_2
REG=1, 0x3396, 0x50EC 	// MCU_DATA_3
REG=1, 0x3398, 0x04FD 	// MCU_DATA_4
REG=1, 0x339A, 0x02CC 	// MCU_DATA_5
REG=1, 0x339C, 0xFE02 	// MCU_DATA_6
REG=1, 0x339E, 0xCCEC 	// MCU_DATA_7
REG=1, 0x338C, 0x0740 	// MCU_ADDRESS
REG=1, 0x3390, 0x00FD 	// MCU_DATA_0
REG=1, 0x3392, 0x02CE 	// MCU_DATA_1
REG=1, 0x3394, 0x306F 	// MCU_DATA_2
REG=1, 0x3396, 0x06E6 	// MCU_DATA_3
REG=1, 0x3398, 0x064F 	// MCU_DATA_4
REG=1, 0x339A, 0x05F3 	// MCU_DATA_5
REG=1, 0x339C, 0x02CE 	// MCU_DATA_6
REG=1, 0x339E, 0x8FEC 	// MCU_DATA_7
REG=1, 0x338C, 0x0750 	// MCU_ADDRESS
REG=1, 0x3390, 0x0030 	// MCU_DATA_0
REG=1, 0x3392, 0xED00 	// MCU_DATA_1
REG=1, 0x3394, 0xE606 	// MCU_DATA_2
REG=1, 0x3396, 0x4F05 	// MCU_DATA_3
REG=1, 0x3398, 0xE304 	// MCU_DATA_4
REG=1, 0x339A, 0x188F 	// MCU_DATA_5
REG=1, 0x339C, 0xEC00 	// MCU_DATA_6
REG=1, 0x339E, 0x18ED 	// MCU_DATA_7
REG=1, 0x338C, 0x0760 	// MCU_ADDRESS
REG=1, 0x3390, 0x006C 	// MCU_DATA_0
REG=1, 0x3392, 0x06E6 	// MCU_DATA_1
REG=1, 0x3394, 0x06C1 	// MCU_DATA_2
REG=1, 0x3396, 0x0F25 	// MCU_DATA_3
REG=1, 0x3398, 0xDEEE 	// MCU_DATA_4
REG=1, 0x339A, 0x04CC 	// MCU_DATA_5
REG=1, 0x339C, 0x0400 	// MCU_DATA_6
REG=1, 0x339E, 0xED08 	// MCU_DATA_7
REG=1, 0x338C, 0x0770 	// MCU_ADDRESS
REG=1, 0x3390, 0xCC02 	// MCU_DATA_0
REG=1, 0x3392, 0xD0DD 	// MCU_DATA_1
REG=1, 0x3394, 0x4DCC 	// MCU_DATA_2
REG=1, 0x3396, 0x02F5 	// MCU_DATA_3
REG=1, 0x3398, 0x30ED 	// MCU_DATA_4
REG=1, 0x339A, 0x02FE 	// MCU_DATA_5
REG=1, 0x339C, 0x1050 	// MCU_DATA_6
REG=1, 0x339E, 0xEC02 	// MCU_DATA_7
REG=1, 0x338C, 0x0780 	// MCU_ADDRESS
REG=1, 0x3390, 0xFD02 	// MCU_DATA_0
REG=1, 0x3392, 0xF1FE 	// MCU_DATA_1
REG=1, 0x3394, 0x02F1 	// MCU_DATA_2
REG=1, 0x3396, 0xEC00 	// MCU_DATA_3
REG=1, 0x3398, 0xFD02 	// MCU_DATA_4
REG=1, 0x339A, 0xF330 	// MCU_DATA_5
REG=1, 0x339C, 0x6F06 	// MCU_DATA_6
REG=1, 0x339E, 0xE606 	// MCU_DATA_7
REG=1, 0x338C, 0x0790 	// MCU_ADDRESS
REG=1, 0x3390, 0x4F05 	// MCU_DATA_0
REG=1, 0x3392, 0xF302 	// MCU_DATA_1
REG=1, 0x3394, 0xF38F 	// MCU_DATA_2
REG=1, 0x3396, 0xEC00 	// MCU_DATA_3
REG=1, 0x3398, 0x30ED 	// MCU_DATA_4
REG=1, 0x339A, 0x00E6 	// MCU_DATA_5
REG=1, 0x339C, 0x064F 	// MCU_DATA_6
REG=1, 0x339E, 0x05E3 	// MCU_DATA_7
REG=1, 0x338C, 0x07A0 	// MCU_ADDRESS
REG=1, 0x3390, 0x0218 	// MCU_DATA_0
REG=1, 0x3392, 0x8FEC 	// MCU_DATA_1
REG=1, 0x3394, 0x0018 	// MCU_DATA_2
REG=1, 0x3396, 0xED00 	// MCU_DATA_3
REG=1, 0x3398, 0x6C06 	// MCU_DATA_4
REG=1, 0x339A, 0xE606 	// MCU_DATA_5
REG=1, 0x339C, 0xC11E 	// MCU_DATA_6
REG=1, 0x339E, 0x25DE 	// MCU_DATA_7
REG=1, 0x338C, 0x07B0 	// MCU_ADDRESS
REG=1, 0x3390, 0xEE02 	// MCU_DATA_0
REG=1, 0x3392, 0xCC06 	// MCU_DATA_1
REG=1, 0x3394, 0x81ED 	// MCU_DATA_2
REG=1, 0x3396, 0x22CC 	// MCU_DATA_3
REG=1, 0x3398, 0x02F5 	// MCU_DATA_4
REG=1, 0x339A, 0xDD00 	// MCU_DATA_5
REG=1, 0x339C, 0x3838 	// MCU_DATA_6
REG=1, 0x339E, 0x3831 	// MCU_DATA_7
REG=1, 0x338C, 0x87C0 	// MCU_ADDRESS
REG=1, 0x3390, 0x0039 	// MCU_DATA_0
VAR=0, 0x03, 0x0711 	// MON_ARG1
VAR8=0, 0x02, 0x0001 	// MON_CMD

[Black Level Oscillation Patch]
//-------------------------------------------------------------
// This fixes a problem that the black level would oscillate 
// As the algorithm was reset every frame. Now it only recalcs
// the Black Level when gain is changing
//-------------------------------------------------------------
REG=1, 0x338C, 0x0400 	// MCU_ADDRESS
REG=1, 0x3390, 0x3730 	// MCU_DATA_0
REG=1, 0x3392, 0x8FC3 	// MCU_DATA_1
REG=1, 0x3394, 0xFFEF 	// MCU_DATA_2
REG=1, 0x3396, 0x8F35 	// MCU_DATA_3
REG=1, 0x3398, 0xCC00 	// MCU_DATA_4
REG=1, 0x339A, 0x2DBD 	// MCU_DATA_5
REG=1, 0x339C, 0x82CF 	// MCU_DATA_6
REG=1, 0x339E, 0x5F84 	// MCU_DATA_7
REG=1, 0x338C, 0x0410 	// MCU_ADDRESS
REG=1, 0x3390, 0x0730 	// MCU_DATA_0
REG=1, 0x3392, 0xED0B 	// MCU_DATA_1
REG=1, 0x3394, 0xCC00 	// MCU_DATA_2
REG=1, 0x3396, 0x2FBD 	// MCU_DATA_3
REG=1, 0x3398, 0x82CF 	// MCU_DATA_4
REG=1, 0x339A, 0x5F84 	// MCU_DATA_5
REG=1, 0x339C, 0x0730 	// MCU_DATA_6
REG=1, 0x339E, 0xED09 	// MCU_DATA_7
REG=1, 0x338C, 0x0420 	// MCU_ADDRESS
REG=1, 0x3390, 0xCC00 	// MCU_DATA_0
REG=1, 0x3392, 0x2CBD 	// MCU_DATA_1
REG=1, 0x3394, 0x82CF 	// MCU_DATA_2
REG=1, 0x3396, 0x5F84 	// MCU_DATA_3
REG=1, 0x3398, 0x0730 	// MCU_DATA_4
REG=1, 0x339A, 0xED07 	// MCU_DATA_5
REG=1, 0x339C, 0x6D11 	// MCU_DATA_6
REG=1, 0x339E, 0x2709 	// MCU_DATA_7
REG=1, 0x338C, 0x0430 	// MCU_ADDRESS
REG=1, 0x3390, 0xE611 	// MCU_DATA_0
REG=1, 0x3392, 0xC102 	// MCU_DATA_1
REG=1, 0x3394, 0x2703 	// MCU_DATA_2
REG=1, 0x3396, 0x7E04 	// MCU_DATA_3
REG=1, 0x3398, 0xDBDC 	// MCU_DATA_4
REG=1, 0x339A, 0x72B3 	// MCU_DATA_5
REG=1, 0x339C, 0x02EE 	// MCU_DATA_6
REG=1, 0x339E, 0x2605 	// MCU_DATA_7
REG=1, 0x338C, 0x0440 	// MCU_ADDRESS
REG=1, 0x3390, 0x7D02 	// MCU_DATA_0
REG=1, 0x3392, 0xF027 	// MCU_DATA_1
REG=1, 0x3394, 0x0FCC 	// MCU_DATA_2
REG=1, 0x3396, 0x0047 	// MCU_DATA_3
REG=1, 0x3398, 0xED00 	// MCU_DATA_4
REG=1, 0x339A, 0xDC72 	// MCU_DATA_5
REG=1, 0x339C, 0xBD82 	// MCU_DATA_6
REG=1, 0x339E, 0xBBDC 	// MCU_DATA_7
REG=1, 0x338C, 0x0450 	// MCU_ADDRESS
REG=1, 0x3390, 0x72FD 	// MCU_DATA_0
REG=1, 0x3392, 0x02EE 	// MCU_DATA_1
REG=1, 0x3394, 0xCC00 	// MCU_DATA_2
REG=1, 0x3396, 0x0A30 	// MCU_DATA_3
REG=1, 0x3398, 0xED00 	// MCU_DATA_4
REG=1, 0x339A, 0xDC67 	// MCU_DATA_5
REG=1, 0x339C, 0xBD82 	// MCU_DATA_6
REG=1, 0x339E, 0xBBDE 	// MCU_DATA_7
REG=1, 0x338C, 0x0460 	// MCU_ADDRESS
REG=1, 0x3390, 0x4DEE 	// MCU_DATA_0
REG=1, 0x3392, 0x14AD 	// MCU_DATA_1
REG=1, 0x3394, 0x00CC 	// MCU_DATA_2
REG=1, 0x3396, 0x0009 	// MCU_DATA_3
REG=1, 0x3398, 0x30ED 	// MCU_DATA_4
REG=1, 0x339A, 0x00DC 	// MCU_DATA_5
REG=1, 0x339C, 0x70BD 	// MCU_DATA_6
REG=1, 0x339E, 0x82BB 	// MCU_DATA_7
REG=1, 0x338C, 0x0470 	// MCU_ADDRESS
REG=1, 0x3390, 0xD66A 	// MCU_DATA_0
REG=1, 0x3392, 0x4F30 	// MCU_DATA_1
REG=1, 0x3394, 0xED02 	// MCU_DATA_2
REG=1, 0x3396, 0xD676 	// MCU_DATA_3
REG=1, 0x3398, 0xED00 	// MCU_DATA_4
REG=1, 0x339A, 0xCC00 	// MCU_DATA_5
REG=1, 0x339C, 0x80BD 	// MCU_DATA_6
REG=1, 0x339E, 0x81D1 	// MCU_DATA_7
REG=1, 0x338C, 0x0480 	// MCU_ADDRESS
REG=1, 0x3390, 0x30E6 	// MCU_DATA_0
REG=1, 0x3392, 0x03E7 	// MCU_DATA_1
REG=1, 0x3394, 0x06F6 	// MCU_DATA_2
REG=1, 0x3396, 0x0194 	// MCU_DATA_3
REG=1, 0x3398, 0xA606 	// MCU_DATA_4
REG=1, 0x339A, 0x3DED 	// MCU_DATA_5
REG=1, 0x339C, 0x0D04 	// MCU_DATA_6
REG=1, 0x339E, 0x0404 	// MCU_DATA_7
REG=1, 0x338C, 0x0490 	// MCU_ADDRESS
REG=1, 0x3390, 0x0404 	// MCU_DATA_0
REG=1, 0x3392, 0xE710 	// MCU_DATA_1
REG=1, 0x3394, 0xF601 	// MCU_DATA_2
REG=1, 0x3396, 0x96A6 	// MCU_DATA_3
REG=1, 0x3398, 0x063D 	// MCU_DATA_4
REG=1, 0x339A, 0xED0D 	// MCU_DATA_5
REG=1, 0x339C, 0x0404 	// MCU_DATA_6
REG=1, 0x339E, 0x0404 	// MCU_DATA_7
REG=1, 0x338C, 0x04A0 	// MCU_ADDRESS
REG=1, 0x3390, 0x04E7 	// MCU_DATA_0
REG=1, 0x3392, 0x0FA6 	// MCU_DATA_1
REG=1, 0x3394, 0x10A7 	// MCU_DATA_2
REG=1, 0x3396, 0x01A6 	// MCU_DATA_3
REG=1, 0x3398, 0x06A7 	// MCU_DATA_4
REG=1, 0x339A, 0x00BD 	// MCU_DATA_5
REG=1, 0x339C, 0x9904 	// MCU_DATA_6
REG=1, 0x339E, 0xCC00 	// MCU_DATA_7
REG=1, 0x338C, 0x04B0 	// MCU_ADDRESS
REG=1, 0x3390, 0x2F30 	// MCU_DATA_0
REG=1, 0x3392, 0xED00 	// MCU_DATA_1
REG=1, 0x3394, 0xDC81 	// MCU_DATA_2
REG=1, 0x3396, 0xEA0A 	// MCU_DATA_3
REG=1, 0x3398, 0xAA09 	// MCU_DATA_4
REG=1, 0x339A, 0xBD82 	// MCU_DATA_5
REG=1, 0x339C, 0xBBCC 	// MCU_DATA_6
REG=1, 0x339E, 0x002C 	// MCU_DATA_7
REG=1, 0x338C, 0x04C0 	// MCU_ADDRESS
REG=1, 0x3390, 0x30ED 	// MCU_DATA_0
REG=1, 0x3392, 0x00DC 	// MCU_DATA_1
REG=1, 0x3394, 0x83EA 	// MCU_DATA_2
REG=1, 0x3396, 0x08AA 	// MCU_DATA_3
REG=1, 0x3398, 0x07BD 	// MCU_DATA_4
REG=1, 0x339A, 0x82BB 	// MCU_DATA_5
REG=1, 0x339C, 0xCC00 	// MCU_DATA_6
REG=1, 0x339E, 0x2D30 	// MCU_DATA_7
REG=1, 0x338C, 0x04D0 	// MCU_ADDRESS
REG=1, 0x3390, 0xED00 	// MCU_DATA_0
REG=1, 0x3392, 0xDC7F 	// MCU_DATA_1
REG=1, 0x3394, 0xEA0C 	// MCU_DATA_2
REG=1, 0x3396, 0xAA0B 	// MCU_DATA_3
REG=1, 0x3398, 0xBD82 	// MCU_DATA_4
REG=1, 0x339A, 0xBB30 	// MCU_DATA_5
REG=1, 0x339C, 0xE611 	// MCU_DATA_6
REG=1, 0x339E, 0xC101 	// MCU_DATA_7
REG=1, 0x338C, 0x04E0 	// MCU_ADDRESS
REG=1, 0x3390, 0x2707 	// MCU_DATA_0
REG=1, 0x3392, 0xC102 	// MCU_DATA_1
REG=1, 0x3394, 0x2703 	// MCU_DATA_2
REG=1, 0x3396, 0x7E05 	// MCU_DATA_3
REG=1, 0x3398, 0xFBF6 	// MCU_DATA_4
REG=1, 0x339A, 0x019C 	// MCU_DATA_5
REG=1, 0x339C, 0xE710 	// MCU_DATA_6
REG=1, 0x339E, 0xB601 	// MCU_DATA_7
REG=1, 0x338C, 0x04F0 	// MCU_ADDRESS
REG=1, 0x3390, 0x9B11 	// MCU_DATA_0
REG=1, 0x3392, 0x2402 	// MCU_DATA_1
REG=1, 0x3394, 0xA710 	// MCU_DATA_2
REG=1, 0x3396, 0xF601 	// MCU_DATA_3
REG=1, 0x3398, 0x9DE1 	// MCU_DATA_4
REG=1, 0x339A, 0x1024 	// MCU_DATA_5
REG=1, 0x339C, 0x02E7 	// MCU_DATA_6
REG=1, 0x339E, 0x10CC 	// MCU_DATA_7
REG=1, 0x338C, 0x0500 	// MCU_ADDRESS
REG=1, 0x3390, 0x013C 	// MCU_DATA_0
REG=1, 0x3392, 0xBD82 	// MCU_DATA_1
REG=1, 0x3394, 0xCF30 	// MCU_DATA_2
REG=1, 0x3396, 0xED04 	// MCU_DATA_3
REG=1, 0x3398, 0xCC03 	// MCU_DATA_4
REG=1, 0x339A, 0xFFA3 	// MCU_DATA_5
REG=1, 0x339C, 0x04ED 	// MCU_DATA_6
REG=1, 0x339E, 0x09CC 	// MCU_DATA_7
REG=1, 0x338C, 0x0510 	// MCU_ADDRESS
REG=1, 0x3390, 0x0080 	// MCU_DATA_0
REG=1, 0x3392, 0xED02 	// MCU_DATA_1
REG=1, 0x3394, 0xCC03 	// MCU_DATA_2
REG=1, 0x3396, 0xFFED 	// MCU_DATA_3
REG=1, 0x3398, 0x008F 	// MCU_DATA_4
REG=1, 0x339A, 0x30ED 	// MCU_DATA_5
REG=1, 0x339C, 0x04EC 	// MCU_DATA_6
REG=1, 0x339E, 0x09EE 	// MCU_DATA_7
REG=1, 0x338C, 0x0520 	// MCU_ADDRESS
REG=1, 0x3390, 0x04BD 	// MCU_DATA_0
REG=1, 0x3392, 0x81D1 	// MCU_DATA_1
REG=1, 0x3394, 0x30EC 	// MCU_DATA_2
REG=1, 0x3396, 0x02ED 	// MCU_DATA_3
REG=1, 0x3398, 0x0DEC 	// MCU_DATA_4
REG=1, 0x339A, 0x0904 	// MCU_DATA_5
REG=1, 0x339C, 0xB310 	// MCU_DATA_6
REG=1, 0x339E, 0xC722 	// MCU_DATA_7
REG=1, 0x338C, 0x0530 	// MCU_ADDRESS
REG=1, 0x3390, 0x07EC 	// MCU_DATA_0
REG=1, 0x3392, 0x0DC3 	// MCU_DATA_1
REG=1, 0x3394, 0x0001 	// MCU_DATA_2
REG=1, 0x3396, 0xED0D 	// MCU_DATA_3
REG=1, 0x3398, 0xF601 	// MCU_DATA_4
REG=1, 0x339A, 0x9B4F 	// MCU_DATA_5
REG=1, 0x339C, 0xED02 	// MCU_DATA_6
REG=1, 0x339E, 0xEC0D 	// MCU_DATA_7
REG=1, 0x338C, 0x0540 	// MCU_ADDRESS
REG=1, 0x3390, 0xED00 	// MCU_DATA_0
REG=1, 0x3392, 0xE610 	// MCU_DATA_1
REG=1, 0x3394, 0x4FBD 	// MCU_DATA_2
REG=1, 0x3396, 0x81D1 	// MCU_DATA_3
REG=1, 0x3398, 0x30EC 	// MCU_DATA_4
REG=1, 0x339A, 0x02ED 	// MCU_DATA_5
REG=1, 0x339C, 0x0BF6 	// MCU_DATA_6
REG=1, 0x339E, 0x019C 	// MCU_DATA_7
REG=1, 0x338C, 0x0550 	// MCU_ADDRESS
REG=1, 0x3390, 0x4FED 	// MCU_DATA_0
REG=1, 0x3392, 0x02EC 	// MCU_DATA_1
REG=1, 0x3394, 0x0DED 	// MCU_DATA_2
REG=1, 0x3396, 0x00E6 	// MCU_DATA_3
REG=1, 0x3398, 0x104F 	// MCU_DATA_4
REG=1, 0x339A, 0xBD81 	// MCU_DATA_5
REG=1, 0x339C, 0xD130 	// MCU_DATA_6
REG=1, 0x339E, 0xEC02 	// MCU_DATA_7
REG=1, 0x338C, 0x0560 	// MCU_ADDRESS
REG=1, 0x3390, 0xED09 	// MCU_DATA_0
REG=1, 0x3392, 0xF601 	// MCU_DATA_1
REG=1, 0x3394, 0x9D4F 	// MCU_DATA_2
REG=1, 0x3396, 0xED02 	// MCU_DATA_3
REG=1, 0x3398, 0xEC0D 	// MCU_DATA_4
REG=1, 0x339A, 0xED00 	// MCU_DATA_5
REG=1, 0x339C, 0xE610 	// MCU_DATA_6
REG=1, 0x339E, 0x4FBD 	// MCU_DATA_7
REG=1, 0x338C, 0x0570 	// MCU_ADDRESS
REG=1, 0x3390, 0x81D1 	// MCU_DATA_0
REG=1, 0x3392, 0x30EC 	// MCU_DATA_1
REG=1, 0x3394, 0x02ED 	// MCU_DATA_2
REG=1, 0x3396, 0x07DC 	// MCU_DATA_3
REG=1, 0x3398, 0x6DED 	// MCU_DATA_4
REG=1, 0x339A, 0x02EC 	// MCU_DATA_5
REG=1, 0x339C, 0x0BED 	// MCU_DATA_6
REG=1, 0x339E, 0x00CC 	// MCU_DATA_7
REG=1, 0x338C, 0x0580 	// MCU_ADDRESS
REG=1, 0x3390, 0x0080 	// MCU_DATA_0
REG=1, 0x3392, 0xBD81 	// MCU_DATA_1
REG=1, 0x3394, 0xD130 	// MCU_DATA_2
REG=1, 0x3396, 0xEC02 	// MCU_DATA_3
REG=1, 0x3398, 0xED0D 	// MCU_DATA_4
REG=1, 0x339A, 0xCC01 	// MCU_DATA_5
REG=1, 0x339C, 0x6AED 	// MCU_DATA_6
REG=1, 0x339E, 0x00EC 	// MCU_DATA_7
REG=1, 0x338C, 0x0590 	// MCU_ADDRESS
REG=1, 0x3390, 0x0DBD 	// MCU_DATA_0
REG=1, 0x3392, 0x82BB 	// MCU_DATA_1
REG=1, 0x3394, 0xDC6D 	// MCU_DATA_2
REG=1, 0x3396, 0x30ED 	// MCU_DATA_3
REG=1, 0x3398, 0x02EC 	// MCU_DATA_4
REG=1, 0x339A, 0x09ED 	// MCU_DATA_5
REG=1, 0x339C, 0x00CC 	// MCU_DATA_6
REG=1, 0x339E, 0x0080 	// MCU_DATA_7
REG=1, 0x338C, 0x05A0 	// MCU_ADDRESS
REG=1, 0x3390, 0xBD81 	// MCU_DATA_0
REG=1, 0x3392, 0xD130 	// MCU_DATA_1
REG=1, 0x3394, 0xEC02 	// MCU_DATA_2
REG=1, 0x3396, 0xED0D 	// MCU_DATA_3
REG=1, 0x3398, 0xCC01 	// MCU_DATA_4
REG=1, 0x339A, 0x6BED 	// MCU_DATA_5
REG=1, 0x339C, 0x00EC 	// MCU_DATA_6
REG=1, 0x339E, 0x0DBD 	// MCU_DATA_7
REG=1, 0x338C, 0x05B0 	// MCU_ADDRESS
REG=1, 0x3390, 0x82BB 	// MCU_DATA_0
REG=1, 0x3392, 0x30EC 	// MCU_DATA_1
REG=1, 0x3394, 0x0DED 	// MCU_DATA_2
REG=1, 0x3396, 0x02D6 	// MCU_DATA_3
REG=1, 0x3398, 0x9C4F 	// MCU_DATA_4
REG=1, 0x339A, 0xED00 	// MCU_DATA_5
REG=1, 0x339C, 0xCC00 	// MCU_DATA_6
REG=1, 0x339E, 0x80BD 	// MCU_DATA_7
REG=1, 0x338C, 0x05C0 	// MCU_ADDRESS
REG=1, 0x3390, 0x81D1 	// MCU_DATA_0
REG=1, 0x3392, 0x30EC 	// MCU_DATA_1
REG=1, 0x3394, 0x02ED 	// MCU_DATA_2
REG=1, 0x3396, 0x0DCC 	// MCU_DATA_3
REG=1, 0x3398, 0x016C 	// MCU_DATA_4
REG=1, 0x339A, 0xED00 	// MCU_DATA_5
REG=1, 0x339C, 0xEC0D 	// MCU_DATA_6
REG=1, 0x339E, 0xBD82 	// MCU_DATA_7
REG=1, 0x338C, 0x05D0 	// MCU_ADDRESS
REG=1, 0x3390, 0xBBDC 	// MCU_DATA_0
REG=1, 0x3392, 0x6D30 	// MCU_DATA_1
REG=1, 0x3394, 0xED02 	// MCU_DATA_2
REG=1, 0x3396, 0xEC07 	// MCU_DATA_3
REG=1, 0x3398, 0xED00 	// MCU_DATA_4
REG=1, 0x339A, 0xCC00 	// MCU_DATA_5
REG=1, 0x339C, 0x80BD 	// MCU_DATA_6
REG=1, 0x339E, 0x81D1 	// MCU_DATA_7
REG=1, 0x338C, 0x05E0 	// MCU_ADDRESS
REG=1, 0x3390, 0x30EC 	// MCU_DATA_0
REG=1, 0x3392, 0x02ED 	// MCU_DATA_1
REG=1, 0x3394, 0x0DCC 	// MCU_DATA_2
REG=1, 0x3396, 0x016D 	// MCU_DATA_3
REG=1, 0x3398, 0xED00 	// MCU_DATA_4
REG=1, 0x339A, 0xEC0D 	// MCU_DATA_5
REG=1, 0x339C, 0xBD82 	// MCU_DATA_6
REG=1, 0x339E, 0xBBCC 	// MCU_DATA_7
REG=1, 0x338C, 0x05F0 	// MCU_ADDRESS
REG=1, 0x3390, 0x014E 	// MCU_DATA_0
REG=1, 0x3392, 0x30ED 	// MCU_DATA_1
REG=1, 0x3394, 0x00D6 	// MCU_DATA_2
REG=1, 0x3396, 0x6F4F 	// MCU_DATA_3
REG=1, 0x3398, 0xBD82 	// MCU_DATA_4
REG=1, 0x339A, 0xBB30 	// MCU_DATA_5
REG=1, 0x339C, 0xC612 	// MCU_DATA_6
REG=1, 0x339E, 0x3A35 	// MCU_DATA_7
REG=1, 0x338C, 0x0600 	// MCU_ADDRESS
REG=1, 0x3390, 0x393C 	// MCU_DATA_0
REG=1, 0x3392, 0x3C34 	// MCU_DATA_1
REG=1, 0x3394, 0xCC00 	// MCU_DATA_2
REG=1, 0x3396, 0x21FD 	// MCU_DATA_3
REG=1, 0x3398, 0x02EE 	// MCU_DATA_4
REG=1, 0x339A, 0xB702 	// MCU_DATA_5
REG=1, 0x339C, 0xF0CC 	// MCU_DATA_6
REG=1, 0x339E, 0x02D0 	// MCU_DATA_7
REG=1, 0x338C, 0x0610 	// MCU_ADDRESS
REG=1, 0x3390, 0x30ED 	// MCU_DATA_0
REG=1, 0x3392, 0x02FE 	// MCU_DATA_1
REG=1, 0x3394, 0x1050 	// MCU_DATA_2
REG=1, 0x3396, 0xEC04 	// MCU_DATA_3
REG=1, 0x3398, 0xFD02 	// MCU_DATA_4
REG=1, 0x339A, 0xCCFE 	// MCU_DATA_5
REG=1, 0x339C, 0x02CC 	// MCU_DATA_6
REG=1, 0x339E, 0xEC00 	// MCU_DATA_7
REG=1, 0x338C, 0x0620 	// MCU_ADDRESS
REG=1, 0x3390, 0xFD02 	// MCU_DATA_0
REG=1, 0x3392, 0xCE30 	// MCU_DATA_1
REG=1, 0x3394, 0x6F04 	// MCU_DATA_2
REG=1, 0x3396, 0xE604 	// MCU_DATA_3
REG=1, 0x3398, 0x4F05 	// MCU_DATA_4
REG=1, 0x339A, 0xF302 	// MCU_DATA_5
REG=1, 0x339C, 0xCE8F 	// MCU_DATA_6
REG=1, 0x339E, 0xEC00 	// MCU_DATA_7
REG=1, 0x338C, 0x0630 	// MCU_ADDRESS
REG=1, 0x3390, 0x30ED 	// MCU_DATA_0
REG=1, 0x3392, 0x00E6 	// MCU_DATA_1
REG=1, 0x3394, 0x044F 	// MCU_DATA_2
REG=1, 0x3396, 0x05E3 	// MCU_DATA_3
REG=1, 0x3398, 0x0218 	// MCU_DATA_4
REG=1, 0x339A, 0x8FEC 	// MCU_DATA_5
REG=1, 0x339C, 0x0018 	// MCU_DATA_6
REG=1, 0x339E, 0xED00 	// MCU_DATA_7
REG=1, 0x338C, 0x0640 	// MCU_ADDRESS
REG=1, 0x3390, 0x6C04 	// MCU_DATA_0
REG=1, 0x3392, 0xE604 	// MCU_DATA_1
REG=1, 0x3394, 0xC10F 	// MCU_DATA_2
REG=1, 0x3396, 0x25DE 	// MCU_DATA_3
REG=1, 0x3398, 0xEE02 	// MCU_DATA_4
REG=1, 0x339A, 0xCC04 	// MCU_DATA_5
REG=1, 0x339C, 0x00ED 	// MCU_DATA_6
REG=1, 0x339E, 0x08CC 	// MCU_DATA_7
REG=1, 0x338C, 0x0650 	// MCU_ADDRESS
REG=1, 0x3390, 0x02D0 	// MCU_DATA_0
REG=1, 0x3392, 0xDD4D 	// MCU_DATA_1
REG=1, 0x3394, 0x3838 	// MCU_DATA_2
REG=1, 0x3396, 0x3139 	// MCU_DATA_3

REG=1, 0x338C, 0x2003	//MON_ARG1
REG=1, 0x3390, 0x0601	//MON_ARG1
REG=1, 0x338C, 0xA002	//MON_CMD
REG=1, 0x3390, 0x0001	//MON_CMD

[Powerup]
//---------------------------------------------
// Per default the sensor comes up in standby, 
// this enables the image output
//---------------------------------------------
REG=0x301A,0x0ACC                  //Reset Register
FIELD_WR= STANDBY_CONTROL,0x0008   //Allow Standby

[Refresh]
//---------------------------------------
// This Section refreshes the variables
//---------------------------------------
VAR8=0x01, 0x03, 0x0005 	//Refresh
DELAY=500			//Wait


[State Setup]
//---------------------------------------
//These settings are used by DevWare to 
//Desplay the correct framerate and select
//The correct image capture mode
//----------------------------------------
STATE=Still Mode, 1
//STATE=Num Capture Frames, 4
//STATE=Still Capture Average, 1
STATE=Save 24bpp BMP, 1
STATE=Save RAW, 0
STATE=Save TXT, 1
STATE=Save HEX, 0
STATE=Save RAW TIFF, 0
STATE=Save 48bpp COLOR TIFF, 0
STATE=Save RAW JPEG, 0
STATE=Save BMP Info, 0
//STATE=Display Zoom, 4  //  zoom 0.5X

[Viewfinder ON]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 0 //VIDEO Off
FIELD_WR = SEQ_CMD, 1          //Back to preview

[Viewfinder OFF]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1 //VIDEO On
FIELD_WR = SEQ_CMD, 2          //Capture on

[Video Capture ON]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1 //VIDEO On
FIELD_WR = SEQ_CMD, 2          //Capture on

[Video Capture OFF]
FIELD_WR = SEQ_CMD, 1          //Back to preview

[Enable Capture with LED Flash]
VAR8=1, 0x06, 1 // SEQ_SHARED_PARAMS_FLASH_TYPE
VAR8=1, 0x35, 1 // SEQ_PREVIEW_PAR_LEAVE_FLASH
VAR8=1, 0x3C, 1 // SEQ_CAP_PAR_ENTER_FLASH

[Disable Capture with Flash]
VAR8=1, 0x06, 0 // SEQ_SHARED_PARAMS_FLASH_TYPE
VAR8=1, 0x35, 0 // SEQ_PREVIEW_PAR_LEAVE_FLASH
VAR8=1, 0x3C, 0 // SEQ_CAP_PAR_ENTER_FLASH
 
[Enable stepper motor AF]
VAR8=6, 0x02, 130 // AFM_TYPE
VAR8=1, 0x2C, 1   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x03, 5   // SEQ_CMD
DELAY=1000
VAR8=1, 0x2C, 0   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x3A, 1   // SEQ_CAP_PAR_ENTER_AF

[Enable helimorph AF]
VAR8=6, 0x02, 129 // AFM_TYPE
VAR8=1, 0x2C, 1   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x03, 5   // SEQ_CMD
DELAY=1000
VAR8=1, 0x2C, 0   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x3A, 1   // SEQ_CAP_PAR_ENTER_AF
VAR=6, 0x0B, 0x0262 //AFM_FREQ_MCLK_HI For 40MHz
VAR=6, 0x0D, 0x5A00 //AFM_FREQ_MCLK_LO

[Disable AF]
VAR8=6, 0x02, 128 // AFM_TYPE
VAR8=1, 0x2C, 0   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x03, 5   // SEQ_CMD
VAR8=1, 0x3A, 0   // SEQ_CAP_PAR_ENTER_AF
 
[Refocus]
VAR8=1, 0x02, 31  // SEQ_MODE
VAR8=5, 0x04, 1   // AF_MODE


[Analog_Settings_Final]
//-------------------------------------------
// Analog Settings optimized by JohnL.
//-------------------------------------------
REG=0x30E0, 0x9604      //SAMP_ADDR_EN
REG=0x30E2, 0x854F      //SAMP_RD1_SIG
REG=0x30E4, 0x9685      //SAMP_RD2_SIG
REG=0x30E6, 0x8564      //SAMP_RD1_SIG_BOOST
REG=0x30E8, 0x9685      //SAMP_RD2_SIG_BOOST
REG=0x30EA, 0x3A04      //SAMP_RD1_RST
REG=0x30EC, 0x4F3A      //SAMP_RD2_RST
REG=0x30EE, 0x3A1B      //SAMP_RD1_RST_BOOST
REG=0x30F0, 0x4F3A      //SAMP_RD2_RST_BOOST
REG=0x30F2, 0x9600      //SAMP_VLN_EN
REG=0x30F4, 0x9600      //SAMP_VLN_HOLD
REG=0x30F6, 0x9615      //SAMP_RST1_EN
REG=0x30F8, 0x962D      //SAMP_RST2_EN
REG=0x30FA, 0x1200      //SAMP_RST1_BOOST
REG=0x30FC, 0x009F      //SAMP_RST2_BOOST
REG=0x30FE, 0x6350      //SAMP_TX_EN
REG=0x3100, 0x6350      //SAMP_TX_BOOST
REG=0x3102, 0x853B      //SAMP_SAMP1_SIG
REG=0x3104, 0x934F      //SAMP_SAMP2_SIG
REG=0x3106, 0x3904      //SAMP_SAMP1_RST
REG=0x3108, 0x4E04      //SAMP_SAMP2_RST
REG=0x310A, 0x9601      //SAMP_VCL_EN
REG=0x310C, 0x9601      //SAMP_COLCLAMP
REG=0x310E, 0x9604      //SAMP_SH_VCL
REG=0x3110, 0x9500      //SAMP_SH_VREF
REG=0x3116, 0x9604      //SAMP_RS_BOOST_EN
REG=0x311A, 0x9600      //SAMP_TX_BOOST_EN
REG=0x3122, 0x2C97      //SAMP_DONE   --- this is John Ladd last setting
REG=0,0x308C, 0x0507      //reset and rs boost level; --- previously it was 0x0707 in [Analog_Tuning] section
//-------------------------------------------
// Analog Settings optimized by AlexM.
//-------------------------------------------
REG=0x311E, 0xFF00      //SAMP_RST_BOOST_EN -- rev1 only; should not be in REV2
REG=0,0x313C, 0xFF01    //RST_RST_BOOST_EN --- rev1 only; should not be in REV2
REG=0,0x30D4, 0xA00A    //column corr. double sampling, clip_level=10; default 0x8020
VAR8=0x02, 0x0F, 0x000D  //AE_MAX_ADC_HI
VAR8=0x02, 0x10, 0x000B  //AE_MIN_ADC_HI (low light ADC ref 2 clicks from defaults)
VAR8=0x02, 0x11, 0x0007  //AE_MIN_ADC_LO
//REG=1, 0x3214, 0x06E6          //default 0x0480 - this went to PLL Setup 

[Mode]
//-------------------------------------------
// This Section sets up Preview/Capture Mode
//
// Preview: 640 x 480 at 15 FPS
// Capture: 1600 x 1200 at 15 FPS
//-------------------------------------------
VAR  = 7, 3, 640         //Output Width (A) = 640
VAR  = 7, 5, 480        //Output Height (A) = 480
VAR  = 7, 7, 0x0640         //Output Width (B) = 1600
VAR  = 7, 9, 0x04B0         //Output Height (B) = 1200
VAR  = 7, 13, 0x000         //Row Start (A) = 0
VAR  = 7, 15, 0x000         //Column Start (A) = 0
VAR  = 7, 17, 0x4BD         //Row End (A) = 1213
VAR  = 7, 19, 0x64D         //Column End (A) = 1613
VAR  = 7, 21, 0x4CE         //Extra Delay (A) = 1230
VAR  = 7, 23, 0x2111        //Row Speed (A) = 8465
VAR  = 7, 25, 0x046C        //Read Mode (A) = 1132
VAR  = 7, 27, 0x024F        //sensor_sample_time_pck (A) = 591
VAR  = 7, 29, 0x0102        //sensor_fine_correction (A) = 258
VAR  = 7, 31, 0x0279        //sensor_fine_IT_min (A) = 633
VAR  = 7, 33, 0x0155        //sensor_fine_IT_max_margin (A) = 341
VAR  = 7, 35, 0x04FF        //Frame Lines (A) = 1279
VAR  = 7, 37, 0x0824        //Line Length (A) = 2084
VAR  = 7, 39, 0x2020        //sensor_dac_id_4_5 (A) = 8224
VAR  = 7, 41, 0x2020        //sensor_dac_id_6_7 (A) = 8224
VAR  = 7, 43, 0x1020        //sensor_dac_id_8_9 (A) = 4128
VAR  = 7, 45, 0x2007        //sensor_dac_id_10_11 (A) = 8199
VAR  = 7, 47, 0x004         //Row Start (B) = 4
VAR  = 7, 49, 0x004         //Column Start (B) = 4
VAR  = 7, 51, 0x4BB         //Row End (B) = 1211
VAR  = 7, 53, 0x64B         //Column End (B) = 1611
VAR  = 7, 55, 0x4CE         //Extra Delay (B) = 1230
VAR  = 7, 57, 0x2111        //Row Speed (B) = 8465
VAR  = 7, 59, 0x0024        //Read Mode (B) = 36
VAR  = 7, 61, 0x0120        //sensor_sample_time_pck (B) = 288
VAR  = 7, 69, 0x04FF        //Frame Lines (B) = 1279
VAR  = 7, 71, 0x0824        //Line Length (B) = 2084
VAR  = 7, 81, 0x0000        //Crop_X0 (A) = 0
VAR  = 7, 83, 0x0320        //Crop_X1 (A) = 800
VAR  = 7, 85, 0x0000        //Crop_Y0 (A) = 0
VAR  = 7, 87, 0x0258        //Crop_Y1 (A) = 600
VAR  = 7, 95, 0x0000        //Crop_X0 (B) = 0
VAR  = 7, 97, 0x0640        //Crop_X1 (B) = 1600
VAR  = 7, 99, 0x0000        //Crop_Y0 (B) = 0
VAR  = 7, 101, 0x04B0       //Crop_Y1 (B) = 1200
VAR  = 2, 46, 0x00A0        //R9 Step = 160
VAR8 = 4, 8, 0x1F           //search_f1_50 = 31
VAR8 = 4, 9, 0x21           //search_f2_50 = 33
VAR8 = 4, 10, 0x25          //search_f1_60 = 37
VAR8 = 4, 11, 0x27          //search_f2_60 = 39
VAR  = 4, 17, 0x00A0        //R9_Step_60_A = 160
VAR  = 4, 19, 0x00C0        //R9_Step_50_A = 192
VAR  = 4, 21, 0x00A0        //R9_Step_60_B = 160
VAR  = 4, 23, 0x00C0        //R9_Step_50_B = 192
VAR8 = 1, 3, 0x05        //Refresh Sequencer = 5
DELAY = 500
VAR8 = 1, 3, 0x06        //Refresh Sequencer Mode = 6


[PLL Setup 20Mhz/80Mhz Out]
//----------------------------------------------
// This Section sets up the PLL for en external
// Masterclock of 20 MHZ and an internal clock
// of 80 MHz.
//----------------------------------------------
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: BYPASS PLL = 36617
REG = 0, 0x341C, 0x0020        //PLL Control 1 M = 32; N = 0 (Fpdf = 20; Fvco = 640)
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: PLL ON, bypassed = 36617
DELAY = 5	      	      // More than ample time to allow PLL to lock
REG = 0, 0x341E, 0x8F08        //PLL/ Clk_in control: USE PLL = 36616
REG=1, 0x3214, 0x06E6 	      //default 0x0480  -> make Slope work for 80 MHz Mclk
DELAY=100
STATE=Detect Master Clock, 1

[PLL Setup 24Mhz/80Mhz Out]
//----------------------------------------------
// This Section sets up the PLL for en external
// Masterclock of 24 MHZ and an internal clock
// of 80 MHz.
//----------------------------------------------
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: BYPASS PLL = 36617
REG = 0, 0x341C, 0x0250        //PLL Control 1 = 592
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: PLL ON, bypassed = 36617
DELAY = 500	      	      // More than ample time to allow PLL to lock
REG = 0, 0x341E, 0x8F08        //PLL/ Clk_in control: USE PLL = 36616
REG=1, 0x3214, 0x06E6 	      //default 0x0480  -> make Slope work for 80 MHz Mclk
DELAY=100
STATE=Detect Master Clock, 1

[PLL Setup 48Mhz In/80Mhz Out]
//----------------------------------------------
// This Section sets up the PLL for en external
// Masterclock of 48 MHZ and an internal clock
// of 80 MHz.
//----------------------------------------------
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: BYPASS PLL = 36617
REG = 0, 0x341C, 0x0550        //PLL Set M=80, N=5
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: PLL ON, bypassed = 36617
DELAY = 500	      	      // More than ample time to allow PLL to lock
REG = 0, 0x341E, 0x8F08        //PLL/ Clk_in control: USE PLL = 36616
REG=1, 0x3214, 0x06E6 	      //default 0x0480  -> make Slope work for 80 MHz Mclk
DELAY=100
STATE=Detect Master Clock, 1


[Noise Reduction Settings]
//----------------------------------------------
// This Section sets up the PLL for en external
// Masterclock of 48 MHZ and an internal clock
// of 80 MHz.
//----------------------------------------------
BITFIELD=0x33F4, 0x0008, 0x0001 //Enable noise reduction
REG=0x35A2, 0x00E2 		//DARK_COLOR_KILL_CONTROLS

VAR8=0x0B, 0x05, 0x0001 	//HG_PERCENT
REG=0x326E, 0x0086 		//FILTERS
REG=0x3270, 0x0FAA 		//Y_FILTER_THRESH_R
REG=0x3272, 0x0FE4 		//Y_FILTER_THRESH_G

[Lens Shading Largan]
//-------------------------------------------
// This is a Lesn Shading solution for the 
// Largan 795 lens used on our demo-boards. 
//-------------------------------------------
REG=0x34CE, 0x01A8 //LENS_CORRECTION_CONTROL
REG=0x34D0, 0x6030 //ZONE_BOUNDS_X1_X2
REG=0x34D2, 0x3590 //ZONE_BOUNDS_X0_X3
REG=0x34D4, 0x9E69 //ZONE_BOUNDS_X4_X5
REG=0x34D6, 0x4A25 //ZONE_BOUNDS_Y1_Y2
REG=0x34D8, 0x276F //ZONE_BOUNDS_Y0_Y3
REG=0x34DA, 0x744D //ZONE_BOUNDS_Y4_Y5
REG=0x34DC, 0xFDF7 //CENTER_OFFSET
REG=0x34DE, 0x00CF //FX_RED
REG=0x34E6, 0x00AA //FY_RED
REG=0x34EE, 0x0A3C //DF_DX_RED
REG=0x34F6, 0x0C24 //DF_DY_RED
REG=0x3500, 0x1F42 //SECOND_DERIV_ZONE_0_RED
REG=0x3508, 0x0812 //SECOND_DERIV_ZONE_1_RED
REG=0x3510, 0x1D3D //SECOND_DERIV_ZONE_2_RED
REG=0x3518, 0x143B //SECOND_DERIV_ZONE_3_RED
REG=0x3520, 0x1D44 //SECOND_DERIV_ZONE_4_RED
REG=0x3528, 0x1D49 //SECOND_DERIV_ZONE_5_RED
REG=0x3530, 0x19CE //SECOND_DERIV_ZONE_6_RED
REG=0x3538, 0xF8A8 //SECOND_DERIV_ZONE_7_RED
REG=0x354C, 0x03FF //K_FACTOR_IN_K_FX_FY_R_TL
REG=0x3544, 0x07FF //K_FACTOR_IN_K_FX_FY_R_TR
REG=0x355C, 0x03FF //K_FACTOR_IN_K_FX_FY_R_BL
REG=0x3554, 0x06BD //K_FACTOR_IN_K_FX_FY_R_BR
REG=0x34E0, 0x00B0 //FX_GREEN
REG=0x34E8, 0x007F //FY_GREEN
REG=0x34F0, 0x0CAF //DF_DX_GREEN
REG=0x34F8, 0x0CA6 //DF_DY_GREEN
REG=0x3502, 0x2A27 //SECOND_DERIV_ZONE_0_GREEN
REG=0x350A, 0x04DC //SECOND_DERIV_ZONE_1_GREEN
REG=0x3512, 0x1329 //SECOND_DERIV_ZONE_2_GREEN
REG=0x351A, 0x0C26 //SECOND_DERIV_ZONE_3_GREEN
REG=0x3522, 0x1632 //SECOND_DERIV_ZONE_4_GREEN
REG=0x352A, 0x182B //SECOND_DERIV_ZONE_5_GREEN
REG=0x3532, 0x1208 //SECOND_DERIV_ZONE_6_GREEN
REG=0x353A, 0xFC39 //SECOND_DERIV_ZONE_7_GREEN
REG=0x354E, 0x0755 //K_FACTOR_IN_K_FX_FY_G1_TL
REG=0x3546, 0x0026 //K_FACTOR_IN_K_FX_FY_G1_TR
REG=0x355E, 0x0767 //K_FACTOR_IN_K_FX_FY_G1_BL
REG=0x3556, 0x01C7 //K_FACTOR_IN_K_FX_FY_G1_BR
REG=0x34E4, 0x00A2 //FX_BLUE
REG=0x34EC, 0x005D //FY_BLUE
REG=0x34F4, 0x0C11 //DF_DX_BLUE
REG=0x34FC, 0x0BF2 //DF_DY_BLUE
REG=0x3506, 0x3E38 //SECOND_DERIV_ZONE_0_BLUE
REG=0x350E, 0x15E3 //SECOND_DERIV_ZONE_1_BLUE
REG=0x3516, 0x1D29 //SECOND_DERIV_ZONE_2_BLUE
REG=0x351E, 0x0D1C //SECOND_DERIV_ZONE_3_BLUE
REG=0x3526, 0x152C //SECOND_DERIV_ZONE_4_BLUE
REG=0x352E, 0x0825 //SECOND_DERIV_ZONE_5_BLUE
REG=0x3536, 0x050E //SECOND_DERIV_ZONE_6_BLUE
REG=0x353E, 0x0029 //SECOND_DERIV_ZONE_7_BLUE
REG=0x3552, 0x011C //K_FACTOR_IN_K_FX_FY_B_TL
REG=0x354A, 0x03FF //K_FACTOR_IN_K_FX_FY_B_TR
REG=0x3562, 0x07FF //K_FACTOR_IN_K_FX_FY_B_BL
REG=0x355A, 0x057B //K_FACTOR_IN_K_FX_FY_B_BR
REG=0x34E2, 0x00A5 //FX_GREEN2
REG=0x34EA, 0x0063 //FY_GREEN2
REG=0x34F2, 0x0AD2 //DF_DX_GREEN2
REG=0x34FA, 0x0BE7 //DF_DY_GREEN2
REG=0x3504, 0x3D43 //SECOND_DERIV_ZONE_0_GREEN2
REG=0x350C, 0x130E //SECOND_DERIV_ZONE_1_GREEN2
REG=0x3514, 0x1E33 //SECOND_DERIV_ZONE_2_GREEN2
REG=0x351C, 0x1536 //SECOND_DERIV_ZONE_3_GREEN2
REG=0x3524, 0x1632 //SECOND_DERIV_ZONE_4_GREEN2
REG=0x352C, 0x072E //SECOND_DERIV_ZONE_5_GREEN2
REG=0x3534, 0xFABE //SECOND_DERIV_ZONE_6_GREEN2
REG=0x353C, 0xECD2 //SECOND_DERIV_ZONE_7_GREEN2
REG=0x3550, 0x03FF //K_FACTOR_IN_K_FX_FY_G2_TL
REG=0x3548, 0x04D0 //K_FACTOR_IN_K_FX_FY_G2_TR
REG=0x3560, 0x03FF //K_FACTOR_IN_K_FX_FY_G2_BL
REG=0x3558, 0x07FF //K_FACTOR_IN_K_FX_FY_G2_BR
REG=0x3540, 0x0001 //X2_FACTORS
REG=0x3542, 0x0000 //GLOBAL_OFFSET_FXY_FUNCTION
STATE=Lens Correction Falloff, 100
STATE=Lens Correction Center X, 768
STATE=Lens Correction Center Y, 592
BITFIELD=0x3210, 0x0004, 1 //LENS_CORRECTION

[Lens Correction KANTATSU]
//-------------------------------------------
// This is a Lesn Shading solution for the 
// Kantatsu UB lens used on our demo-boards. 
//-------------------------------------------
REG=0x34CE, 0x01E8 //LENS_CORRECTION_CONTROL
REG=0x34D0, 0x6131 //ZONE_BOUNDS_X1_X2
REG=0x34D2, 0x3492 //ZONE_BOUNDS_X0_X3
REG=0x34D4, 0x9B68 //ZONE_BOUNDS_X4_X5
REG=0x34D6, 0x4B25 //ZONE_BOUNDS_Y1_Y2
REG=0x34D8, 0x2670 //ZONE_BOUNDS_Y0_Y3
REG=0x34DA, 0x724C //ZONE_BOUNDS_Y4_Y5
REG=0x34DC, 0xFFFA //CENTER_OFFSET
REG=0x34DE, 0x00B4 //FX_RED
REG=0x34E6, 0x00B4 //FY_RED
REG=0x34EE, 0x0A97 //DF_DX_RED
REG=0x34F6, 0x0BE9 //DF_DY_RED
REG=0x3500, 0xDF4C //SECOND_DERIV_ZONE_0_RED
REG=0x3508, 0x2DF9 //SECOND_DERIV_ZONE_1_RED
REG=0x3510, 0x202C //SECOND_DERIV_ZONE_2_RED
REG=0x3518, 0x2438 //SECOND_DERIV_ZONE_3_RED
REG=0x3520, 0x3031 //SECOND_DERIV_ZONE_4_RED
REG=0x3528, 0x202B //SECOND_DERIV_ZONE_5_RED
REG=0x3530, 0x1BD2 //SECOND_DERIV_ZONE_6_RED
REG=0x3538, 0x13D1 //SECOND_DERIV_ZONE_7_RED
REG=0x354C, 0x0600 //K_FACTOR_IN_K_FX_FY_R_TL
REG=0x3544, 0x07FF //K_FACTOR_IN_K_FX_FY_R_TR
REG=0x355C, 0x0000 //K_FACTOR_IN_K_FX_FY_R_BL
REG=0x3554, 0x06D0 //K_FACTOR_IN_K_FX_FY_R_BR
REG=0x34E0, 0x007E //FX_GREEN
REG=0x34E8, 0x007E //FY_GREEN
REG=0x34F0, 0x0CB0 //DF_DX_GREEN
REG=0x34F8, 0x0B43 //DF_DY_GREEN
REG=0x3502, 0x2A34 //SECOND_DERIV_ZONE_0_GREEN
REG=0x350A, 0x1CE9 //SECOND_DERIV_ZONE_1_GREEN
REG=0x3512, 0x0C14 //SECOND_DERIV_ZONE_2_GREEN
REG=0x351A, 0x181F //SECOND_DERIV_ZONE_3_GREEN
REG=0x3522, 0x2721 //SECOND_DERIV_ZONE_4_GREEN
REG=0x352A, 0x0A11 //SECOND_DERIV_ZONE_5_GREEN
REG=0x3532, 0x100B //SECOND_DERIV_ZONE_6_GREEN
REG=0x353A, 0x134A //SECOND_DERIV_ZONE_7_GREEN
REG=0x354E, 0x0625 //K_FACTOR_IN_K_FX_FY_G1_TL
REG=0x3546, 0x0297 //K_FACTOR_IN_K_FX_FY_G1_TR
REG=0x355E, 0x0000 //K_FACTOR_IN_K_FX_FY_G1_BL
REG=0x3556, 0x03FF //K_FACTOR_IN_K_FX_FY_G1_BR
REG=0x34E4, 0x007C //FX_BLUE
REG=0x34EC, 0x007C //FY_BLUE
REG=0x34F4, 0x0CA7 //DF_DX_BLUE
REG=0x34FC, 0x0A1C //DF_DY_BLUE
REG=0x3506, 0x3D37 //SECOND_DERIV_ZONE_0_BLUE
REG=0x350E, 0x30EA //SECOND_DERIV_ZONE_1_BLUE
REG=0x3516, 0x1D1A //SECOND_DERIV_ZONE_2_BLUE
REG=0x351E, 0x1E16 //SECOND_DERIV_ZONE_3_BLUE
REG=0x3526, 0x1D20 //SECOND_DERIV_ZONE_4_BLUE
REG=0x352E, 0xF00E //SECOND_DERIV_ZONE_5_BLUE
REG=0x3536, 0x060B //SECOND_DERIV_ZONE_6_BLUE
REG=0x353E, 0xDD34 //SECOND_DERIV_ZONE_7_BLUE
REG=0x3552, 0x0439 //K_FACTOR_IN_K_FX_FY_B_TL
REG=0x354A, 0x03FF //K_FACTOR_IN_K_FX_FY_B_TR
REG=0x3562, 0x0000 //K_FACTOR_IN_K_FX_FY_B_BL
REG=0x355A, 0x0000 //K_FACTOR_IN_K_FX_FY_B_BR
REG=0x34E2, 0x00A0 //FX_GREEN2
REG=0x34EA, 0x00A0 //FY_GREEN2
REG=0x34F2, 0x0A7D //DF_DX_GREEN2
REG=0x34FA, 0x09F0 //DF_DY_GREEN2
REG=0x3504, 0x4551 //SECOND_DERIV_ZONE_0_GREEN2
REG=0x350C, 0x310B //SECOND_DERIV_ZONE_1_GREEN2
REG=0x3514, 0x1824 //SECOND_DERIV_ZONE_2_GREEN2
REG=0x351C, 0x262B //SECOND_DERIV_ZONE_3_GREEN2
REG=0x3524, 0x1C17 //SECOND_DERIV_ZONE_4_GREEN2
REG=0x352C, 0xEF0E //SECOND_DERIV_ZONE_5_GREEN2
REG=0x3534, 0xF8D4 //SECOND_DERIV_ZONE_6_GREEN2
REG=0x353C, 0xE30A //SECOND_DERIV_ZONE_7_GREEN2
REG=0x3550, 0x03FF //K_FACTOR_IN_K_FX_FY_G2_TL
REG=0x3548, 0x0000 //K_FACTOR_IN_K_FX_FY_G2_TR
REG=0x3560, 0x0000 //K_FACTOR_IN_K_FX_FY_G2_BL
REG=0x3558, 0x07D9 //K_FACTOR_IN_K_FX_FY_G2_BR
REG=0x3540, 0x0001 //X2_FACTORS
REG=0x3542, 0x0000 //GLOBAL_OFFSET_FXY_FUNCTION
STATE=Lens Correction Falloff, 90
STATE=Lens Correction Center X, 780
STATE=Lens Correction Center Y, 600
BITFIELD=0x3210, 0x0004, 1 //LENS_CORRECTION


[CCM]
//-------------------------------------------
// This is the calibrated CCM used for our 
// Demo Boards. (Derived with Largan Lens)
//-------------------------------------------
VAR=3, 0x06, 0x02EF 	//AWB_CCM_L_0
VAR=3, 0x08, 0xFEA5     //AWB_CCM_L_1
VAR=3, 0x0A, 0xFF98     //AWB_CCM_L_2
VAR=3, 0x0C, 0xFF64     //AWB_CCM_L_3
VAR=3, 0x0E, 0x02DA 	//AWB_CCM_L_4
VAR=3, 0x10, 0xFF16     //AWB_CCM_L_5
VAR=3, 0x12, 0xFF74     //AWB_CCM_L_6
VAR=3, 0x14, 0xFD2A     //AWB_CCM_L_7
VAR=3, 0x16, 0x04EB 	//AWB_CCM_L_8
VAR=3, 0x18, 0x0024 	//AWB_CCM_L_9
VAR=3, 0x1A, 0x003F 	//AWB_CCM_L_10
VAR=3, 0x1C, 0xFFF3     //AWB_CCM_RL_0
VAR=3, 0x1E, 0x000D 	//AWB_CCM_RL_1
VAR=3, 0x20, 0x0049 	//AWB_CCM_RL_2
VAR=3, 0x22, 0x0029 	//AWB_CCM_RL_3
VAR=3, 0x24, 0xFFEE     //AWB_CCM_RL_4
VAR=3, 0x26, 0xFFFB     //AWB_CCM_RL_5
VAR=3, 0x28, 0x007E 	//AWB_CCM_RL_6
VAR=3, 0x2A, 0x016F 	//AWB_CCM_RL_7
VAR=3, 0x2C, 0xFDB5     //AWB_CCM_RL_8
VAR=3, 0x2E, 0x0018 	//AWB_CCM_RL_9
VAR=3, 0x30, 0xFFEC     //AWB_CCM_RL_10
VAR8=0x03, 0x4B, 0x00A6 //AWB_GAIN_MAX
  (Needed so we get enough Red Gain....)
VAR8=0x03, 0x4A, 0x005A //AWB_GAIN_MIN
  (Needed so we get enough Red Gain....)

[True Gray]
//-------------------------------------------
// This is the calibrated True Grey Threshold
// used for our Demo Boards. (Derived with 
// Largan Lens)
//-------------------------------------------
VAR8=0x03, 0x62, 0x00E1 	//AWB_TG_MAX0
VAR8=0x03, 0x61, 0x00C8 	//AWB_TG_MIN0


[AE]
//--------------------------------------------------
// This Section sets up the AE. 
// - Target is lower than default (50 compared to 60)
// - MDR uses MaxRGB for upper Clipping Detection
// - Reduce the Maximum EV shift for MDR
//--------------------------------------------------
REG=0x35B8, 0x1F20 	        //DEFINITION_OUTLIER_COUNTERS

VAR8=0x02, 0x06, 0x0032 	//AE_TARGET
VAR8=0x02, 0x42, 0x000B 	//AE_MM_SHIFTEV
VAR8=0x02, 0x4A, 0x008C 	//AE_MAX_TARGETD
REG=0x35BA, 0xFA08 		//RANGE_FOR_U_AND_L_COUNTERS

VAR8=0x02, 0x02, 0x0022 	//AE_WINDOW_POS  (12/16 in Size)
VAR8=0x02, 0x03, 0x00BB 	//AE_WINDOW_SIZE (2/16 from top/left) 


[LUT_sRGB]
//---------------------------------------------------
// This Settings produce sRGB output from the Sensor
// (No contrast and low saturation)
//---------------------------------------------------
VAR8=3,0x52,100 //Current Saturation Control
REG=1,0x3378,0x0000 //Set Same Gamma Table
REG=1,0x3364,0x2700 //Current Gamma Table
REG=1,0x3366,0x4935
REG=1,0x3368,0x7764
REG=1,0x336A,0x9788
REG=1,0x336C,0xAFA4
REG=1,0x336E,0xC5BA
REG=1,0x3370,0xD8CE
REG=1,0x3372,0xE8E0
REG=1,0x3374,0xF8F1
REG=1,0x3376,0x00FF
VAR8=1,0x18,100 //Sequencer Saturation Control
VAR8=1,0x19,25 //Sequencer Saturation Control
VAR8=7,0x6D,0x0003 //ModeDriver Gamma Control
VAR8=7,0x6E,0x0003
VAR8=7,0x6F,0
VAR8=7,0x70,39
VAR8=7,0x71,53
VAR8=7,0x72,73
VAR8=7,0x73,100
VAR8=7,0x74,119
VAR8=7,0x75,136
VAR8=7,0x76,151
VAR8=7,0x77,164
VAR8=7,0x78,175
VAR8=7,0x79,186
VAR8=7,0x7A,197
VAR8=7,0x7B,206
VAR8=7,0x7C,216
VAR8=7,0x7D,224
VAR8=7,0x7E,232
VAR8=7,0x7F,241
VAR8=7,0x80,248
VAR8=7,0x81,255
VAR8=7,0x82,0
VAR8=7,0x83,39
VAR8=7,0x84,53
VAR8=7,0x85,73
VAR8=7,0x86,100
VAR8=7,0x87,119
VAR8=7,0x88,136
VAR8=7,0x89,151
VAR8=7,0x8A,164
VAR8=7,0x8B,175
VAR8=7,0x8C,186
VAR8=7,0x8D,197
VAR8=7,0x8E,206
VAR8=7,0x8F,216
VAR8=7,0x90,224
VAR8=7,0x91,232
VAR8=7,0x92,241
VAR8=7,0x93,248
VAR8=7,0x94,255

[LUT_Vivid]
//------------------------------------------------------
// This Settings produce a Vivid output from the Sensor
// (Lots of contrast and Saturation
//------------------------------------------------------
VAR8=0x01, 0x18, 75     	//SEQ_LLSAT1
VAR8=3,0x52,75 //Current Saturation Control
REG=1,0x3378,0x0000 //Set Same Gamma Table
REG=1,0x3364,0x1B00 //Current Gamma Table
REG=1,0x3366,0x4C2E
REG=1,0x3368,0x9878
REG=1,0x336A,0xC1B0
REG=1,0x336C,0xD9CF
REG=1,0x336E,0xE8E1
REG=1,0x3370,0xF2EE
REG=1,0x3372,0xF9F6
REG=1,0x3374,0xFDFB
REG=1,0x3376,0x00FF
VAR8=1,0x18,75 //Sequencer Saturation Control
VAR8=1,0x19,10 //Sequencer Saturation Control
VAR8=7,0x6D,0x0003 //ModeDriver Gamma Control
VAR8=7,0x6E,0x0003
VAR8=7,0x6F,0
VAR8=7,0x70,27
VAR8=7,0x71,46
VAR8=7,0x72,76
VAR8=7,0x73,120
VAR8=7,0x74,152
VAR8=7,0x75,176
VAR8=7,0x76,193
VAR8=7,0x77,207
VAR8=7,0x78,217
VAR8=7,0x79,225
VAR8=7,0x7A,232
VAR8=7,0x7B,238
VAR8=7,0x7C,242
VAR8=7,0x7D,246
VAR8=7,0x7E,249
VAR8=7,0x7F,251
VAR8=7,0x80,253
VAR8=7,0x81,255
VAR8=7,0x82,0
VAR8=7,0x83,27
VAR8=7,0x84,46
VAR8=7,0x85,76
VAR8=7,0x86,120
VAR8=7,0x87,152
VAR8=7,0x88,176
VAR8=7,0x89,193
VAR8=7,0x8A,207
VAR8=7,0x8B,217
VAR8=7,0x8C,225
VAR8=7,0x8D,232
VAR8=7,0x8E,238
VAR8=7,0x8F,242
VAR8=7,0x90,246
VAR8=7,0x91,249
VAR8=7,0x92,251
VAR8=7,0x93,253
VAR8=7,0x94,255

[LUT_Moderate]
//-----------------------------------------------------
// This Settings produce a moderatly contrast enhanced 
// and saturated image output from the Sensor
//-----------------------------------------------------
VAR8=0x01, 0x18, 60     	//SEQ_LLSAT1
VAR8=3,0x52,60 //Current Saturation Control
REG=1,0x3378,0x0000 //Select Gamma Table
REG=1,0x3364,0x2900 //Current Gamma Table
REG=1,0x3366,0x533B
REG=1,0x3368,0x9176
REG=1,0x336A,0xB8A7
REG=1,0x336C,0xCFC5
REG=1,0x336E,0xE0D8
REG=1,0x3370,0xECE6
REG=1,0x3372,0xF5F1
REG=1,0x3374,0xFCF9
REG=1,0x3376,0x00FF
VAR8=1,0x18,60 //Sequencer Saturation Control
VAR8=7,0x6D,0x0003 //ModeDriver Gamma Control
VAR8=7,0x6E,0x0003
VAR8=7,0x6F,0
VAR8=7,0x70,41
VAR8=7,0x71,59
VAR8=7,0x72,83
VAR8=7,0x73,118
VAR8=7,0x74,145
VAR8=7,0x75,167
VAR8=7,0x76,184
VAR8=7,0x77,197
VAR8=7,0x78,207
VAR8=7,0x79,216
VAR8=7,0x7A,224
VAR8=7,0x7B,230
VAR8=7,0x7C,236
VAR8=7,0x7D,241
VAR8=7,0x7E,245
VAR8=7,0x7F,249
VAR8=7,0x80,252
VAR8=7,0x81,255
VAR8=7,0x82,0
VAR8=7,0x83,41
VAR8=7,0x84,59
VAR8=7,0x85,83
VAR8=7,0x86,118
VAR8=7,0x87,145
VAR8=7,0x88,167
VAR8=7,0x89,184
VAR8=7,0x8A,197
VAR8=7,0x8B,207
VAR8=7,0x8C,216
VAR8=7,0x8D,224
VAR8=7,0x8E,230
VAR8=7,0x8F,236
VAR8=7,0x90,241
VAR8=7,0x91,245
VAR8=7,0x92,249
VAR8=7,0x93,252
VAR8=7,0x94,255

[Low Power Preview 15 FPS]
//---------------------------------------------------
// Minimum 15 FPS (66 ms Int-Time)
//---------------------------------------------------
VAR8=0x02, 0x0C, 4 	//AE_MAX_INDEX
VAR8=0x02, 0x14, 32 	//AE_MAX_DGAIN_AE2

VAR8=0x01, 0x03, 0x0005 //Refresh
DELAY=500		//Wait


[Low Power Preview 10 FPS]
//---------------------------------------------------
// Minimum 10 FPS (100 ms Int-Time)
//---------------------------------------------------
VAR8=0x02, 0x0C, 6	//AE_MAX_INDEX
VAR8=0x02, 0x14, 32 	//AE_MAX_DGAIN_AE2

VAR8=0x01, 0x03, 0x0005 //Refresh
DELAY=500		//Wait


[Low Power Preview 7_5 FPS]
//---------------------------------------------------
// Minimum 7.5 FPS (133 ms Int-Time)
//---------------------------------------------------
VAR8=0x02, 0x0C, 8	//AE_MAX_INDEX
VAR8=0x02, 0x14, 34 	//AE_MAX_DGAIN_AE2

VAR8=0x01, 0x03, 0x0005 //Refresh
DELAY=500		//Wait


[Low Power Preview 5 FPS]
//---------------------------------------------------
// Minimum 5 FPS (200 ms Int-Time)
//---------------------------------------------------
VAR8=0x02, 0x0C, 12	//AE_MAX_INDEX
VAR8=0x02, 0x14, 30 	//AE_MAX_DGAIN_AE2

VAR8=0x01, 0x03, 0x0005 //Refresh
DELAY=500		//Wait


[High Power Preview (30FPS)]
//---------------------------------------------------
//  30 FPS Video/Preview Mode (33 ms Int-Time)
// This will draw more power (Like capture mode) 
//---------------------------------------------------
VAR=7, 0x17, 0x2111 	//(1) MODE_SENSOR_ROW_SPEED_A
VAR=7, 0x1B, 0x024F 	//(1) MODE_SENSOR_SAMPLE_TIME_PCK_A
VAR=7, 0x1D, 0x0102 	//(1) MODE_SENSOR_FINE_CORRECTION_A
VAR=7, 0x1F, 0x0279 	//(1) MODE_SENSOR_FINE_IT_MIN_A
VAR=7, 0x21, 0x0155 	//(1) MODE_SENSOR_FINE_IT_MAX_MARGIN_A
VAR=7, 0x25, 0x060F 	//(1) MODE_SENSOR_LINE_LENGTH_PCK_A
VAR=7, 0x27, 0x2020 	//(1) MODE_SENSOR_DAC_ID_4_5_A
VAR=7, 0x29, 0x2020 	//(1) MODE_SENSOR_DAC_ID_6_7_A
VAR=7, 0x2B, 0x1020 	//(1) MODE_SENSOR_DAC_ID_8_9_A
VAR=7, 0x2D, 0x2007 	//(1) MODE_SENSOR_DAC_ID_10_11_A
VAR8=1,0x03, 0x0006 	//(1) SEQ_CMD

[Sequencer_Optimized_HiSat]
//---------------------------------------------------
//  These Sequencer Settings include optimized 
//  Transition values between bright and low light
//  for the following:
//  - Noise Reduction
//  - Saturation
//  - Aperture Correction
//  and also enable the MDR AE algorithm
//---------------------------------------------------
VAR8=0x01, 0x30, 0x0004 	//SEQ_PREVIEW_2_AE (MDR)
VAR8=0x01, 0x3E, 4 		//SEQ_NR_MINTH
VAR8=0x01, 0x3F, 38	 	//SEQ_NR_MAXTH
VAR8=0x01, 0x40, 2	 	//SEQ_NR_GAINTH
VAR8=0x01, 0x41, 52	 	//SEQ_NR_SLOPE
VAR8=0x01, 0x15, 0x000F 	//SEQ_LLMODE
VAR8=0x01, 0x16, 48		//SEQ_LLVIRTGAIN1
VAR8=0x01, 0x17, 85 		//SEQ_LLVIRTGAIN2
VAR8=0x01, 0x18, 75 		//SEQ_LLSAT1
VAR8=0x01, 0x19, 56 		//SEQ_LLSAT2
VAR8=0x01, 0x1A, 0x0008 	//SEQ_LLINTERPTHRESH1
VAR8=0x01, 0x1B, 0x0014 	//SEQ_LLINTERPTHRESH2
VAR8=0x01, 0x1C, 0x0003 	//SEQ_LLAPCORR1
VAR8=0x01, 0x1D, 0x0000 	//SEQ_LLAPCORR2
VAR8=0x01, 0x1E, 0x0008 	//SEQ_LLAPTHRESH1
VAR8=0x01, 0x1F, 0x0040 	//SEQ_LLAPTHRESH2
VAR8=0x01, 0x03, 0x0006 	//SEQ_CMD


[Sequencer_Optimized_LowSat]
//---------------------------------------------------
//  These Sequencer Settings include optimized 
//  Transition values between bright and low light
//  for the following:
//  - Noise Reduction
//  - Saturation
//  - Aperture Correction
//  and also enable the MDR AE algorithm
//---------------------------------------------------
VAR8=0x01, 0x30, 0x0004 	//SEQ_PREVIEW_2_AE (MDR)
VAR8=0x01, 0x3E, 0x0004 	//SEQ_NR_MINTH
VAR8=0x01, 0x3F, 0x0026 	//SEQ_NR_MAXTH
VAR8=0x01, 0x40, 0x0002 	//SEQ_NR_GAINTH
VAR8=0x01, 0x41, 0x003C 	//SEQ_NR_SLOPE
VAR8=0x01, 0x15, 0x000F 	//SEQ_LLMODE
VAR8=0x01, 0x16, 0x001C		//SEQ_LLVIRTGAIN1
VAR8=0x01, 0x17, 0x0054 	//SEQ_LLVIRTGAIN2
VAR8=0x01, 0x18, 0x003C 	//SEQ_LLSAT1
VAR8=0x01, 0x19, 0x0019 	//SEQ_LLSAT2
VAR8=0x01, 0x1A, 0x0008 	//SEQ_LLINTERPTHRESH1
VAR8=0x01, 0x1B, 0x0014 	//SEQ_LLINTERPTHRESH2
VAR8=0x01, 0x1C, 0x0003 	//SEQ_LLAPCORR1
VAR8=0x01, 0x1D, 0x0000 	//SEQ_LLAPCORR2
VAR8=0x01, 0x1E, 0x0008 	//SEQ_LLAPTHRESH1
VAR8=0x01, 0x1F, 0x0040 	//SEQ_LLAPTHRESH2
VAR8=0x01, 0x03, 0x0006 	//SEQ_CMD



[Lens Calibration Setup]
//---------------------------------------------------
// This Setup can be used to calibrate the lens
//---------------------------------------------------
VAR8=1, 0x02, 0x0000 	// SEQ_MODE (turn off AE, AWB)
REG=0x3212, 0x0001 	// FACTORY_BYPASS
DELAY=1000
REG=0x3330, 0x0140 	// OUTPUT_FORMAT_TEST (LC bypass)
DELAY=1000
STATE=Lens Correction Overlay, 1


[Color Setup]
//---------------------------------------------------
// This Setup can be used to calibrate the color
//---------------------------------------------------
VAR8=11, 0x04, 0x0000 	//(1) HG_MAX_DLEVEL
VAR8=3, 0x53, 0x0021 	//(1) AWB_MODE
DELAY=1000
VAR8=1, 0x02, 0x0000 	//(2) SEQ_MODE
DELAY=1000
REG=0x3210, 0x0158 	//(1) COLOR_PIPELINE_CONTROL
REG=0x3028, 0x0008 	//(1) ANALOGUE_GAIN_CODE_GLOBAL

[True Gray Setup]
//---------------------------------------------------
// This Setup can be used to calibrate true grey TH
//---------------------------------------------------
VAR8=11, 0x04, 0x0000 	// HG_MAX_DLEVEL
VAR=3, 0x18, 0x0020 	// AWB_CCM_L_9
VAR=3, 0x1A, 0x0020 	// AWB_CCM_L_10
VAR=3, 0x2E, 0x0000 	// AWB_CCM_RL_9
VAR=3, 0x30, 0x0000 	// AWB_CCM_RL_10
VAR8=3, 0x53, 0x0021 	// AWB_MODE
REG=0x3210, 0x0158 	// COLOR_PIPELINE_CONTROL
