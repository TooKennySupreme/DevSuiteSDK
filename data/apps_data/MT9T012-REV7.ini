; WIP Last Changed Rev: 2213
;**************************************************************************************       
; Copyright 2009 Aptina Imaging Corporation. All rights reserved.                             
;                                                                                             
;                                                                                             
; No permission to use, copy, modify, or distribute this software and/or                      
; its documentation for any purpose has been granted by Aptina Imaging Corporation.           
; If any such permission has been granted ( by separate agreement ), it                       
; is required that the above copyright notice appear in all copies and                        
; that both that copyright notice and this permission notice appear in                        
; supporting documentation, and that the name of Aptina Imaging Corporation or any            
; of its trademarks may not be used in advertising or publicity pertaining                    
; to distribution of the software without specific, written prior permission.                 
;                                                                                             
;                                                                                             
;      This software and any associated documentation are provided "AS IS" and                
;      without warranty of any kind.   APTINA IMAGING CORPORATION EXPRESSLY DISCLAIMS         
;      ALL WARRANTIES EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, NONINFRINGEMENT       
;      OF THIRD PARTY RIGHTS, AND ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS        
;      FOR A PARTICULAR PURPOSE.  APTINA DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED        
;      IN THIS SOFTWARE WILL MEET YOUR REQUIREMENTS, OR THAT THE OPERATION OF THIS SOFTWARE   
;      WILL BE UNINTERRUPTED OR ERROR-FREE.  FURTHERMORE, APTINA DOES NOT WARRANT OR          
;      MAKE ANY REPRESENTATIONS REGARDING THE USE OR THE RESULTS OF THE USE OF ANY            
;      ACCOMPANYING DOCUMENTATION IN TERMS OF ITS CORRECTNESS, ACCURACY, RELIABILITY,         
;      OR OTHERWISE.                                                                          
;*************************************************************************************/       
; Default INI file for the A-3120-REV7 (Chip ID 0x1600, Rev Num 0x01)
;
; $Revision: 28138 $
; $Date: 2011-05-31 15:31:48 -0700 (Tue, 31 May 2011) $ 
;
; This file holds groups of register presets (sections) specific for this sensor. The 
; presets allow you to overwrite the power-on default settings with optimized register 
; settings. 
; The [Demo Initialization] section contains all optimized register settings for running
; the sensor in the demo environment. Other sections include settings optimized for a
; variety of situations like: Running at different master clock speeds, running under
; different lighting situations, running with different lenses, etc.
; Most of the demonstration software (DevWare, SensorDemo, ...) make use of this file
; to load and store the user presets.
;
; Keyname description:
; REG      = assign a new register value
; BITFIELD = do a READ-MODIFY-WRITE to part of a register. The part is defined as a mask.
; FIELD_WR = Write any register, variable or bitfield, specified by its symbol name
; LOAD     = load an alternate section from this section
; STATE    = set non-register state
; DELAY    = delay a certain amount of milliseconds before continuing 
; POLL_REG = Read a register a specified number of times, or until the register
;            value no longer meets a specified condition. You specify the
;            register by its address, and it only works with simple registers.
;            You also specify a delay between each iteration of the loop.
; POLL_FIELD = Like POLL_REG except you specify the register by its symbol name
;            as defined in the sensor data file. POLL_FIELD works with any kind
;            of register or variable.
;
; Keyname format:
; REG      = [<page>,] <address>, <value>             //<comment>
; BITFIELD = [<page>,] <address>, <mask>, <value>
;            Some examples: 
;            BITFIELD=2, 0x05, 0x0020, 1 //for register 5 on page 2, set the 6th bit to 1
;            BITFIELD=0x06, 0x000F, 0    //for register 6, clear the first 4 bits
; FIELD_WR = <registername>, [<bitfieldname>,] <value>
; LOAD     = <section>
; STATE    = <state>, <value>
; DELAY    = <milliseconds>
; POLL_REG = [<page>,]<address>,<mask>,<condition>,DELAY=<milliseconds>,TIMEOUT=<count> //<comment>
;            Example:  Poll every 50ms, stop when value <= 8 or after 5 times (250ms).
;            POLL_REG= 2, 0x3F, 0xFFFF, >8, DELAY=50, TIMEOUT=5
; POLL_FIELD = <registername>, [<bitfieldname>,] <condition>, DELAY=<milliseconds>, TIMEOUT=<count> //<comment>
;            Example:  Poll every 10 ms, stop when the value = 0, or after 500ms.
;            POLL_FIELD= SEQ_CMD, !=0, DELAY=10, TIMEOUT=50
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developer's guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <registername> Name of a register or variable as defined the sensor data (.sdat) file
; <bitfieldname> Optional name of a bitfield
; <condition>    <  <=  ==  !=  >  or  >=  followed by a numerical value
; <count>        Number of iterations of the polling loop
; <section>      the name of another section to load
; <state>        non-register program state names [do not modify]
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .ini file
;
;*************************************************************************************/

[Reset]
REG=0x103, 1         //SOFTWARE_RESET (clears itself)
REG=0x301A, 0x18cc//  parallel port output
DELAY=300

[Demo Initialization]
REG=0x301A, 0x18cc//  parallel port output
REG=0x0104, 1	// GROUPED_PARAMETER_HOLD
REG=0x202, 0x01B8      // COARSE_INTEGRATION_TIME
REG=0x206, 0x0008      // ANALOGUE_GAIN_CODE_GREENR
REG=0x208, 0x0008      // ANALOGUE_GAIN_CODE_RED
REG=0x20A, 0x0008      // ANALOGUE_GAIN_CODE_BLUE
REG=0x20C, 0x0008      // ANALOGUE_GAIN_CODE_GREENB
REG=0x20E, 0x0100      // DIGITAL_GAIN_GREENR
REG=0x210, 0x0100      // DIGITAL_GAIN_RED
REG=0x212, 0x0100      // DIGITAL_GAIN_BLUE
REG=0x214, 0x0100      // DIGITAL_GAIN_GREENB
REG=0x0104, 0	// GROUPED_PARAMETER_HOLD

LOAD= DevWare-specific

// Resync FPS reporting
DELAY= 20
STATE= Detect Master Clock, 1

[Demo Initialization - CCP]
REG=0x301A, 0x004c//  CCP output
REG=0x0104, 1	// GROUPED_PARAMETER_HOLD
REG=0x202, 0x01B8      // COARSE_INTEGRATION_TIME
REG=0x206, 0x0008      // ANALOGUE_GAIN_CODE_GREENR
REG=0x208, 0x0008      // ANALOGUE_GAIN_CODE_RED
REG=0x20A, 0x0008      // ANALOGUE_GAIN_CODE_BLUE
REG=0x20C, 0x0008      // ANALOGUE_GAIN_CODE_GREENB
REG=0x20E, 0x0100      // DIGITAL_GAIN_GREENR
REG=0x210, 0x0100      // DIGITAL_GAIN_RED
REG=0x212, 0x0100      // DIGITAL_GAIN_BLUE
REG=0x214, 0x0100      // DIGITAL_GAIN_GREENB
REG=0x0104, 0	// GROUPED_PARAMETER_HOLD

LOAD= DevWare-specific

[DevWare-specific]
STATE=Gamma Correction,                 45
STATE=Black Correct,                    5
STATE=Contrast,                         25
//STATE=Filter,                           2   //Set demosaic to fast-linear


[Color Processing ON]
REG=0x206, 0x0010      // ANALOGUE_GAIN_CODE_GREENR
REG=0x208, 0x0010      // ANALOGUE_GAIN_CODE_RED
REG=0x20A, 0x0010      // ANALOGUE_GAIN_CODE_BLUE
REG=0x20C, 0x0010      // ANALOGUE_GAIN_CODE_GREENB
REG=0x20E, 0x0100      // DIGITAL_GAIN_GREENR
REG=0x210, 0x0100      // DIGITAL_GAIN_RED
REG=0x212, 0x0100      // DIGITAL_GAIN_BLUE
REG=0x214, 0x0100      // DIGITAL_GAIN_GREENB
STATE=Auto Exposure,                    1
STATE=True Black Enable,                1
STATE=Defect Enable,                    1
STATE=Aperture Enable,                  1
STATE=Color Correction,                 1
STATE=White Balance,                    1

[Color Processing OFF]
STATE=Auto Exposure,                    0
STATE=True Black Enable,                0
STATE=Defect Enable,                    0
STATE=Defect Auto Defect Correction,    0
STATE=Aperture Enable,                  0
STATE=Color Correction,                 0
STATE=White Balance,                    0

[Viewfinder ON]
//REG=0x100, 0x0000 	// MODE_SELECT
//DELAY=300
//BITFIELD=0x306E,7, 2 	// DATAPATH_SELECT
REG=0x104, 0x0001 	// GROUPED_PARAMETER_HOLD
REG=0x344, 0x0004 	// X_ADDR_START
REG=0x346, 0x0004 	// Y_ADDR_START
REG=0x348, 0x0801 	// X_ADDR_END
REG=0x34A, 0x0601 	// Y_ADDR_END
REG=0x382, 0x0003 	// X_ODD_INC
REG=0x386, 0x0003 	// Y_ODD_INC
REG=0x34C, 0x0280 	// X_OUTPUT_SIZE
REG=0x34E, 0x01E0 	// Y_OUTPUT_SIZE
REG=0x400, 0x0002 	// SCALING_MODE
REG=0x404, 0x0019 	// SCALE_M
REG=0x104, 0x0000 	// GROUPED_PARAMETER_HOLD
REG=0x100, 0x0001 	// MODE_SELECT

[Viewfinder OFF]
//REG=0x100, 0x0000 	// MODE_SELECT
//DELAY=300
//BITFIELD=0x306E,7, 2 	// DATAPATH_SELECT
REG=0x104, 0x0001 	// GROUPED_PARAMETER_HOLD
REG=0x3040, 0x0024 	// READ_MODE
REG=0x344, 0x0004 	// X_ADDR_START
REG=0x346, 0x0004 	// Y_ADDR_START
REG=0x348, 0x0803 	// X_ADDR_END
REG=0x34A, 0x0603 	// Y_ADDR_END
REG=0x34C, 0x0800 	// X_OUTPUT_SIZE
REG=0x34E, 0x0600 	// Y_OUTPUT_SIZE
REG=0x400, 0x0000 	// SCALING_MODE
REG=0x404, 0x0010 	// SCALE_M
REG=0x104, 0x0000 	// GROUPED_PARAMETER_HOLD
REG=0x100, 0x0001 	// MODE_SELECT

[Scaling by 1/3 (684x512)]
REG=0x100, 0x0000 	// MODE_SELECT
DELAY=300
BITFIELD=0x301A, 0x0800, 0 // to enable the SMIA clock.
BITFIELD=0x3064, 0x0100, 0
BITFIELD=0x306E,7, 2 	// DATAPATH_SELECT
REG=0x104, 0x0001 	// GROUPED_PARAMETER_HOLD
REG=0x344, 0x0004 	// X_ADDR_START
REG=0x346, 0x0004 	// Y_ADDR_START
REG=0X348, 0x0801 	// X_ADDR_END
REG=0X34A, 0X0601 	// Y_ADDR_END
REG=0x34C, 0x02AC 	// X_OUTPUT_SIZE
REG=0x34E, 0x0200 	// Y_OUTPUT_SIZE
REG=0x382, 0x0001 	// X_ODD_INC
REG=0x386, 0x0001 	// Y_ODD_INC
REG=0x400, 0x0002 	// SCALING_MODE
REG=0x404, 0x0030 	// SCALE_M
REG=0x104, 0x0000 	// GROUPED_PARAMETER_HOLD
REG=0x100, 0x0001 	// MODE_SELECT

[1024x768 by 2x2 binning 37.9fps @64MHz]
REG=0x0103, 0x01			// SOFTWARE_RESET
DELAY=300
REG=0x301A, 0x18c4       		// ENABLE PARALLEL OUTPUT
REG=0x0100, 0x0000 			// MODE_SELECT (Stop Streaming)
DELAY=300
REG=0x0104, 0x0001 			//GROUPED_PARAMETER_HOLD

// Binning timing parameters
REG=0x1148, 0x0468			// MIN_LINE_BLANKING_PCK (1128)
REG=0x1144, 0x05FD			// MIN_LINE_LENGTH_PCK (1533)
REG=0x1008, 0x03E5			// FINE_INTEGRATION_TIME_MIN (997)
REG=0x100A, 0x0215			// FINE_INTEGRATION_TIME_MAX_MARGIN (533)
REG=0x300E, 0x03CD			// RESERVED_MFR_300E
REG=0x3010, 0x0215			// RESERVED_MFR_3010
REG=0x3014, 0x03E5			// FINE_INTEGRATION_TIME_ (997)
REG=0x3044, 0x0541			// DARK_CONTROL

// Configure new size
REG=0x0344, 4				//X_Start_Addr
REG=0x0346, 4				//Y_Start_Addr
REG=0x0348, 2049			//X_Stop_Addr
REG=0x034A, 1537			//Y_Stop_Addr
REG=0x382, 0x0003 			//X_ODD_INC
REG=0x386, 0x0003 			//Y_ODD_INC
BITFIELD=0x3040, 0x0400, 1		//Enable binning
REG=0x34C, 1024  			//X_OUTPUT_SIZE
REG=0x34E, 768  			//Y_OUTPUT_SIZE

// Set frame timing
REG=0x0202, 783				//COARSE_INTEGRATION_TIME 
REG=0x0340, 784				//FRAME_LENGTH_LINES

REG=0x0342, 2152			//LINE_LENGTH_PCK(2048/2 + 1128 = 2152)

//Increasing the gains
REG=0x0206, 0x0020			// ANALOGUE_GAIN_CODE_GREENR (4x)
REG=0x0208, 0x0030			// ANALOGUE_GAIN_CODE_RED (6x)
REG=0x020A, 0x0030			// ANALOGUE_GAIN_CODE_BLUE (6x)
REG=0x020C, 0x0020			// ANALOGUE_GAIN_CODE_GREENB (4x)

REG=0x104, 0x0000 			// GROUPED_PARAMETER_HOLD
REG=0x100, 0x0001 			// MODE_SELECT (Start Streaming)





[D65 Daylight White Balance]
STATE=White Balance,3
REG=0x0206, 0x0008 // ANALOGUE_GAIN_CODE_GREENR
REG=0x0208, 0x000F // ANALOGUE_GAIN_CODE_RED
REG=0x020A, 0x000A // ANALOGUE_GAIN_CODE_BLUE
REG=0x020C, 0x0008 // ANALOGUE_GAIN_CODE_GREENB
STATE=WB Custom, 3.19 -1.76 -0.07 -0.45 2.30 -0.68 -0.12 -0.94 2.28
STATE=Relative Red Gain, 1875
STATE=Relative Blue Gain, 1250

[A28 Incandescent White Balance]
STATE=White Balance,3
REG=0x0206, 0x0008 // ANALOGUE_GAIN_CODE_GREENR
REG=0x0208, 0x0009 // ANALOGUE_GAIN_CODE_RED
REG=0x020A, 0x0010 // ANALOGUE_GAIN_CODE_BLUE
REG=0x020C, 0x0008 // ANALOGUE_GAIN_CODE_GREENB
STATE=WB Custom, 3.30 -1.72 -.35 -.67 2.87 -.74 -.63 -1.93 3.73
STATE=Relative Red Gain, 1125
STATE=Relative Blue Gain, 2000

[Lens Shading Correction - 85 percent]
REG=0x3602, 0x1E2E // ZONE_BOUNDS_X1_X2
REG=0x3602, 0x1E2E // ZONE_BOUNDS_X1_X2
REG=0x3604, 0x4E10 // ZONE_BOUNDS_X0_X3
REG=0x3604, 0x4E10 // ZONE_BOUNDS_X0_X3
REG=0x3606, 0x705E // ZONE_BOUNDS_X4_X5
REG=0x3606, 0x705E // ZONE_BOUNDS_X4_X5
REG=0x3608, 0x1824 // ZONE_BOUNDS_Y1_Y2
REG=0x3608, 0x1824 // ZONE_BOUNDS_Y1_Y2
REG=0x360A, 0x3C0C // ZONE_BOUNDS_Y0_Y3
REG=0x360A, 0x3C0C // ZONE_BOUNDS_Y0_Y3
REG=0x360C, 0x5448 // ZONE_BOUNDS_Y4_Y5
REG=0x360C, 0x5448 // ZONE_BOUNDS_Y4_Y5
REG=0x360E, 0x303E // CENTER_OFFSET
REG=0x360E, 0x303E // CENTER_OFFSET
REG=0x3600, 0xA969 // LENS_CORRECTION_CONTROL
REG=0x3600, 0xA969 // LENS_CORRECTION_CONTROL
REG=0x3600, 0xA969 // LENS_CORRECTION_CONTROL
REG=0x3600, 0xA969 // LENS_CORRECTION_CONTROL
REG=0x3600, 0xA969 // LENS_CORRECTION_CONTROL
REG=0x3600, 0xA969 // LENS_CORRECTION_CONTROL
REG=0x3610, 0x00E0 // FX_RED
REG=0x3612, 0x013E // FX_GREEN
REG=0x3616, 0x00D7 // FX_BLUE
REG=0x3618, 0x00C5 // FY_RED
REG=0x361A, 0x00B0 // FY_GREEN
REG=0x361E, 0x008C // FY_BLUE
REG=0x3620, 0x0C99 // DF_DX_RED
REG=0x3622, 0x0C84 // DF_DX_GREEN
REG=0x3626, 0x0D62 // DF_DX_BLUE
REG=0x3628, 0x0CED // DF_DY_RED
REG=0x362A, 0x0CEC // DF_DY_GREEN
REG=0x362E, 0x0D71 // DF_DY_BLUE
REG=0x3632, 0x041F // SECOND_DERIV_ZONE_0_RED
REG=0x3632, 0x041F // SECOND_DERIV_ZONE_0_RED
REG=0x3634, 0x0F02 // SECOND_DERIV_ZONE_0_GREEN
REG=0x3634, 0x0F02 // SECOND_DERIV_ZONE_0_GREEN
REG=0x3638, 0x1908 // SECOND_DERIV_ZONE_0_BLUE
REG=0x3638, 0x1908 // SECOND_DERIV_ZONE_0_BLUE
REG=0x363A, 0x2305 // SECOND_DERIV_ZONE_1_RED
REG=0x363A, 0x2305 // SECOND_DERIV_ZONE_1_RED
REG=0x363C, 0x1F0C // SECOND_DERIV_ZONE_1_GREEN
REG=0x363C, 0x1F0C // SECOND_DERIV_ZONE_1_GREEN
REG=0x3640, 0x1007 // SECOND_DERIV_ZONE_1_BLUE
REG=0x3640, 0x1007 // SECOND_DERIV_ZONE_1_BLUE
REG=0x3642, 0x252A // SECOND_DERIV_ZONE_2_RED
REG=0x3642, 0x252A // SECOND_DERIV_ZONE_2_RED
REG=0x3644, 0x2A28 // SECOND_DERIV_ZONE_2_GREEN
REG=0x3644, 0x2A28 // SECOND_DERIV_ZONE_2_GREEN
REG=0x3648, 0x1C23 // SECOND_DERIV_ZONE_2_BLUE
REG=0x3648, 0x1C23 // SECOND_DERIV_ZONE_2_BLUE
REG=0x364A, 0x2B2E // SECOND_DERIV_ZONE_3_RED
REG=0x364A, 0x2B2E // SECOND_DERIV_ZONE_3_RED
REG=0x364C, 0x2C30 // SECOND_DERIV_ZONE_3_GREEN
REG=0x364C, 0x2C30 // SECOND_DERIV_ZONE_3_GREEN
REG=0x3650, 0x2721 // SECOND_DERIV_ZONE_3_BLUE
REG=0x3650, 0x2721 // SECOND_DERIV_ZONE_3_BLUE
REG=0x3652, 0x2929 // SECOND_DERIV_ZONE_4_RED
REG=0x3652, 0x2929 // SECOND_DERIV_ZONE_4_RED
REG=0x3654, 0x252C // SECOND_DERIV_ZONE_4_GREEN
REG=0x3654, 0x252C // SECOND_DERIV_ZONE_4_GREEN
REG=0x3658, 0x1622 // SECOND_DERIV_ZONE_4_BLUE
REG=0x3658, 0x1622 // SECOND_DERIV_ZONE_4_BLUE
REG=0x365A, 0x3A40 // SECOND_DERIV_ZONE_5_RED
REG=0x365A, 0x3A40 // SECOND_DERIV_ZONE_5_RED
REG=0x365C, 0x3134 // SECOND_DERIV_ZONE_5_GREEN
REG=0x365C, 0x3134 // SECOND_DERIV_ZONE_5_GREEN
REG=0x3660, 0x2926 // SECOND_DERIV_ZONE_5_BLUE
REG=0x3660, 0x2926 // SECOND_DERIV_ZONE_5_BLUE
REG=0x3662, 0x290C // SECOND_DERIV_ZONE_6_RED
REG=0x3662, 0x290C // SECOND_DERIV_ZONE_6_RED
REG=0x3664, 0x1D07 // SECOND_DERIV_ZONE_6_GREEN
REG=0x3664, 0x1D07 // SECOND_DERIV_ZONE_6_GREEN
REG=0x3668, 0x1809 // SECOND_DERIV_ZONE_6_BLUE
REG=0x3668, 0x1809 // SECOND_DERIV_ZONE_6_BLUE
REG=0x366A, 0xE7DA // SECOND_DERIV_ZONE_7_RED
REG=0x366A, 0xE7DA // SECOND_DERIV_ZONE_7_RED
REG=0x366C, 0x1911 // SECOND_DERIV_ZONE_7_GREEN
REG=0x366C, 0x1911 // SECOND_DERIV_ZONE_7_GREEN
REG=0x3670, 0x3620 // SECOND_DERIV_ZONE_7_BLUE
REG=0x3670, 0x3620 // SECOND_DERIV_ZONE_7_BLUE
REG=0x3672, 0x0000 // X2_FACTORS
REG=0x3672, 0x0000 // X2_FACTORS
REG=0x3674, 0x0020 // GLOBAL_OFFSET_FXY_FUNCTION
REG=0x3614, 0x00EC // FX_GREEN2
REG=0x361C, 0x00A6 // FY_GREEN2
REG=0x3624, 0x0CF9 // DF_DX_GREEN2
REG=0x362C, 0x0CAB // DF_DY_GREEN2
REG=0x3636, 0x250E // SECOND_DERIV_ZONE_0_GREEN2
REG=0x3636, 0x250E // SECOND_DERIV_ZONE_0_GREEN2
REG=0x363E, 0x1806 // SECOND_DERIV_ZONE_1_GREEN2
REG=0x363E, 0x1806 // SECOND_DERIV_ZONE_1_GREEN2
REG=0x3646, 0x2A28 // SECOND_DERIV_ZONE_2_GREEN2
REG=0x3646, 0x2A28 // SECOND_DERIV_ZONE_2_GREEN2
REG=0x364E, 0x3229 // SECOND_DERIV_ZONE_3_GREEN2
REG=0x364E, 0x3229 // SECOND_DERIV_ZONE_3_GREEN2
REG=0x3656, 0x2532 // SECOND_DERIV_ZONE_4_GREEN2
REG=0x3656, 0x2532 // SECOND_DERIV_ZONE_4_GREEN2
REG=0x365E, 0x3434 // SECOND_DERIV_ZONE_5_GREEN2
REG=0x365E, 0x3434 // SECOND_DERIV_ZONE_5_GREEN2
REG=0x3666, 0x1E07 // SECOND_DERIV_ZONE_6_GREEN2
REG=0x3666, 0x1E07 // SECOND_DERIV_ZONE_6_GREEN2
REG=0x366E, 0x1C19 // SECOND_DERIV_ZONE_7_GREEN2
REG=0x366E, 0x1C19 // SECOND_DERIV_ZONE_7_GREEN2
REG=0x3686, 0x0578 // K_FACTOR_IN_K_FX_FY_R_TL
REG=0x368E, 0x0448 // K_FACTOR_IN_K_FX_FY_R_TR
REG=0x3676, 0x0510 // K_FACTOR_IN_K_FX_FY_R_BL
REG=0x367E, 0x04E8 // K_FACTOR_IN_K_FX_FY_R_BR
REG=0x3688, 0x0470 // K_FACTOR_IN_K_FX_FY_G1_TL
REG=0x3690, 0x0540 // K_FACTOR_IN_K_FX_FY_G1_TR
REG=0x3678, 0x0540 // K_FACTOR_IN_K_FX_FY_G1_BL
REG=0x3680, 0x0458 // K_FACTOR_IN_K_FX_FY_G1_BR
REG=0x368C, 0x0618 // K_FACTOR_IN_K_FX_FY_B_TL
REG=0x3694, 0x0468 // K_FACTOR_IN_K_FX_FY_B_TR
REG=0x367C, 0x0448 // K_FACTOR_IN_K_FX_FY_B_BL
REG=0x3684, 0x0590 // K_FACTOR_IN_K_FX_FY_B_BR
REG=0x368A, 0x04B8 // K_FACTOR_IN_K_FX_FY_G2_TL
REG=0x3692, 0x0528 // K_FACTOR_IN_K_FX_FY_G2_TR
REG=0x367A, 0x0560 // K_FACTOR_IN_K_FX_FY_G2_BL
REG=0x3682, 0x0008 // K_FACTOR_IN_K_FX_FY_G2_BR
REG=0x3600, 0xA969 // LENS_CORRECTION_CONTROL
REG=0x3600, 0xA969 // LENS_CORRECTION_CONTROL
REG=0x3696, 0x0018 // CORNER_FACTOR_CONTROL
REG=0x3696, 0x0018 // CORNER_FACTOR_CONTROL
REG=0x3600, 0xA969 // LENS_CORRECTION_CONTROL
REG=0x318A, 0x8000 // LENS_CORRECTION

[Lens Correction for Small Lens]
REG=0x3600, 0x2968 //LENS_CORRECTION_CONTROL
REG=0x3602, 0x1C2A //ZONE_BOUNDS_X1_X2
REG=0x3604, 0x4A0E //ZONE_BOUNDS_X0_X3
REG=0x3606, 0x6E5C //ZONE_BOUNDS_X4_X5
REG=0x3608, 0x1622 //ZONE_BOUNDS_Y1_Y2
REG=0x360A, 0x3A0C //ZONE_BOUNDS_Y0_Y3
REG=0x360C, 0x5446 //ZONE_BOUNDS_Y4_Y5
REG=0x360E, 0x2C3A //CENTER_OFFSET
REG=0x3610, 0x0102 //FX_RED
REG=0x3618, 0x00A0 //FY_RED
REG=0x3620, 0x0B98 //DF_DX_RED
REG=0x3628, 0x0DAE //DF_DY_RED
REG=0x3632, 0xEB29 //SECOND_DERIV_ZONE_0_RED
REG=0x363A, 0x4913 //SECOND_DERIV_ZONE_1_RED
REG=0x3642, 0xF041 //SECOND_DERIV_ZONE_2_RED
REG=0x364A, 0x5D29 //SECOND_DERIV_ZONE_3_RED
REG=0x3652, 0x2725 //SECOND_DERIV_ZONE_4_RED
REG=0x365A, 0x3A3D //SECOND_DERIV_ZONE_5_RED
REG=0x3662, 0x0D5C //SECOND_DERIV_ZONE_6_RED
REG=0x366A, 0x30BD //SECOND_DERIV_ZONE_7_RED
REG=0x3686, 0x04E8 //K_FACTOR_IN_K_FX_FY_R_TL
REG=0x368E, 0x0030 //K_FACTOR_IN_K_FX_FY_R_TR
REG=0x3676, 0x0448 //K_FACTOR_IN_K_FX_FY_R_BL
REG=0x367E, 0x04A8 //K_FACTOR_IN_K_FX_FY_R_BR
REG=0x3612, 0x015D //FX_GREEN
REG=0x361A, 0x00B8 //FY_GREEN
REG=0x3622, 0x0B13 //DF_DX_GREEN
REG=0x362A, 0x0CD1 //DF_DY_GREEN
REG=0x3634, 0x0220 //SECOND_DERIV_ZONE_0_GREEN
REG=0x363C, 0x5111 //SECOND_DERIV_ZONE_1_GREEN
REG=0x3644, 0xEF42 //SECOND_DERIV_ZONE_2_GREEN
REG=0x364C, 0x6E29 //SECOND_DERIV_ZONE_3_GREEN
REG=0x3654, 0x242A //SECOND_DERIV_ZONE_4_GREEN
REG=0x365C, 0x3D42 //SECOND_DERIV_ZONE_5_GREEN
REG=0x3664, 0x0A23 //SECOND_DERIV_ZONE_6_GREEN
REG=0x366C, 0x3333 //SECOND_DERIV_ZONE_7_GREEN
REG=0x3688, 0x0430 //K_FACTOR_IN_K_FX_FY_G1_TL
REG=0x3690, 0x0430 //K_FACTOR_IN_K_FX_FY_G1_TR
REG=0x3678, 0x0470 //K_FACTOR_IN_K_FX_FY_G1_BL
REG=0x3680, 0x0428 //K_FACTOR_IN_K_FX_FY_G1_BR
REG=0x3616, 0x00F4 //FX_BLUE
REG=0x361E, 0x0079 //FY_BLUE
REG=0x3626, 0x0B6B //DF_DX_BLUE
REG=0x362E, 0x0D8D //DF_DY_BLUE
REG=0x3638, 0x163D //SECOND_DERIV_ZONE_0_BLUE
REG=0x3640, 0x3A12 //SECOND_DERIV_ZONE_1_BLUE
REG=0x3648, 0xE436 //SECOND_DERIV_ZONE_2_BLUE
REG=0x3650, 0x581C //SECOND_DERIV_ZONE_3_BLUE
REG=0x3658, 0x191E //SECOND_DERIV_ZONE_4_BLUE
REG=0x3660, 0x2C2D //SECOND_DERIV_ZONE_5_BLUE
REG=0x3668, 0x051D //SECOND_DERIV_ZONE_6_BLUE
REG=0x3670, 0x3C36 //SECOND_DERIV_ZONE_7_BLUE
REG=0x368C, 0x0548 //K_FACTOR_IN_K_FX_FY_B_TL
REG=0x3694, 0x0148 //K_FACTOR_IN_K_FX_FY_B_TR
REG=0x367C, 0x0050 //K_FACTOR_IN_K_FX_FY_B_BL
REG=0x3684, 0x0468 //K_FACTOR_IN_K_FX_FY_B_BR
REG=0x3614, 0x011C //FX_GREEN2
REG=0x361C, 0x009A //FY_GREEN2
REG=0x3624, 0x0B42 //DF_DX_GREEN2
REG=0x362C, 0x0D2D //DF_DY_GREEN2
REG=0x3636, 0x042E //SECOND_DERIV_ZONE_0_GREEN2
REG=0x363E, 0x4E10 //SECOND_DERIV_ZONE_1_GREEN2
REG=0x3646, 0xEE45 //SECOND_DERIV_ZONE_2_GREEN2
REG=0x364E, 0x6D29 //SECOND_DERIV_ZONE_3_GREEN2
REG=0x3656, 0x252F //SECOND_DERIV_ZONE_4_GREEN2
REG=0x365E, 0x4144 //SECOND_DERIV_ZONE_5_GREEN2
REG=0x3666, 0x0641 //SECOND_DERIV_ZONE_6_GREEN2
REG=0x366E, 0x41FC //SECOND_DERIV_ZONE_7_GREEN2
REG=0x368A, 0x0430 //K_FACTOR_IN_K_FX_FY_G2_TL
REG=0x3692, 0x0468 //K_FACTOR_IN_K_FX_FY_G2_TR
REG=0x367A, 0x0488 //K_FACTOR_IN_K_FX_FY_G2_BL
REG=0x3682, 0x0010 //K_FACTOR_IN_K_FX_FY_G2_BR
REG=0x3672, 0x8000 //X2_FACTORS
REG=0x3674, 0x0020 //GLOBAL_OFFSET_FXY_FUNCTION
REG=0x3696, 0x0018 //CORNER_FACTOR_CONTROL
STATE=Lens Correction Falloff, 100
STATE=Lens Correction Center X, 1024
STATE=Lens Correction Center Y, 768
BITFIELD=0x318A, 0x8000, 1 //ENABLE LENS CORRECTION

[Lens Calibration Setup]
REG=0x0202, 0x0400	//(2) COARSE_INTEGRATION_TIME
REG=0x0206, 0x0015	//(6) ANALOGUE_GAIN_CODE_GREENR
REG=0x0208, 0x0017	//(2) ANALOGUE_GAIN_CODE_RED
REG=0x020A, 0x0028	//(2) ANALOGUE_GAIN_CODE_BLUE
REG=0x020C, 0x0015	//(6) ANALOGUE_GAIN_CODE_GREENB
REG=0x0340, 0x061A	//(2) FRAME_LENGTH_LINES
REG=0x3600, 0x2921	//(7) LENS_CORRECTION_CONTROL
REG=0x3602, 0x2030	//(1) ZONE_BOUNDS_X1_X2
REG=0x3604, 0x5010	//(1) ZONE_BOUNDS_X0_X3
REG=0x3606, 0x7060	//(1) ZONE_BOUNDS_X4_X5
REG=0x3608, 0x1824	//(1) ZONE_BOUNDS_Y1_Y2
REG=0x360A, 0x3C0C	//(1) ZONE_BOUNDS_Y0_Y3
REG=0x360C, 0x5448	//(1) ZONE_BOUNDS_Y4_Y5
REG=0x360E, 0x3040	//(1) CENTER_OFFSET
REG=0x3610, 0x0000	//(1) FX_RED
REG=0x3612, 0x0000	//(1) FX_GREEN
REG=0x3614, 0x0000	//(1) FX_GREEN2
REG=0x3616, 0x0000	//(1) FX_BLUE
REG=0x3618, 0x0000	//(1) FY_RED
REG=0x361A, 0x0000	//(1) FY_GREEN
REG=0x361C, 0x0000	//(1) FY_GREEN2
REG=0x361E, 0x0000	//(1) FY_BLUE
REG=0x3620, 0x0000	//(1) DF_DX_RED
REG=0x3622, 0x0000	//(1) DF_DX_GREEN
REG=0x3624, 0x0000	//(1) DF_DX_GREEN2
REG=0x3626, 0x0000	//(1) DF_DX_BLUE
REG=0x3628, 0x0000	//(1) DF_DY_RED
REG=0x362A, 0x0000	//(1) DF_DY_GREEN
REG=0x362C, 0x0000	//(1) DF_DY_GREEN2
REG=0x362E, 0x0000	//(1) DF_DY_BLUE
REG=0x3632, 0x0000	//(2) SECOND_DERIV_ZONE_0_RED
REG=0x3634, 0x0000	//(2) SECOND_DERIV_ZONE_0_GREEN
REG=0x3636, 0x0000	//(2) SECOND_DERIV_ZONE_0_GREEN2
REG=0x3638, 0x0000	//(2) SECOND_DERIV_ZONE_0_BLUE
REG=0x363A, 0x0000	//(2) SECOND_DERIV_ZONE_1_RED
REG=0x363C, 0x0000	//(2) SECOND_DERIV_ZONE_1_GREEN
REG=0x363E, 0x0000	//(2) SECOND_DERIV_ZONE_1_GREEN2
REG=0x3640, 0x0000	//(2) SECOND_DERIV_ZONE_1_BLUE
REG=0x3642, 0x0000	//(2) SECOND_DERIV_ZONE_2_RED
REG=0x3644, 0x0000	//(2) SECOND_DERIV_ZONE_2_GREEN
REG=0x3646, 0x0000	//(2) SECOND_DERIV_ZONE_2_GREEN2
REG=0x3648, 0x0000	//(2) SECOND_DERIV_ZONE_2_BLUE
REG=0x364A, 0x0000	//(2) SECOND_DERIV_ZONE_3_RED
REG=0x364C, 0x0000	//(2) SECOND_DERIV_ZONE_3_GREEN
REG=0x364E, 0x0000	//(1) SECOND_DERIV_ZONE_3_GREEN2
REG=0x3650, 0x0000	//(2) SECOND_DERIV_ZONE_3_BLUE
REG=0x3652, 0x0000	//(2) SECOND_DERIV_ZONE_4_RED
REG=0x3654, 0x0000	//(2) SECOND_DERIV_ZONE_4_GREEN
REG=0x3656, 0x0000	//(2) SECOND_DERIV_ZONE_4_GREEN2
REG=0x3658, 0x0000	//(2) SECOND_DERIV_ZONE_4_BLUE
REG=0x365A, 0x0000	//(2) SECOND_DERIV_ZONE_5_RED
REG=0x365C, 0x0000	//(2) SECOND_DERIV_ZONE_5_GREEN
REG=0x365E, 0x0000	//(2) SECOND_DERIV_ZONE_5_GREEN2
REG=0x3660, 0x0000	//(2) SECOND_DERIV_ZONE_5_BLUE
REG=0x3662, 0x0000	//(2) SECOND_DERIV_ZONE_6_RED
REG=0x3664, 0x0000	//(2) SECOND_DERIV_ZONE_6_GREEN
REG=0x3666, 0x0000	//(2) SECOND_DERIV_ZONE_6_GREEN2
REG=0x3668, 0x0000	//(2) SECOND_DERIV_ZONE_6_BLUE
REG=0x366A, 0x0000	//(1) SECOND_DERIV_ZONE_7_RED
REG=0x366C, 0x0000	//(2) SECOND_DERIV_ZONE_7_GREEN
REG=0x366E, 0x0000	//(2) SECOND_DERIV_ZONE_7_GREEN2
REG=0x3670, 0x0000	//(2) SECOND_DERIV_ZONE_7_BLUE
REG=0x3674, 0x0020	//(1) GLOBAL_OFFSET_FXY_FUNCTION
REG=0x3676, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_R_BL
REG=0x3678, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_G1_BL
REG=0x367A, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_G2_BL
REG=0x367C, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_B_BL
REG=0x367E, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_R_BR
REG=0x3680, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_G1_BR
REG=0x3682, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_G2_BR
REG=0x3684, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_B_BR
REG=0x3686, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_R_TL
REG=0x3688, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_G1_TL
REG=0x368A, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_G2_TL
REG=0x368C, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_B_TL
REG=0x368E, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_R_TR
REG=0x3690, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_G1_TR
REG=0x3692, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_G2_TR
REG=0x3694, 0x0000	//(1) K_FACTOR_IN_K_FX_FY_B_TR
REG=0x3696, 0x0018	//(4) CORNER_FACTOR_CONTROL
LOAD=Color Processing OFF

