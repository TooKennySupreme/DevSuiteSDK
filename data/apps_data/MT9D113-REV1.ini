;**************************************************************************************       
; Copyright 2009 Aptina Imaging Corporation. All rights reserved.                             
;                                                                                             
;                                                                                             
; No permission to use, copy, modify, or distribute this software and/or                      
; its documentation for any purpose has been granted by Aptina Imaging Corporation.           
; If any such permission has been granted ( by separate agreement ), it                       
; is required that the above copyright notice appear in all copies and                        
; that both that copyright notice and this permission notice appear in                        
; supporting documentation, and that the name of Aptina Imaging Corporation or any            
; of its trademarks may not be used in advertising or publicity pertaining                    
; to distribution of the software without specific, written prior permission.                 
;                                                                                             
;                                                                                             
;      This software and any associated documentation are provided "AS IS" and                
;      without warranty of any kind.   APTINA IMAGING CORPORATION EXPRESSLY DISCLAIMS         
;      ALL WARRANTIES EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, NONINFRINGEMENT       
;      OF THIRD PARTY RIGHTS, AND ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS        
;      FOR A PARTICULAR PURPOSE.  APTINA DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED        
;      IN THIS SOFTWARE WILL MEET YOUR REQUIREMENTS, OR THAT THE OPERATION OF THIS SOFTWARE   
;      WILL BE UNINTERRUPTED OR ERROR-FREE.  FURTHERMORE, APTINA DOES NOT WARRANT OR          
;      MAKE ANY REPRESENTATIONS REGARDING THE USE OR THE RESULTS OF THE USE OF ANY            
;      ACCOMPANYING DOCUMENTATION IN TERMS OF ITS CORRECTNESS, ACCURACY, RELIABILITY,         
;      OR OTHERWISE.                                                                          
;*************************************************************************************/       
; Default INI file for A-2030SOC-REV1 (Chip ID 0x2580)
;
; $Revision: 23722 $
; $Date: 2010-03-09 18:06:03 -0800 (Tue, 09 Mar 2010) $
;
; This file holds groups of register presets (sections) specific for this sensor. The 
; presets allow you to overwrite the power-on default settings with optimized register 
; settings. 
; The [Demo Initialization] section contains all optimized register settings for running
; the sensor in the demo environment. Other sections include settings optimized for a
; variety of situations like: Running at different master clock speeds, running under
; different lighting situations, running with different lenses, etc.
; Most of the demonstration software (DevWare, SensorDemo, ...) make use of this file
; to load and store the user presets.
;
; Keyname description:
; REG      = assign a new register value
; BITFIELD = do a READ-MODIFY-WRITE to part of a register. The part is defined as a mask.
; FIELD_WR = Write any register, variable or bitfield, specified by its symbol name
; LOAD     = load an alternate section from this section
; STATE    = set non-register state
; DELAY    = delay a certain amount of milliseconds before continuing 
; POLL_REG = Read a register a specified number of times, or until the register
;            value no longer meets a specified condition. You specify the
;            register by its address, and it only works with simple registers.
;            You also specify a delay between each iteration of the loop.
; POLL_FIELD = Like POLL_REG except you specify the register by its symbol name
;            as defined in the sensor data file. POLL_FIELD works with any kind
;            of register or variable.
;
; Keyname format:
; REG      = [<page>,] <address>, <value>             //<comment>
; BITFIELD = [<page>,] <address>, <mask>, <value>
;            Some examples: 
;            BITFIELD=2, 0x05, 0x0020, 1 //for register 5 on page 2, set the 6th bit to 1
;            BITFIELD=0x06, 0x000F, 0    //for register 6, clear the first 4 bits
; FIELD_WR = <registername>, [<bitfieldname>,] <value>
; LOAD     = <section>
; STATE    = <state>, <value>
; DELAY    = <milliseconds>
; POLL_REG = [<page>,]<address>,<mask>,<condition>,DELAY=<milliseconds>,TIMEOUT=<count> //<comment>
;            Example:  Poll every 50ms, stop when value <= 8 or after 5 times (250ms).
;            POLL_REG= 2, 0x3F, 0xFFFF, >8, DELAY=50, TIMEOUT=5
; POLL_FIELD = <registername>, [<bitfieldname>,] <condition>, DELAY=<milliseconds>, TIMEOUT=<count> //<comment>
;            Example:  Poll every 10 ms, stop when the value = 0, or after 500ms.
;            POLL_FIELD= SEQ_CMD, !=0, DELAY=10, TIMEOUT=50
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developer's guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <registername> Name of a register or variable as defined the sensor data (.sdat) file
; <bitfieldname> Optional name of a bitfield
; <condition>    <  <=  ==  !=  >  or  >=  followed by a numerical value
; <count>        Number of iterations of the polling loop
; <section>      the name of another section to load
; <state>        non-register program state names [do not modify]
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .ini file
;
;*************************************************************************************/

//-------------------------------------
// Reset Image Sensor by Resetting MCU
// via mcu_soft_rst_i2c bit
//-------------------------------------
[Reset]
FIELD_WR=MCU_BOOT_MODE, RESET_MCU, 1  //RESET_MCU  stop MCU
FIELD_WR=MCU_BOOT_MODE, RESET_MCU, 0  //RESET_MCU  start MCU
DELAY=100

//-------------------------------------
// STATE=Gamma,                9
// STATE=Black Correct,        5
// STATE=Contrast,            25
// DELAY=300
//
// STATE=Detect Master Clock,  1
// IMAGE=640,512
// DELAY=300
//
// LOAD=Parallel Start Up 16MHz EXTCLK in Preview 15fps
//
// Load Patches
// LOAD=L984A Lens Correction
// LOAD=AWB_CCM
// LOAD=AE Settings
// LOAD=FD_Setup
// LOAD=Gamma_Morph
// LOAD=Low Light
// LOAD=FW_Pipe_Michael
// LOAD=High Power Preview Mode
//-------------------------------------
[Demo Initialization]
REG=0x0018, 0x4028	// take FW out of soft standby to complete its initalization
LOAD=Char setting
LOAD=Errata for Rev1: issue02
LOAD=24MHz CLKIN 80MHz PLL out
LOAD=Lens Correction for Largan L992A3; 85% fall off; 10/19/07 17:20:10
LOAD=AWB and CCMs       // REFRESH command is applied here

[Demo Initialization: MiPi]
LOAD=startup
BITFIELD=0x301A, 0x0004, 0   // Turn streaming off
BITFIELD=0x1A, 0x0008, 1   // Enable_mipi_tx
DELAY = 70
BITFIELD=0x3400, 0x0002, 0   // MIPI_CONTROL: put mipi out of standby
VAR8= 1, 0x0003, 0x02 	
VAR8= 1, 0x0015, 0x02 
BITFIELD=0x301A, 0x0004, 1   // Turn streaming on

[Char setting]
VAR= 7, 0x0015, 0x0111 	// MODE_SENSOR_ROW_SPEED_A [1]
VAR= 11, 0x0028, 0x1E14 // HG_LL_BRIGHTNESSSTART [1]
VAR= 11, 0x002A, 0x6590 // HG_LL_BRIGHTNESSSTOP [1]
VAR= 11, 0x0038, 0x1E14 // 
VAR= 11, 0x003A, 0x6590	//
REG= 0x3244, 0x0328 	// AWB_CONFIG4 [1]
REG= 0x323E, 0xC22C
VAR8= 3, 0x004A, 0x78 	// AWB_GAIN_MIN
VAR8= 3, 0x004B, 0xC8 	// AWB_GAIN_MAX
VAR8= 3, 0x004D, 0xAA 	// AWB_GAINMAX_B
VAR= 4, 0x0011, 0x008C 	// FD_R9_STEP_F60_A [1]
VAR= 4, 0x0013, 0x00A7 	// FD_R9_STEP_F50_A [1]
VAR= 4, 0x0015, 0x005F 	// FD_R9_STEP_F60_B [1]
VAR= 4, 0x0017, 0x0064 	// FD_R9_STEP_F50_B [1]

[Errata for Rev1: issue02]
VAR8= 7, 0x68, 0x05     // >= 5 so that FW will not crash at bright line condition

[24MHz CLKIN 32MHz PLL out]
BITFIELD= 0x14, 1, 1        // Bypass PLL
BITFIELD= 0X14, 2, 0        // Power-down PLL
REG = 0x0014, 0x21f9        // PLL control: BYPASS PLL
REG = 0x0010, 0x0008        // PLL n, m Dividers which are used to generate VCO = 384Mhz
REG = 0x0012, 0x00fb        // PLL p3, p2, p1 Dividers
REG = 0x0014, 0x21fb        // PLL control: PLL_ENABLE on
REG = 0x0014, 0x20fb        // PLL control: SEL_LOCK_DET on
POLL_REG=0x0014,0x8000,!=1,DELAY=1,TIMEOUT=10
REG = 0x0014, 0x20fa        // PLL control: PLL_BYPASS off

[24MHz CLKIN 48MHz PLL out]
BITFIELD= 0x14, 1, 1        // Bypass PLL
BITFIELD= 0X14, 2, 0        // Power-down PLL
REG = 0x0014, 0x21f9        // PLL control: BYPASS PLL
REG = 0x0010, 0x0114        // PLL n, m Dividers which are used to generate VCO = 480Mhz
REG = 0x0012, 0x00f9        // PLL p3, p2, p1 Dividers
REG = 0x0014, 0x21fb        // PLL control: PLL_ENABLE on
REG = 0x0014, 0x20fb        // PLL control: SEL_LOCK_DET on
POLL_REG=0x0014,0x8000,!=1,DELAY=1,TIMEOUT=10
REG = 0x0014, 0x20fa        // PLL control: PLL_BYPASS off

[24MHz CLKIN 60MHz PLL out]
BITFIELD= 0x14, 1, 1        // Bypass PLL
BITFIELD= 0X14, 2, 0        // Power-down PLL
REG = 0x0014, 0x21f9        // PLL control: BYPASS PLL
REG = 0x0010, 0x0114        // PLL n, m Dividers which are used to generate VCO = 480Mhz
REG = 0x0012, 0x00f7        // PLL p3, p2, p1 Dividers
REG = 0x0014, 0x21fb        // PLL control: PLL_ENABLE on
REG = 0x0014, 0x20fb        // PLL control: SEL_LOCK_DET on
POLL_REG=0x0014,0x8000,!=1,DELAY=1,TIMEOUT=10
REG = 0x0014, 0x20fa        // PLL control: PLL_BYPASS off

[24MHz CLKIN 80MHz PLL out]
BITFIELD= 0x14, 1, 1        // Bypass PLL
BITFIELD= 0X14, 2, 0        // Power-down PLL
REG = 0x0014, 0x21f9        // PLL control: BYPASS PLL
REG = 0x0010, 0x0114        // PLL n, m Dividers which are used to generate VCO = 480MHz
REG = 0x0012, 0x00f5        // PLL p3, p2, p1 Dividers
REG = 0x0014, 0x21fb        // PLL control: PLL_ENABLE on
REG = 0x0014, 0x20fb        // PLL control: SEL_LOCK_DET on
POLL_REG=0x0014,0x8000,!=1,DELAY=1,TIMEOUT=10
REG = 0x0014, 0x20fa        // PLL control: PLL_BYPASS off

[Lens Calibration Setup]
var8=1, 0x02, 0x000   // turn off AE, AWB, Flicker, and histogram
REG=0x3210, 0x0100    // turn off scaler, gamma, ccm, aperture, shading correction
delay=10
REG=0x3330, 0x0140    // enable 8+2 bypass and shading correction bypass
delay=10
var8=1, 0x15, 0x02    // enable video mode in context B
var8=1, 0x03, 0x02    // goto context B

[Lens Correction for Largan L992A3; 85% fall off; 10/19/07 17:20:10]
REG=0x3658, 0x7F2F //P_RD_P0Q0
REG=0x365A, 0x812B //P_RD_P0Q1
REG=0x365C, 0x0952 //P_RD_P0Q2
REG=0x365E, 0x3DCC //P_RD_P0Q3
REG=0x3660, 0xD453 //P_RD_P0Q4
REG=0x3680, 0x77A8 //P_RD_P1Q0
REG=0x3682, 0x2E90 //P_RD_P1Q1
REG=0x3684, 0x6530 //P_RD_P1Q2
REG=0x3686, 0xFED1 //P_RD_P1Q3
REG=0x3688, 0xACF3 //P_RD_P1Q4
REG=0x36A8, 0x26F3 //P_RD_P2Q0
REG=0x36AA, 0x0170 //P_RD_P2Q1
REG=0x36AC, 0xE8B5 //P_RD_P2Q2
REG=0x36AE, 0x1A33 //P_RD_P2Q3
REG=0x36B0, 0x9CB2 //P_RD_P2Q4
REG=0x36D0, 0x1371 //P_RD_P3Q0
REG=0x36D2, 0xBC11 //P_RD_P3Q1
REG=0x36D4, 0xC0D2 //P_RD_P3Q2
REG=0x36D6, 0xFF72 //P_RD_P3Q3
REG=0x36D8, 0x9FB7 //P_RD_P3Q4
REG=0x36F8, 0x8955 //P_RD_P4Q0
REG=0x36FA, 0xA2F2 //P_RD_P4Q1
REG=0x36FC, 0xB857 //P_RD_P4Q2
REG=0x36FE, 0xC276 //P_RD_P4Q3
REG=0x3700, 0x2E1B //P_RD_P4Q4
REG=0x364E, 0x0630 //P_GR_P0Q0
REG=0x3650, 0xC24B //P_GR_P0Q1
REG=0x3652, 0x4AB1 //P_GR_P0Q2
REG=0x3654, 0x4A0E //P_GR_P0Q3
REG=0x3656, 0xD813 //P_GR_P0Q4
REG=0x3676, 0x1B89 //P_GR_P1Q0
REG=0x3678, 0xB050 //P_GR_P1Q1
REG=0x367A, 0x22B1 //P_GR_P1Q2
REG=0x367C, 0x0693 //P_GR_P1Q3
REG=0x367E, 0x9BF4 //P_GR_P1Q4
REG=0x369E, 0x0793 //P_GR_P2Q0
REG=0x36A0, 0x9410 //P_GR_P2Q1
REG=0x36A2, 0xFAD5 //P_GR_P2Q2
REG=0x36A4, 0x55F3 //P_GR_P2Q3
REG=0x36A6, 0x5A36 //P_GR_P2Q4
REG=0x36C6, 0x1AF1 //P_GR_P3Q0
REG=0x36C8, 0xFCB0 //P_GR_P3Q1
REG=0x36CA, 0xC4B4 //P_GR_P3Q2
REG=0x36CC, 0x5114 //P_GR_P3Q3
REG=0x36CE, 0x1012 //P_GR_P3Q4
REG=0x36EE, 0xDFB4 //P_GR_P4Q0
REG=0x36F0, 0x35D3 //P_GR_P4Q1
REG=0x36F2, 0x8B56 //P_GR_P4Q2
REG=0x36F4, 0x96F7 //P_GR_P4Q3
REG=0x36F6, 0x633A //P_GR_P4Q4
REG=0x3662, 0x0010 //P_BL_P0Q0
REG=0x3664, 0x36C8 //P_BL_P0Q1
REG=0x3666, 0x1A51 //P_BL_P0Q2
REG=0x3668, 0x888D //P_BL_P0Q3
REG=0x366A, 0x92D3 //P_BL_P0Q4
REG=0x368A, 0x4D8C //P_BL_P1Q0
REG=0x368C, 0x9DF0 //P_BL_P1Q1
REG=0x368E, 0x0B30 //P_BL_P1Q2
REG=0x3690, 0x1B53 //P_BL_P1Q3
REG=0x3692, 0xCB93 //P_BL_P1Q4
REG=0x36B2, 0x73F2 //P_BL_P2Q0
REG=0x36B4, 0xD751 //P_BL_P2Q1
REG=0x36B6, 0xC4F5 //P_BL_P2Q2
REG=0x36B8, 0x0595 //P_BL_P2Q3
REG=0x36BA, 0x67D4 //P_BL_P2Q4
REG=0x36DA, 0x55B1 //P_BL_P3Q0
REG=0x36DC, 0xACD1 //P_BL_P3Q1
REG=0x36DE, 0xC8D4 //P_BL_P3Q2
REG=0x36E0, 0x1874 //P_BL_P3Q3
REG=0x36E2, 0xC816 //P_BL_P3Q4
REG=0x3702, 0x9694 //P_BL_P4Q0
REG=0x3704, 0x6874 //P_BL_P4Q1
REG=0x3706, 0xCC37 //P_BL_P4Q2
REG=0x3708, 0x96F8 //P_BL_P4Q3
REG=0x370A, 0x29DB //P_BL_P4Q4
REG=0x366C, 0x7F0F //P_GB_P0Q0
REG=0x366E, 0x66A3 //P_GB_P0Q1
REG=0x3670, 0x4371 //P_GB_P0Q2
REG=0x3672, 0x6DCD //P_GB_P0Q3
REG=0x3674, 0xD2B3 //P_GB_P0Q4
REG=0x3694, 0x7428 //P_GB_P1Q0
REG=0x3696, 0x0AB0 //P_GB_P1Q1
REG=0x3698, 0x6331 //P_GB_P1Q2
REG=0x369A, 0xCC51 //P_GB_P1Q3
REG=0x369C, 0xC394 //P_GB_P1Q4
REG=0x36BC, 0x0D53 //P_GB_P2Q0
REG=0x36BE, 0x5A0F //P_GB_P2Q1
REG=0x36C0, 0xE675 //P_GB_P2Q2
REG=0x36C2, 0x2AF1 //P_GB_P2Q3
REG=0x36C4, 0x0B76 //P_GB_P2Q4
REG=0x36E4, 0x4CF1 //P_GB_P3Q0
REG=0x36E6, 0x1F51 //P_GB_P3Q1
REG=0x36E8, 0xAAB5 //P_GB_P3Q2
REG=0x36EA, 0xC395 //P_GB_P3Q3
REG=0x36EC, 0x57B6 //P_GB_P3Q4
REG=0x370C, 0xEBB4 //P_GB_P4Q0
REG=0x370E, 0xD1D0 //P_GB_P4Q1
REG=0x3710, 0x94F7 //P_GB_P4Q2
REG=0x3712, 0xCDB6 //P_GB_P4Q3
REG=0x3714, 0x153B //P_GB_P4Q4
REG=0x3644, 0x0304 //POLY_ORIGIN_C
REG=0x3642, 0x0230 //POLY_ORIGIN_R
STATE=Lens Correction Falloff, 85
STATE=Lens Correction Center X, 776
STATE=Lens Correction Center Y, 564
BITFIELD=0x3210, 0x0008, 1 //PGA_ENABLE

[Lens Correction for Largan L992A3; 90% fall off]
REG=0x3658, 0x7FAF //P_RD_P0Q0
REG=0x365A, 0x9BEE //P_RD_P0Q1
REG=0x365C, 0x2972 //P_RD_P0Q2
REG=0x365E, 0x02D0 //P_RD_P0Q3
REG=0x3660, 0xC673 //P_RD_P0Q4
REG=0x3680, 0x880F //P_RD_P1Q0
REG=0x3682, 0x1B70 //P_RD_P1Q1
REG=0x3684, 0x1A12 //P_RD_P1Q2
REG=0x3686, 0xF132 //P_RD_P1Q3
REG=0x3688, 0xCA32 //P_RD_P1Q4
REG=0x36A8, 0x2833 //P_RD_P2Q0
REG=0x36AA, 0x700F //P_RD_P2Q1
REG=0x36AC, 0xCF35 //P_RD_P2Q2
REG=0x36AE, 0x3D14 //P_RD_P2Q3
REG=0x36B0, 0x2AF2 //P_RD_P2Q4
REG=0x36D0, 0x67B0 //P_RD_P3Q0
REG=0x36D2, 0x4731 //P_RD_P3Q1
REG=0x36D4, 0xB372 //P_RD_P3Q2
REG=0x36D6, 0xE615 //P_RD_P3Q3
REG=0x36D8, 0x14F7 //P_RD_P3Q4
REG=0x36F8, 0x9D94 //P_RD_P4Q0
REG=0x36FA, 0x0B52 //P_RD_P4Q1
REG=0x36FC, 0x9D37 //P_RD_P4Q2
REG=0x36FE, 0xDD17 //P_RD_P4Q3
REG=0x3700, 0x00BB //P_RD_P4Q4
REG=0x364E, 0x0790 //P_GR_P0Q0
REG=0x3650, 0xD90C //P_GR_P0Q1
REG=0x3652, 0x5EF1 //P_GR_P0Q2
REG=0x3654, 0x0C0F //P_GR_P0Q3
REG=0x3656, 0xC3D3 //P_GR_P0Q4
REG=0x3676, 0xF90E //P_GR_P1Q0
REG=0x3678, 0x9CD0 //P_GR_P1Q1
REG=0x367A, 0x3431 //P_GR_P1Q2
REG=0x367C, 0x7D71 //P_GR_P1Q3
REG=0x367E, 0x48D1 //P_GR_P1Q4
REG=0x369E, 0x0673 //P_GR_P2Q0
REG=0x36A0, 0x0952 //P_GR_P2Q1
REG=0x36A2, 0x80D6 //P_GR_P2Q2
REG=0x36A4, 0xAC54 //P_GR_P2Q3
REG=0x36A6, 0x3457 //P_GR_P2Q4
REG=0x36C6, 0x1950 //P_GR_P3Q0
REG=0x36C8, 0xA211 //P_GR_P3Q1
REG=0x36CA, 0x0315 //P_GR_P3Q2
REG=0x36CC, 0x4895 //P_GR_P3Q3
REG=0x36CE, 0xE077 //P_GR_P3Q4
REG=0x36EE, 0xA994 //P_GR_P4Q0
REG=0x36F0, 0x8D54 //P_GR_P4Q1
REG=0x36F2, 0xB993 //P_GR_P4Q2
REG=0x36F4, 0xF755 //P_GR_P4Q3
REG=0x36F6, 0x14BA //P_GR_P4Q4
REG=0x3662, 0x0130 //P_BL_P0Q0
REG=0x3664, 0x85AB //P_BL_P0Q1
REG=0x3666, 0x2EB1 //P_BL_P0Q2
REG=0x3668, 0x1BAB //P_BL_P0Q3
REG=0x366A, 0x8353 //P_BL_P0Q4
REG=0x368A, 0x93CF //P_BL_P1Q0
REG=0x368C, 0x9F70 //P_BL_P1Q1
REG=0x368E, 0x0FB2 //P_BL_P1Q2
REG=0x3690, 0x2692 //P_BL_P1Q3
REG=0x3692, 0xE2D2 //P_BL_P1Q4
REG=0x36B2, 0x0253 //P_BL_P2Q0
REG=0x36B4, 0x6911 //P_BL_P2Q1
REG=0x36B6, 0xFA75 //P_BL_P2Q2
REG=0x36B8, 0x8094 //P_BL_P2Q3
REG=0x36BA, 0x2CB7 //P_BL_P2Q4
REG=0x36DA, 0x0930 //P_BL_P3Q0
REG=0x36DC, 0x9550 //P_BL_P3Q1
REG=0x36DE, 0x6294 //P_BL_P3Q2
REG=0x36E0, 0x40B4 //P_BL_P3Q3
REG=0x36E2, 0x8E97 //P_BL_P3Q4
REG=0x3702, 0x9974 //P_BL_P4Q0
REG=0x3704, 0x83B4 //P_BL_P4Q1
REG=0x3706, 0x0293 //P_BL_P4Q2
REG=0x3708, 0x8EB6 //P_BL_P4Q3
REG=0x370A, 0x07FA //P_BL_P4Q4
REG=0x366C, 0x00D0 //P_GB_P0Q0
REG=0x366E, 0xF6AD //P_GB_P0Q1
REG=0x3670, 0x5191 //P_GB_P0Q2
REG=0x3672, 0x11D0 //P_GB_P0Q3
REG=0x3674, 0xBDD3 //P_GB_P0Q4
REG=0x3694, 0x838F //P_GB_P1Q0
REG=0x3696, 0x28D0 //P_GB_P1Q1
REG=0x3698, 0x52F1 //P_GB_P1Q2
REG=0x369A, 0x8CF3 //P_GB_P1Q3
REG=0x369C, 0x2972 //P_GB_P1Q4
REG=0x36BC, 0x12F3 //P_GB_P2Q0
REG=0x36BE, 0x6ED0 //P_GB_P2Q1
REG=0x36C0, 0x8096 //P_GB_P2Q2
REG=0x36C2, 0x9411 //P_GB_P2Q3
REG=0x36C4, 0x2057 //P_GB_P2Q4
REG=0x36E4, 0x5570 //P_GB_P3Q0
REG=0x36E6, 0xBF30 //P_GB_P3Q1
REG=0x36E8, 0x1015 //P_GB_P3Q2
REG=0x36EA, 0x66B3 //P_GB_P3Q3
REG=0x36EC, 0xF8F7 //P_GB_P3Q4
REG=0x370C, 0xCED4 //P_GB_P4Q0
REG=0x370E, 0x2393 //P_GB_P4Q1
REG=0x3710, 0x9955 //P_GB_P4Q2
REG=0x3712, 0xE717 //P_GB_P4Q3
REG=0x3714, 0x371A //P_GB_P4Q4
REG=0x3644, 0x02EC //POLY_ORIGIN_C
REG=0x3642, 0x0230 //POLY_ORIGIN_R
STATE=Lens Correction Falloff, 90
STATE=Lens Correction Center X, 752
STATE=Lens Correction Center Y, 564
BITFIELD=0x3210, 0x0008, 1 //PGA_ENABLE

[AWB CCM Calibration setup]
VAR=11, 0x04, 0x0000 	// turn off histogram stretch HG_MAX_DLEVEL
VAR=3, 0x55, 0x0021 	// set digital gain to unity AWB_MODE *** AWB New Limits keep setting to 1 ***
VAR=1, 0x02, 0x0000 	// turn off AWB, AE, FD, and HG SEQ_MODE
var=1, 0x1d, 0x0000     // turn off AE in PREVIEW state
var=1, 0x1e, 0x0000     // turn off FD in PREVIEW state
var=1, 0x1f, 0x0000     // turn off AWB in PREVIEW state
var=1, 0x20, 0x0000     // turn off HG in PREVIEW state
var=1, 0x03, 0x0005     // REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100
BITFIELD=0x3210, 0x00A0, 0 // turn off gamma correction and color correction
REG=0x3028, 0x0008 	   // set global analog gain to unity ANALOGUE_GAIN_CODE_GLOBAL

[AWB and CCMs]
VAR=3, 0x06, 0x0202 //AWB_CCM_L_0
VAR=3, 0x08, 0xFF2A //AWB_CCM_L_1
VAR=3, 0x0A, 0x000D //AWB_CCM_L_2
VAR=3, 0x0C, 0xFFD8 //AWB_CCM_L_3
VAR=3, 0x0E, 0x01BF //AWB_CCM_L_4
VAR=3, 0x10, 0xFFBB //AWB_CCM_L_5
VAR=3, 0x12, 0x0029 //AWB_CCM_L_6
VAR=3, 0x14, 0xFF21 //AWB_CCM_L_7
VAR=3, 0x16, 0x01E2 //AWB_CCM_L_8
VAR=3, 0x18, 0x0020 //AWB_CCM_L_9
VAR=3, 0x1A, 0x0031 //AWB_CCM_L_10
VAR=3, 0x1C, 0xFFEE //AWB_CCM_RL_0
VAR=3, 0x1E, 0xFFF7 //AWB_CCM_RL_1
VAR=3, 0x20, 0x000E //AWB_CCM_RL_2
VAR=3, 0x22, 0x000C //AWB_CCM_RL_3
VAR=3, 0x24, 0x0022 //AWB_CCM_RL_4
VAR=3, 0x26, 0xFFC3 //AWB_CCM_RL_5
VAR=3, 0x28, 0xFFED //AWB_CCM_RL_6
VAR=3, 0x2A, 0x00A4 //AWB_CCM_RL_7
VAR=3, 0x2C, 0xFF8B //AWB_CCM_RL_8
VAR=3, 0x2E, 0x0009 //AWB_CCM_RL_9
VAR=3, 0x30, 0xFFF7 //AWB_CCM_RL_10
VAR8=3, 0x48, 0x0008 //AWB_GAIN_BUFFER_SPEED
VAR8=3, 0x49, 0x0002 //AWB_JUMP_DIVISOR
//VAR8=3, 0x4A, 0x0059 //AWB_GAIN_MIN
//VAR8=3, 0x4B, 0x00B6 //AWB_GAIN_MAX
VAR8=3, 0x51, 0x0000 //AWB_CCM_POSITION_MIN
VAR8=3, 0x52, 0x007F //AWB_CCM_POSITION_MAX
VAR8=3, 0x54, 0x0043 //AWB_SATURATION
VAR8=3, 0x55, 0x0002 //AWB_MODE
VAR8=3, 0x5D, 0x0078 //AWB_STEADY_BGAIN_OUT_MIN
VAR8=3, 0x5E, 0x0086 //AWB_STEADY_BGAIN_OUT_MAX
VAR8=3, 0x5F, 0x007E //AWB_STEADY_BGAIN_IN_MIN
VAR8=3, 0x60, 0x0082 //AWB_STEADY_BGAIN_IN_MAX
VAR=3, 0x61, 0x0040 //AWB_CNT_PXL_TH
VAR8=3, 0x63, 0x00D2 //AWB_TG_MIN0
VAR8=3, 0x64, 0x00EE //AWB_TG_MAX0
VAR8=3, 0x02, 0x0000 //AWB_WINDOW_POS
VAR8=3, 0x03, 0x00EF //AWB_WINDOW_SIZE
var=1, 0x03, 0x0005     // REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

[frame rate settings @ 800x600 (30 fps): 24MHz CLKIN, 80MHz PLL out and 40MHz to sensor core, xybinx2, high power]
LOAD=24MHz CLKIN 80MHz PLL out
// turn off scaler, gamma, ccm, aperture, and shading correction
REG=0x3210, 0x0100      // turn off scaler, gamma, ccm, aperture, shading correction
delay=10
// turn off the auto functions in Preview state
// since previewParEnter.skipframe.skip_state bit is ON
// we don't need to turn off the auto function in the preview enter state
var8=1, 0x02, 0x00   // turn off AE, AWB, FD, and HG
var8=1, 0x1d, 0x00   // turn off ae
var8=1, 0x1e, 0x00   // turn off fd
var8=1, 0x1f, 0x00   // turn off awb
var8=1, 0x20, 0x00   // turn off hg
// update IFP settings
var=1, 0x03, 0x0005   // REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100
// clock freq settings
var=7, 0x15, 0x0111   // row speed[2:0] = 1
// array read out settings
var=7, 0x0f, 0x0008   // col start = 8
var=7, 0x13, 0x0645   // col end = 1605
var=7, 0x0d, 0x0008   // row start = 8
var=7, 0x11, 0x04B5   // row end = 1205
var=7, 0x17, 0x046c   // xy_bin enable; low_power disable; {x,y}_odd_inc = 3; no flip and mirror
// frame & integration time settings
var=7, 0x21, 0x07a0   // line_length_pck = 1952
var=7, 0x1f, 0x02ab   // frame_length = 683
reg=0x3012, 0x0014    // coarse_integration_time = 20
var=7, 0x1b, 0x01be   // fine_integration_time_min = 446
var=7, 0x1d, 0x0131   // fine_integration_time_max_margin = 305
reg=0x3014, 0x03c0    // fine_integration_time = 960
var=7, 0x19, 0x005a   // fine_correction = 90
// update sensor core settings
var=1, 0x03, 0x0006   // REFRESH MODE
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100
// switch to bayer mode
REG=0x3330, 0x0140	// enable 8+2 bypass and shading correction bypass
delay=10

[frame rate settings @ 1600x1200 (15 fps): 24MHz CLKIN, 80MHz PLL out and 40MHz to sensor core]
LOAD=24MHz CLKIN 80MHz PLL out
var8=1, 0x15, 0x0002   // turn on context B video mode
var8=1, 0x03, 0x0002   // issue "go to context B" command to sequencer
delay=10
REG=0x3210, 0x0100      // turn off scaler, gamma, ccm, aperture, shading correction
delay=10
// turn off the auto functions in Capture state
// since capParEnter.skipframe.skip_state bit is ON
// we don't need to turn off the auto function in the capture enter state
var8=1, 0x02, 0x000   // turn off AE, AWB, Flicker, and histogram
FIELD_WR=SEQ_CAP_MODE, VIDEO_AE_ON, 0
FIELD_WR=SEQ_CAP_MODE, VIDEO_AWB_ON, 0
FIELD_WR=SEQ_CAP_MODE, VIDEO_HG_ON, 0
// update IFP settings
var=1, 0x03, 0x0005   // REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100
// clock freq settings
var=7, 0x2B, 0x0111   // row speed[2:0] = 1
// array read out settings
var=7, 0x25, 0x0004   // col start = 4
var=7, 0x29, 0x064b   // col end = 1611
var=7, 0x23, 0x0004   // row start = 4
var=7, 0x27, 0x04bb   // row end = 1211
var=7, 0x2d, 0x0024   // xy_bin disable; low_power disable; {x,y}_odd_inc = 1; no flip and mirror
// frame & integration time settings
var=7, 0x37, 0x080e   // line_length_pck = 2062
var=7, 0x35, 0x050d   // frame_length = 1293
reg=0x3012, 0x0013    // coarse_integration_time = 19
var=7, 0x31, 0x00f6   // fine_integration_time_min = 246
var=7, 0x33, 0x008b   // fine_integration_time_max_margin = 139
reg=0x3014, 0x0336    // fine_integration_time = 822
var=7, 0x2f, 0x003a   // fine_correction = 58
// update sensor core settings
var=1, 0x03, 0x0006   // REFRESH MODE
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100
REG=0x3330, 0x0140	// enable 8+2 bypass and shading correction bypass
delay=10

[frame rate settings @ 1600x1200 (9 fps): 24MHz CLKIN, 48MHz PLL out and 24MHz to sensor core]
LOAD=24MHz CLKIN 48MHz PLL out
var8=1, 0x15, 0x0002   // turn on context B video mode
var8=1, 0x03, 0x0002   // issue "go to context B" command to sequencer
delay=10
var8=1, 0x02, 0x000   // turn off AE, AWB, Flicker, and histogram
REG=0x3210, 0x0100      // turn off scaler, gamma, ccm, aperture, shading correction
delay=10
REG=0x3330, 0x0140	// enable 8+2 bypass and shading correction bypass
delay=10
// clock freq settings
var=7, 0x2B, 0x0111   // row speed[2:0] = 1
// array read out settings
var=7, 0x25, 0x0004   // col start = 4
var=7, 0x29, 0x064b   // col end = 1611
var=7, 0x23, 0x0004   // row start = 4
var=7, 0x27, 0x04bb   // row end = 1211
var=7, 0x2d, 0x0024   // xy_bin disable; low_power disable; {x,y}_odd_inc = 1; no flip and mirror
// frame & integration time settings
var=7, 0x37, 0x080e   // line_length_pck = 2062
var=7, 0x35, 0x050d   // frame_length = 1293
reg=0x3012, 0x000b    // coarse_integration_time = 11
var=7, 0x31, 0x00f6   // fine_integration_time_min = 246
var=7, 0x33, 0x008b   // fine_integration_time_max_margin = 139
var=7, 0x2f, 0x003a   // fine_correction = 58
// update sensor core settings
var=1, 0x03, 0x0006   // REFRESH MODE

[Viewfinder ON]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 0     //capture parameters, VIDEO Off
FIELD_WR = SEQ_CMD, 1          //Back to preview

[Viewfinder OFF]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1     //capture parameters, VIDEO On
FIELD_WR = SEQ_CMD, 2          //Capture on

[Video Capture ON]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1     //capture parameters, VIDEO On
FIELD_WR = SEQ_CMD, 2          //Capture on

[Video Capture OFF]
FIELD_WR = SEQ_CMD, 1          //Back to preview

[Color Bar Test Pattern Disable]
VAR=7, 0x66, 0x00	//(0) MODE_COMMONMODESETTINGS_TEST_MODE
VAR=1, 0x03, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

[Color Bar Test Pattern: flat field]
VAR=7, 0x66, 0x01	//(1) MODE_COMMONMODESETTINGS_TEST_MODE
VAR=1, 0x03, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

[Color Bar Test Pattern: vertical ramp]
VAR=7, 0x66, 0x02	//(2) MODE_COMMONMODESETTINGS_TEST_MODE
VAR=1, 0x03, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

[Color Bar Test Pattern: color bar ramp]
VAR=7, 0x66, 0x03	//(3) MODE_COMMONMODESETTINGS_TEST_MODE
VAR=1, 0x03, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

[Color Bar Test Pattern: vertical strips]
VAR=7, 0x66, 0x04	//(4) MODE_COMMONMODESETTINGS_TEST_MODE
VAR=1, 0x03, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

[Color Bar Test Pattern: pseudo random]
VAR=7, 0x66, 0x05	//(5) MODE_COMMONMODESETTINGS_TEST_MODE
VAR=1, 0x03, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

[Color Bar Test Pattern: horizontal strips]
VAR=7, 0x66, 0x06	//(6) MODE_COMMONMODESETTINGS_TEST_MODE
VAR=1, 0x03, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

[gamma = 1 in Context A]
VAR8=11, 0x3C, 0x00	// HG_GAMMA_TABLE_A_0
VAR8=11, 0x3D, 0x01	// HG_GAMMA_TABLE_A_1
VAR8=11, 0x3E, 0x03	// HG_GAMMA_TABLE_A_2
VAR8=11, 0x3F, 0x09	// HG_GAMMA_TABLE_A_3
VAR8=11, 0x40, 0x17	// HG_GAMMA_TABLE_A_4
VAR8=11, 0x41, 0x25	// HG_GAMMA_TABLE_A_5
VAR8=11, 0x42, 0x35	// HG_GAMMA_TABLE_A_6
VAR8=11, 0x43, 0x45	// HG_GAMMA_TABLE_A_7
VAR8=11, 0x44, 0x56	// HG_GAMMA_TABLE_A_8
VAR8=11, 0x45, 0x69	// HG_GAMMA_TABLE_A_9
VAR8=11, 0x46, 0x7C	// HG_GAMMA_TABLE_A_10
VAR8=11, 0x47, 0x90	// HG_GAMMA_TABLE_A_11
VAR8=11, 0x48, 0xA3	// HG_GAMMA_TABLE_A_12
VAR8=11, 0x49, 0xB5	// HG_GAMMA_TABLE_A_13
VAR8=11, 0x4A, 0xC5	// HG_GAMMA_TABLE_A_14
VAR8=11, 0x4B, 0xD5	// HG_GAMMA_TABLE_A_15
VAR8=11, 0x4C, 0xE4	// HG_GAMMA_TABLE_A_16
VAR8=11, 0x4D, 0xF2	// HG_GAMMA_TABLE_A_17
VAR8=11, 0x4E, 0xFF	// HG_GAMMA_TABLE_A_18
var=1, 0x03, 0x0005   // REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

[gamma = 0.45 in Context A]
VAR8=11, 0x3C, 0x00	//HG_GAMMA_TABLE_A_0
VAR8=11, 0x3D, 0x1B	//HG_GAMMA_TABLE_A_1
VAR8=11, 0x3E, 0x2E	//HG_GAMMA_TABLE_A_2
VAR8=11, 0x3F, 0x4C	//HG_GAMMA_TABLE_A_3
VAR8=11, 0x40, 0x78	//HG_GAMMA_TABLE_A_4
VAR8=11, 0x41, 0x98	//HG_GAMMA_TABLE_A_5
VAR8=11, 0x42, 0xB0	//HG_GAMMA_TABLE_A_6
VAR8=11, 0x43, 0xC1	//HG_GAMMA_TABLE_A_7
VAR8=11, 0x44, 0xCF	//HG_GAMMA_TABLE_A_8
VAR8=11, 0x45, 0xD9	//HG_GAMMA_TABLE_A_9
VAR8=11, 0x46, 0xE1	//HG_GAMMA_TABLE_A_10
VAR8=11, 0x47, 0xE8	//HG_GAMMA_TABLE_A_11
VAR8=11, 0x48, 0xEE	//HG_GAMMA_TABLE_A_12
VAR8=11, 0x49, 0xF2	//HG_GAMMA_TABLE_A_13
VAR8=11, 0x4A, 0xF6	//HG_GAMMA_TABLE_A_14
VAR8=11, 0x4B, 0xF9	//HG_GAMMA_TABLE_A_15
VAR8=11, 0x4C, 0xFB	//HG_GAMMA_TABLE_A_16
VAR8=11, 0x4D, 0xFD	//HG_GAMMA_TABLE_A_17
VAR8=11, 0x4E, 0xFF	//HG_GAMMA_TABLE_A_18
var=1, 0x03, 0x0005   // REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

[gamma = 1 in Context B]
VAR8=11, 0x4F, 0x00	// HG_GAMMA_TABLE_B_0
VAR8=11, 0x50, 0x01	// HG_GAMMA_TABLE_B_1
VAR8=11, 0x51, 0x03	// HG_GAMMA_TABLE_B_2Atur
VAR8=11, 0x52, 0x09	// HG_GAMMA_TABLE_B_3
VAR8=11, 0x53, 0x17	// HG_GAMMA_TABLE_B_4
VAR8=11, 0x54, 0x25	// HG_GAMMA_TABLE_B_5
VAR8=11, 0x55, 0x35	// HG_GAMMA_TABLE_B_6
VAR8=11, 0x56, 0x45	// HG_GAMMA_TABLE_B_7
VAR8=11, 0x57, 0x56	// HG_GAMMA_TABLE_B_8
VAR8=11, 0x58, 0x69	// HG_GAMMA_TABLE_B_9
VAR8=11, 0x59, 0x7C	// HG_GAMMA_TABLE_B_10
VAR8=11, 0x5A, 0x90	// HG_GAMMA_TABLE_B_11
VAR8=11, 0x5B, 0xA3	// HG_GAMMA_TABLE_B_12
VAR8=11, 0x5C, 0xB5	// HG_GAMMA_TABLE_B_13
VAR8=11, 0x5D, 0xC5	// HG_GAMMA_TABLE_B_14
VAR8=11, 0x5E, 0xD5	// HG_GAMMA_TABLE_B_15
VAR8=11, 0x5F, 0xE4	// HG_GAMMA_TABLE_B_16
VAR8=11, 0x60, 0xF2	// HG_GAMMA_TABLE_B_17
VAR8=11, 0x61, 0xFF	// HG_GAMMA_TABLE_B_18
var=1, 0x03, 0x0005   // REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

[gamma = 0.45 in Context B]
VAR8=11, 0x4F, 0x00	//HG_GAMMA_TABLE_B_0
VAR8=11, 0x50, 0x0F	//HG_GAMMA_TABLE_B_1
VAR8=11, 0x51, 0x1A	//HG_GAMMA_TABLE_B_2
VAR8=11, 0x52, 0x2E	//HG_GAMMA_TABLE_B_3
VAR8=11, 0x53, 0x50	//HG_GAMMA_TABLE_B_4
VAR8=11, 0x54, 0x6A	//HG_GAMMA_TABLE_B_5
VAR8=11, 0x55, 0x80	//HG_GAMMA_TABLE_B_6
VAR8=11, 0x56, 0x91	//HG_GAMMA_TABLE_B_7
VAR8=11, 0x57, 0xA1	//HG_GAMMA_TABLE_B_8
VAR8=11, 0x58, 0xAF	//HG_GAMMA_TABLE_B_9
VAR8=11, 0x59, 0xBB	//HG_GAMMA_TABLE_B_10
VAR8=11, 0x5A, 0xC6	//HG_GAMMA_TABLE_B_11
VAR8=11, 0x5B, 0xD0	//HG_GAMMA_TABLE_B_12
VAR8=11, 0x5C, 0xD9	//HG_GAMMA_TABLE_B_13
VAR8=11, 0x5D, 0xE2	//HG_GAMMA_TABLE_B_14
VAR8=11, 0x5E, 0xEA	//HG_GAMMA_TABLE_B_15
VAR8=11, 0x5F, 0xF1	//HG_GAMMA_TABLE_B_16
VAR8=11, 0x60, 0xF9	//HG_GAMMA_TABLE_B_17
VAR8=11, 0x61, 0xFF	//HG_GAMMA_TABLE_B_18
var=1, 0x03, 0x0005   // REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

[Disable 2D aperture correction]
FIELD_WR=HG_LLMODE, CLUSTERDC_VS_GAINS, 0   // turn off ClusterDC vs Gains
var=1, 0x03, 0x0005   // REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100
BITFIELD=0x3210, 0x0010, 0

[Enable 2D aperture correction]
FIELD_WR=HG_LLMODE, CLUSTERDC_VS_GAINS, 1   // turn on ClusterDC vs Gains and let FW controls it
var=1, 0x03, 0x0005   // REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

