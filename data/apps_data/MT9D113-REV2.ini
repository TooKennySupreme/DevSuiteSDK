;**************************************************************************************       
; Copyright 2009 Aptina Imaging Corporation. All rights reserved.                             
;                                                                                             
;                                                                                             
; No permission to use, copy, modify, or distribute this software and/or                      
; its documentation for any purpose has been granted by Aptina Imaging Corporation.           
; If any such permission has been granted ( by separate agreement ), it                       
; is required that the above copyright notice appear in all copies and                        
; that both that copyright notice and this permission notice appear in                        
; supporting documentation, and that the name of Aptina Imaging Corporation or any            
; of its trademarks may not be used in advertising or publicity pertaining                    
; to distribution of the software without specific, written prior permission.                 
;                                                                                             
;                                                                                             
;      This software and any associated documentation are provided "AS IS" and                
;      without warranty of any kind.   APTINA IMAGING CORPORATION EXPRESSLY DISCLAIMS         
;      ALL WARRANTIES EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, NONINFRINGEMENT       
;      OF THIRD PARTY RIGHTS, AND ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS        
;      FOR A PARTICULAR PURPOSE.  APTINA DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED        
;      IN THIS SOFTWARE WILL MEET YOUR REQUIREMENTS, OR THAT THE OPERATION OF THIS SOFTWARE   
;      WILL BE UNINTERRUPTED OR ERROR-FREE.  FURTHERMORE, APTINA DOES NOT WARRANT OR          
;      MAKE ANY REPRESENTATIONS REGARDING THE USE OR THE RESULTS OF THE USE OF ANY            
;      ACCOMPANYING DOCUMENTATION IN TERMS OF ITS CORRECTNESS, ACCURACY, RELIABILITY,         
;      OR OTHERWISE.                                                                          
;*************************************************************************************/       
; Default INI file for A-2030SOC-REV2 (Chip ID 0x2580)
;
; $Revision: 23722 $
; $Date: 2010-03-09 18:06:03 -0800 (Tue, 09 Mar 2010) $
; 
; This file holds groups of register presets (sections) specific for this sensor. The 
; presets allow you to overwrite the power-on default settings with optimized register 
; settings. 
; The [Demo Initialization] section contains all optimized register settings for running
; the sensor in the demo environment. Other sections include settings optimized for a
; variety of situations like: Running at different master clock speeds, running under
; different lighting situations, running with different lenses, etc.
; Most of the demonstration software (DevWare, SensorDemo, ...) make use of this file
; to load and store the user presets.
;
; Keyname description:
; REG      = assign a new register value
; BITFIELD = do a READ-MODIFY-WRITE to part of a register. The part is defined as a mask.
; FIELD_WR = Write any register, variable or bitfield, specified by its symbol name
; LOAD     = load an alternate section from this section
; STATE    = set non-register state
; DELAY    = delay a certain amount of milliseconds before continuing 
; POLL_REG = Read a register a specified number of times, or until the register
;            value no longer meets a specified condition. You specify the
;            register by its address, and it only works with simple registers.
;            You also specify a delay between each iteration of the loop.
; POLL_FIELD = Like POLL_REG except you specify the register by its symbol name
;            as defined in the sensor data file. POLL_FIELD works with any kind
;            of register or variable.
;
; Keyname format:
; REG      = [<page>,] <address>, <value>             //<comment>
; BITFIELD = [<page>,] <address>, <mask>, <value>
;            Some examples: 
;            BITFIELD=2, 0x05, 0x0020, 1 //for register 5 on page 2, set the 6th bit to 1
;            BITFIELD=0x06, 0x000F, 0    //for register 6, clear the first 4 bits
; FIELD_WR = <registername>, [<bitfieldname>,] <value>
; LOAD     = <section>
; STATE    = <state>, <value>
; DELAY    = <milliseconds>
; POLL_REG = [<page>,]<address>,<mask>,<condition>,DELAY=<milliseconds>,TIMEOUT=<count> //<comment>
;            Example:  Poll every 50ms, stop when value <= 8 or after 5 times (250ms).
;            POLL_REG= 2, 0x3F, 0xFFFF, >8, DELAY=50, TIMEOUT=5
; POLL_FIELD = <registername>, [<bitfieldname>,] <condition>, DELAY=<milliseconds>, TIMEOUT=<count> //<comment>
;            Example:  Poll every 10 ms, stop when the value = 0, or after 500ms.
;            POLL_FIELD= SEQ_CMD, !=0, DELAY=10, TIMEOUT=50
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developer's guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <registername> Name of a register or variable as defined the sensor data (.sdat) file
; <bitfieldname> Optional name of a bitfield
; <condition>    <  <=  ==  !=  >  or  >=  followed by a numerical value
; <count>        Number of iterations of the polling loop
; <section>      the name of another section to load
; <state>        non-register program state names [do not modify]
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .ini file
;
;*************************************************************************************/

///////////////////////////////////////////////////////////////////////////////
[Demo Initialization]////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Set Demo2 clock in case it is used as the SOC2030 clock source
XMCLK=24000000

// Soft-reset the part in case it is in an unknown state due to
// Devware probing (to determine what the part is).  This is not
// necessary in a customer system.
LOAD=Reset

// select pixel data output
BITFIELD=0x001A, 0x0008, 0 // parallel

// Do the rest of the basic initialization.
LOAD=Basic Init


///////////////////////////////////////////////////////////////////////////////
[Demo Initialization MIPI]///////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Set Demo2 clock in case it is used as the SOC2030 clock source
XMCLK=24000000

// Soft-reset the part in case it is in an unknown state due to
// Devware probing (to determine what the part is).  This is not
// necessary in a customer system.
LOAD=Reset

// select pixel data output
BITFIELD=0x001A, 0x0008, 1 // MIPI

// Do the rest of the basic initialization.
LOAD=Basic Init


///////////////////////////////////////////////////////////////////////////////
[Reset]////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// toggle the SOC soft reset bit
BITFIELD=0x001A, 0x0001, 1
BITFIELD=0x001A, 0x0001, 0


///////////////////////////////////////////////////////////////////////////////
[Basic Init]///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// set the system clock generated from PLL
// 24MHz CLKIN, 84 MHz PLL out
// 15fps @ full resolution and 30fps @ preview mode
LOAD=MT9D113 (SOC2030) Register Wizard PLL Defaults

// enable powerup stop
LOAD=MCU Powerup Stop Enable

// start MCU, includes wait for standby_done to clear
LOAD=GO

LOAD=MT9D113 (SOC2030) Register Wizard Configuration Defaults

// load Rev2 errata settings
LOAD=Errata for Rev2: issue02

// Load PGA curve from EEPROM
LOAD=EEPROM Lens Correction

// Low light setting
LOAD=Low light setting

// AWB and CCM settings
LOAD=AWB and CCMs       // REFRESH command is applied here

// Load Rev2 patch
LOAD=SOC2030_REV2_patch

// continue after powerup stop
LOAD=Continue


///////////////////////////////////////////////////////////////////////////////
[MT9D113 (SOC2030) Register Wizard PLL Defaults]///////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// 24MHz CLKIN, 84 MHz PLL out
// 15fps @ full resolution and 30fps @ preview mode
REG = 0x0014, 0x21F9        //PLL control: BYPASS PLL = 8697
REG = 0x0010, 0x0115        //PLL Dividers = 277
REG = 0x0012, 0x00F5        //PLL P Dividers = 245
REG = 0x0014, 0x21FB        //PLL control: PLL_ENABLE on = 8699
REG = 0x0014, 0x20FB        //PLL control: SEL_LOCK_DET on = 8443
POLL_REG=0x0014,0x8000,==0x0000,DELAY=10,TIMEOUT=100
REG = 0x0014, 0x20FA        //PLL control: PLL_BYPASS off = 8442

///////////////////////////////////////////////////////////////////////////////
[MCU Powerup Stop Enable]//////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// set powerup stop bit
BITFIELD=0x0018, 0x0004, 1

///////////////////////////////////////////////////////////////////////////////
[GO]///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// release MCU from standby
BITFIELD=0x0018, 0x0001, 0

// wait for R20B to come out of standby
POLL_REG=0x0018,0x4000,!=0x0000,DELAY=10,TIMEOUT=100

///////////////////////////////////////////////////////////////////////////////
[Continue]/////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// clear powerup stop bit
BITFIELD=0x0018, 0x0004, 0

// wait for sequencer to enter preview state
POLL_FIELD=SEQ_STATE,!=3,DELAY=10,TIMEOUT=100

// syncronize the FW with the sensor
FIELD_WR=SEQ_CMD, 6

///////////////////////////////////////////////////////////////////////////////
[MT9D113 (SOC2030) Register Wizard Configuration Defaults]/////////////////////
///////////////////////////////////////////////////////////////////////////////
// Edited to remove values that are equal to defaults.
FIELD_WR= MODE_SENSOR_FINE_CORRECTION_A,     90    // sensor_fine_correction (A) = 90
FIELD_WR= MODE_SENSOR_FINE_IT_MIN_A,        446    // sensor_fine_IT_min (A) = 446
FIELD_WR= MODE_SENSOR_FINE_IT_MAX_MARGIN_A, 305    // sensor_fine_IT_max_margin (A) = 305
FIELD_WR= MODE_SENSOR_FRAME_LENGTH_A,       699    // Frame Lines (A) = 699
FIELD_WR= MODE_SENSOR_LINE_LENGTH_PCK_A,   2184    // Line Length (A) = 2184
FIELD_WR= MODE_SENSOR_FINE_CORRECTION_B,     58    // sensor_fine_correction (B) = 58
FIELD_WR= MODE_SENSOR_FINE_IT_MIN_B,        246    // sensor_fine_IT_min (B) = 246
FIELD_WR= MODE_SENSOR_FINE_IT_MAX_MARGIN_B, 139    // sensor_fine_IT_max_margin (B) = 139
FIELD_WR= MODE_SENSOR_FRAME_LENGTH_B,      1313    // Frame Lines (B) = 1313
FIELD_WR= MODE_SENSOR_LINE_LENGTH_PCK_B,   2184    // Line Length (B) = 2184

FIELD_WR= MODE_COMMONMODESETTINGS_BRIGHT_COLOR_KILL, 404  // VAR= 7, 0x005F, 404
FIELD_WR= MODE_COMMONMODESETTINGS_DARK_COLOR_KILL,    20
FIELD_WR= MODE_COMMONMODESETTINGS_FILTER_MODE,        68  // VAR8= 7, 0x0065, 68

FIELD_WR= AE_BASETARGET,     40   // VAR8= 2, 0x004F, 40
FIELD_WR= AE_MAX_VIRTGAIN,  160   // AE_MAX_VIRTGAIN decreased to ensure gain does not roll over in normal lighting
FIELD_WR= AE_MAX_INDEX,      14   // VAR8= 2, 0x000C, 19 sets fps to be a low of 5fps
FIELD_WR= AE_R9,            160   // R9 Step = 160
FIELD_WR= AE_MAX_DGAIN_AE1, 494   // ae_max_dgain_ae1 = 494

FIELD_WR= FD_SEARCH_F1_50,   38   // search_f1_50 = 38
FIELD_WR= FD_SEARCH_F2_50,   41   // search_f2_50 = 41
FIELD_WR= FD_SEARCH_F1_60,   46   // search_f1_60 = 46
FIELD_WR= FD_SEARCH_F2_60,   49   // search_f2_60 = 49
FIELD_WR= FD_R9_STEP_F60_A, 160   // R9_Step_60 (A) = 160
FIELD_WR= FD_R9_STEP_F50_A, 192   // R9_Step_50 (A) = 192
FIELD_WR= FD_R9_STEP_F60_B, 160   // R9_Step_60 (B) = 160
FIELD_WR= FD_R9_STEP_F50_B, 192   // R9_Step_50 (B) = 192

///////////////////////////////////////////////////////////////////////////////
[SOC2030_REV2_patch]//////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//  2030SOC_REV02_PATCH02_REV9
REG= 0x098C, 0x415 	// MCU_ADDRESS
REG_BURST= 0x990, 0xF601, 0x42C1, 0x226, 0x11F6, 0x143, 0xC102, 0x260A, 0xCC04
REG= 0x098C, 0x425 	// MCU_ADDRESS
REG_BURST= 0x990, 0x33BD, 0xA365, 0xBD04, 0x3339, 0xC6FF, 0xF701, 0x6439, 0xFE02
REG= 0x098C, 0x435 	// MCU_ADDRESS
REG_BURST= 0x990, 0x5418, 0xCE03, 0x42CC, 0xB, 0xBDC2, 0xBFCC, 0x4BF, 0xFD03
REG= 0x098C, 0x445 	// MCU_ADDRESS
REG_BURST= 0x990, 0x4CCC, 0x342, 0xFD02, 0x545F, 0x4FFD, 0x25F, 0xFE02, 0xBD18
REG= 0x098C, 0x455 	// MCU_ADDRESS
REG_BURST= 0x990, 0xCE03, 0x30C6, 0x11BD, 0xC2BF, 0xCC05, 0x3FD, 0x33A, 0xCC05
REG= 0x098C, 0x465 	// MCU_ADDRESS
REG_BURST= 0x990, 0xB5FD, 0x33E, 0xCC03, 0x30FD, 0x2BD, 0xDE00, 0x18CE, 0xC2
REG= 0x098C, 0x475 	// MCU_ADDRESS
REG_BURST= 0x990, 0xCC00, 0x37BD, 0xC2BF, 0xCC06, 0xAEDD, 0xC4CC, 0x6B4, 0xDDD6
REG= 0x098C, 0x485 	// MCU_ADDRESS
REG_BURST= 0x990, 0xCC00, 0xC2DD, 0xB6, 0x2C3, 0x810A, 0x2407, 0x1686, 0xA3D
REG= 0x098C, 0x495 	// MCU_ADDRESS
REG_BURST= 0x990, 0xF702, 0xC3B6, 0x2C4, 0x810A, 0x2407, 0x1686, 0xA3D, 0xF702
REG= 0x098C, 0x4A5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xC4CC, 0x2BD, 0xFD03, 0x4EFE, 0x34E, 0xCC4A, 0x38ED, 0x66C6
REG= 0x098C, 0x4B5 	// MCU_ADDRESS
REG_BURST= 0x990, 0x2F7, 0x164, 0xC609, 0xF701, 0x6539, 0x3C3C, 0x34BD, 0xCDCF
REG= 0x098C, 0x4C5 	// MCU_ADDRESS
REG_BURST= 0x990, 0x7D02, 0x5626, 0x5F6, 0x25F, 0x2003, 0xF602, 0x6030, 0xE704
REG= 0x098C, 0x4D5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xCC34, 0xBD, 0xA55B, 0xC43F, 0x84FE, 0x30ED, 0x2E6, 0x44F
REG= 0x098C, 0x4E5 	// MCU_ADDRESS
REG_BURST= 0x990, 0x505, 0x505, 0x505, 0xC4C0, 0x8401, 0xEA03, 0xAA02, 0xED02
REG= 0x098C, 0x4F5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xCC34, 0xED, 0xEC, 0x2BD, 0xA547, 0x3838, 0x3139, 0x3CF6
REG= 0x098C, 0x505 	// MCU_ADDRESS
REG_BURST= 0x990, 0x2C3, 0xF102, 0xC423, 0x8F0, 0x2C4, 0x30E7, 0x20, 0x330
REG= 0x098C, 0x515 	// MCU_ADDRESS
REG_BURST= 0x990, 0x6F00, 0xF602, 0xC3FB, 0x2C4, 0xE701, 0x4FB3, 0x2C8, 0x2415
REG= 0x098C, 0x525 	// MCU_ADDRESS
REG_BURST= 0x990, 0xF602, 0xC5F1, 0x2C2, 0x2308, 0xF002, 0xC2F7, 0x2C5, 0x2016
REG= 0x098C, 0x535 	// MCU_ADDRESS
REG_BURST= 0x990, 0x7F02, 0xC520, 0x11E6, 0x4F, 0xB302, 0xC823, 0x9F6, 0x2C5
REG= 0x098C, 0x545 	// MCU_ADDRESS
REG_BURST= 0x990, 0xFB02, 0xC2F7, 0x2C5, 0xF602, 0xC5F1, 0x2C1, 0x2306, 0xF602
REG= 0x098C, 0x555 	// MCU_ADDRESS
REG_BURST= 0x990, 0xC1F7, 0x2C5, 0x3839, 0x3736, 0x3C3C, 0x3C3C, 0x3C34, 0x30EC
REG= 0x098C, 0x565 	// MCU_ADDRESS
REG_BURST= 0x990, 0xFBD, 0xA55B, 0x30ED, 0x617, 0x847F, 0xA70A, 0xEC06, 0xC480
REG= 0x098C, 0x575 	// MCU_ADDRESS
REG_BURST= 0x990, 0x8401, 0xED08, 0x2709, 0x8301, 0x8026, 0x668, 0xA20, 0x264
REG= 0x098C, 0x585 	// MCU_ADDRESS
REG_BURST= 0x990, 0xAEC, 0xBBD, 0xA55B, 0x30ED, 0x6E6, 0xA4F, 0xED02, 0xEC06
REG= 0x098C, 0x595 	// MCU_ADDRESS
REG_BURST= 0x990, 0xED00, 0xCC00, 0x80BD, 0xA409, 0x30EC, 0x2ED, 0x46D, 0x427
REG= 0x098C, 0x5A5 	// MCU_ADDRESS
REG_BURST= 0x990, 0x5CC, 0xFF, 0xED04, 0xE605, 0x308F, 0xC300, 0xD8F, 0x3539
REG= 0x098C, 0x5B5 	// MCU_ADDRESS
REG_BURST= 0x990, 0x308F, 0xC3FF, 0xF38F, 0x35CC, 0x3210, 0xBDA5, 0x5B30, 0xED06
REG= 0x098C, 0x5C5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xBDD6, 0x54CC, 0x3210, 0x30ED, 0xEC, 0x6BD, 0xA547, 0xCC30
REG= 0x098C, 0x5D5 	// MCU_ADDRESS
REG_BURST= 0x990, 0x5A30, 0xED00, 0xCC32, 0xD4BD, 0x55B, 0x30E7, 0x8CC, 0x3056
REG= 0x098C, 0x5E5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xED00, 0xCC32, 0xD6BD, 0x55B, 0x30E7, 0x9CC, 0x3058, 0xED00
REG= 0x098C, 0x5F5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xCC32, 0xDABD, 0x55B, 0x30E7, 0xAE6, 0x9E7, 0xB6F, 0xCE6
REG= 0x098C, 0x605 	// MCU_ADDRESS
REG_BURST= 0x990, 0xC4F, 0x5C3, 0x33F6, 0xED00, 0xE60C, 0x4FED, 0x28F, 0xC300
REG= 0x098C, 0x615 	// MCU_ADDRESS
REG_BURST= 0x990, 0x830, 0xE302, 0x188F, 0x3C18, 0xE600, 0x4F30, 0xED00, 0x3CF6
REG= 0x098C, 0x625 	// MCU_ADDRESS
REG_BURST= 0x990, 0x2F1, 0x30ED, 0x3C, 0xF602, 0xF230, 0xED00, 0xE612, 0xC302
REG= 0x098C, 0x635 	// MCU_ADDRESS
REG_BURST= 0x990, 0xE98F, 0x34E6, 0x30, 0xE700, 0xE613, 0x4FC3, 0x2ED, 0x8FE6
REG= 0x098C, 0x645 	// MCU_ADDRESS
REG_BURST= 0x990, 0xBD, 0xA4EE, 0x3838, 0x3831, 0x4FBD, 0xA547, 0x306C, 0xCE6
REG= 0x098C, 0x655 	// MCU_ADDRESS
REG_BURST= 0x990, 0xCC1, 0x425, 0xAACE, 0x2BD, 0x1F1F, 0x8047, 0xCC33, 0xF4BD
REG= 0x098C, 0x665 	// MCU_ADDRESS
REG_BURST= 0x990, 0xA55B, 0xC4BF, 0x30ED, 0x4FE, 0x34E, 0xFC02, 0xD8A3, 0x6625
REG= 0x098C, 0x675 	// MCU_ADDRESS
REG_BURST= 0x990, 0x430, 0x1C05, 0x40CE, 0x2BD, 0x1F1F, 0x401C, 0xCC32, 0x10BD
REG= 0x098C, 0x685 	// MCU_ADDRESS
REG_BURST= 0x990, 0xA55B, 0xC4EF, 0x30ED, 0x61E, 0x540, 0x31C, 0x710, 0xCC32
REG= 0x098C, 0x695 	// MCU_ADDRESS
REG_BURST= 0x990, 0x10ED, 0xEC, 0x6BD, 0xA547, 0xCC33, 0xF430, 0xED00, 0xEC04
REG= 0x098C, 0x6A5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xBDA5, 0x4730, 0xC60D, 0x3A35, 0x39BD, 0xA705, 0xBDA7, 0x613C
REG= 0x098C, 0x6B5 	// MCU_ADDRESS
REG_BURST= 0x990, 0x3C3C, 0x122F, 0x203, 0x5F20, 0x2C6, 0x130, 0xE702, 0xCC00
REG= 0x098C, 0x6C5 	// MCU_ADDRESS
REG_BURST= 0x990, 0x18BD, 0xA55B, 0x8580, 0x2603, 0x5F20, 0x2C6, 0x130, 0xE703
REG= 0x098C, 0x6D5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xD604, 0xF704, 0x13CC, 0x16, 0xBDA5, 0x5BFD, 0x40F, 0xCC00
REG= 0x098C, 0x6E5 	// MCU_ADDRESS
REG_BURST= 0x990, 0x14BD, 0xA55B, 0xFD04, 0xDCC, 0x1A, 0xBDA5, 0x5BFD, 0x411
REG= 0x098C, 0x6F5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xDE00, 0xEE24, 0xAD00, 0xCC00, 0x1630, 0xED00, 0xDC30, 0xBDA5
REG= 0x098C, 0x705 	// MCU_ADDRESS
REG_BURST= 0x990, 0x47CC, 0x1A, 0xBDA5, 0x5B30, 0xED04, 0x1F04, 0x20C, 0xCC00
REG= 0x098C, 0x715 	// MCU_ADDRESS
REG_BURST= 0x990, 0x1AED, 0xEC, 0x484, 0xFDBD, 0xA547, 0xDE00, 0xEE36, 0xC605
REG= 0x098C, 0x725 	// MCU_ADDRESS
REG_BURST= 0x990, 0xAD00, 0xCC07, 0xFFFD, 0x1042, 0xC603, 0xF710, 0x44F6, 0x104D
REG= 0x098C, 0x735 	// MCU_ADDRESS
REG_BURST= 0x990, 0xC4F0, 0xCA09, 0xF710, 0x4DCC, 0x20, 0x30ED, 0xCC, 0x1
REG= 0x098C, 0x745 	// MCU_ADDRESS
REG_BURST= 0x990, 0xBDA5, 0x47CC, 0x26, 0x30ED, 0x34, 0xBDA5, 0x5BCA, 0x231
REG= 0x098C, 0x755 	// MCU_ADDRESS
REG_BURST= 0x990, 0xBDA5, 0x47CC, 0x18, 0x30ED, 0x34, 0xBDA5, 0x5B8A, 0x4031
REG= 0x098C, 0x765 	// MCU_ADDRESS
REG_BURST= 0x990, 0xBDA5, 0x4720, 0x11C6, 0xFFF7, 0x1040, 0xB610, 0x40FE, 0x140
REG= 0x098C, 0x775 	// MCU_ADDRESS
REG_BURST= 0x990, 0xEE00, 0xC620, 0xAD00, 0x306D, 0x227, 0xFCC, 0x18, 0xBDA5
REG= 0x098C, 0x785 	// MCU_ADDRESS
REG_BURST= 0x990, 0x5BC4, 0x184, 0x8083, 0x0, 0x26DB, 0x306D, 0x226, 0x6D6
REG= 0x098C, 0x795 	// MCU_ADDRESS
REG_BURST= 0x990, 0x3C1, 0x126, 0xD0CC, 0x16, 0xED00, 0xFC04, 0xFCA, 0x20BD
REG= 0x098C, 0x7A5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xA547, 0xDE00, 0xEE30, 0xAD00, 0xCC00, 0x2630, 0xED00, 0x34BD
REG= 0x098C, 0x7B5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xA55B, 0xC4FD, 0x31BD, 0xA547, 0xCC00, 0x1A30, 0xED00, 0xEC04
REG= 0x098C, 0x7C5 	// MCU_ADDRESS
REG_BURST= 0x990, 0x8A08, 0xBDA5, 0x47CC, 0x1A, 0x30ED, 0xEC, 0x4BD, 0xA547
REG= 0x098C, 0x7D5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xCC00, 0x1630, 0xED00, 0xFC04, 0xFBD, 0xA547, 0xDE00, 0xEE2E
REG= 0x098C, 0x7E5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xAD00, 0x306D, 0x226, 0x6DE, 0xEE, 0x2CAD, 0xF6, 0x104D
REG= 0x098C, 0x7F5 	// MCU_ADDRESS
REG_BURST= 0x990, 0xC4F0, 0xCA0A, 0xF710, 0x4D38, 0x3838
REG= 0x098C, 0x87FF 	// MCU_ADDRESS
REG= 0x0990, 0x39 	// MCU_DATA_0

FIELD_WR= MON_ARG1, 0x0415                                 // hard coded start address of the patch at "patchSetup" 
FIELD_WR= MON_CMD, 0x01                                    // execute the patch 
POLL_FIELD=MON_PATCH_ID_0,==0,DELAY=10,TIMEOUT=100         // wait for the patch to complete initialization 


///////////////////////////////////////////////////////////////////////////////
[Low light setting]////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR= HG_LL_BRIGHTNESSSTART, 13800   // VAR= 11, 0x0028, 13800
FIELD_WR= HG_LL_BRIGHTNESSSTOP, 46000   // VAR= 11, 0x002A, 46000

FIELD_WR= HG_LL_SAT1,           75     // VAR8= 11, 0x0020, 75
FIELD_WR= HG_LL_SAT2,            0      // VAR8= 11, 0x0024, 0
FIELD_WR= HG_LL_INTERPTHRESH2, 255      // VAR8= 11, 0x0025, 255

FIELD_WR= HG_NR_STOP_R, 255             // hg_nr_stop_r
FIELD_WR= HG_NR_STOP_G, 255             // hg_nr_stop_g
FIELD_WR= HG_NR_STOP_B, 255             // hg_nr_stop_b
FIELD_WR= HG_NR_STOP_OL, 87             // VAR8= 11, 0x0033, 128

FIELD_WR= HG_NR_GAINSTART, 128          // VAR8= 11, 0x0034, 128
FIELD_WR= HG_NR_GAINSTOP,  255          // VAR8= 11, 0x0035, 255

FIELD_WR= HG_CLUSTERDC_TH, 20           // HG_CLUSTERDC_TH

FIELD_WR= HG_GAMMA_MORPH_CTRL, 1        // VAR8= 11, 0x0037, 1

FIELD_WR= HG_GAMMASTARTMORPH, 13000     // HG_GAMMASTARTMORPH @ 100 lux
FIELD_WR= HG_GAMMASTOPMORPH,  31000     // HG_GAMMASTOPMORPH @ 20 lux

FIELD_WR= HG_FTB_START_BM, 32700        // HG_FTB_START_BM @ 5 lux
FIELD_WR= HG_FTB_STOP_BM,  33500        // HG_FTB_STOP_BM @ 1 lux

///////////////////////////////////////////////////////////////////////////////
[max SNR setting]//////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
BITFIELD=0x33F4, 0x0030, 1  // R0x33f4[5] = R0x33f4[4] = 1
VAR8=2, 0x0e, 0xC0   // ae_max_virt_gain = 192
Var=2, 0x12, 0x01ee  // ae_max_d_gain_ae1 = 494
Var8=11, 0x30, 0xff   // hg_nr_stop_r
Var8=11, 0x31, 0xff   // hg_nr_stop_g
Var8=11, 0x32, 0xff   // hg_nr_stop_b
Var8=11, 0x33, 0xff   // hg_nr_stop_ol
Var8=11, 0x35, 0xff   // hg_nr_gain_stop
VAR8=1, 3, 5 // SEQ_CMD = CMD_REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

//saturation controls via CCM
FIELD_WR= HG_LL_BRIGHTNESSSTOP, 16000 	// VAR= 11, 0x002A, 15000
FIELD_WR= HG_LL_SAT1, 90 	// VAR8= 11, 0x0020, 90
FIELD_WR= HG_LL_SAT2, 0 	// VAR8= 11, 0x0024, 0

//saturation controls outside of CCM block
FIELD_WR= MODE_COMMONMODESETTINGS_BRIGHT_COLOR_KILL, 404 // VAR= 7, 0x005F, 406
FIELD_WR= MODE_COMMONMODESETTINGS_DARK_COLOR_KILL, 20 

//make sure NR is set to max
FIELD_WR= HG_NR_GAINSTOP, 192 	// VAR8= 11, 0x0035, 192

//make sure demosaic threshold is set to max
FIELD_WR= HG_LL_INTERPTHRESH2, 255 	// VAR8= 11, 0x0025, 255

//max out cluster defect
VAR8= 11, 0x0036, 0xFF 	// HG_CLUSTERDC_TH

//make change to low_pass_yuv_filter
FIELD_WR= MODE_COMMONMODESETTINGS_FILTER_MODE, 68 	// VAR8= 7, 0x0065, 68

LOAD=change to gamma tables

LOAD=change to gamma morph

//turn off f2b feature
var=11, 0x62, 0xffff
var=11, 0x64, 0xffff

FIELD_WR= SEQ_CMD, 6 	// VAR8= 1, 0x0003, 6

///////////////////////////////////////////////////////////////////////////////
[AWB and CCMs]/////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR= AWB_CCM_L_0,   0x0180 // AWB_CCM_L_0
FIELD_WR= AWB_CCM_L_1,   0xFF00 // AWB_CCM_L_1
FIELD_WR= AWB_CCM_L_2,   0x0080 // AWB_CCM_L_2
FIELD_WR= AWB_CCM_L_3,   0xFF66 // AWB_CCM_L_3
FIELD_WR= AWB_CCM_L_4,   0x0180 // AWB_CCM_L_4
FIELD_WR= AWB_CCM_L_5,   0xFFEE // AWB_CCM_L_5
FIELD_WR= AWB_CCM_L_6,   0xFFCD // AWB_CCM_L_6
FIELD_WR= AWB_CCM_L_7,   0xFECD // AWB_CCM_L_7
FIELD_WR= AWB_CCM_L_8,   0x019A // AWB_CCM_L_8
FIELD_WR= AWB_CCM_L_9,   0x0020 // AWB_CCM_L_9
FIELD_WR= AWB_CCM_L_10,  0x0033 // AWB_CCM_L_10
FIELD_WR= AWB_CCM_RL_0,  0x0100 // AWB_CCM_RL_0
FIELD_WR= AWB_CCM_RL_1,  0xFF9A // AWB_CCM_RL_1
FIELD_WR= AWB_CCM_RL_2,  0x0000 // AWB_CCM_RL_2
FIELD_WR= AWB_CCM_RL_3,  0x004D // AWB_CCM_RL_3
FIELD_WR= AWB_CCM_RL_4,  0xFFCD // AWB_CCM_RL_4
FIELD_WR= AWB_CCM_RL_5,  0xFFB8 // AWB_CCM_RL_5
FIELD_WR= AWB_CCM_RL_6,  0x004D // AWB_CCM_RL_6
FIELD_WR= AWB_CCM_RL_7,  0x0080 // AWB_CCM_RL_7
FIELD_WR= AWB_CCM_RL_8,  0xFF66 // AWB_CCM_RL_8
FIELD_WR= AWB_CCM_RL_9,  0x0008 // AWB_CCM_RL_9
FIELD_WR= AWB_CCM_RL_10, 0xFFF7 // AWB_CCM_RL_10

FIELD_WR= AWB_TG_MIN0, 210      // AWB_TG_MIN0
FIELD_WR= AWB_TG_MAX0, 238      // AWB_TG_MAX0

REG= 0x3244, 0x0328 	// AWB_CONFIG4, AWB fine tuning
REG= 0x323E, 0xC22C     // AWB_CONFIG1, AWB fine tuning, bits [11-15] controlled by MCU

///////////////////////////////////////////////////////////////////////////////
[EEPROM Lens Correction]///////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Note: this LSC is generated manually for this part - DO NOT USE the "FACTORY" label
LOAD_PROM=0xA8, PGA   // load the PGA from the Demo2 on-board EEPROM
BITFIELD=0x3210, 0x0008, 1 //PGA_ENABLE

[Lens Correction for unity gain]
REG=0x3658, 0x0010 //P_RD_P0Q0
REG=0x365A, 0x0000 //P_RD_P0Q1
REG=0x365C, 0x0000 //P_RD_P0Q2
REG=0x365E, 0x0000 //P_RD_P0Q3
REG=0x3660, 0x0000 //P_RD_P0Q4
REG=0x3680, 0x0000 //P_RD_P1Q0
REG=0x3682, 0x0000 //P_RD_P1Q1
REG=0x3684, 0x0000 //P_RD_P1Q2
REG=0x3686, 0x0000 //P_RD_P1Q3
REG=0x3688, 0x0000 //P_RD_P1Q4
REG=0x36A8, 0x0000 //P_RD_P2Q0
REG=0x36AA, 0x0000 //P_RD_P2Q1
REG=0x36AC, 0x0000 //P_RD_P2Q2
REG=0x36AE, 0x0000 //P_RD_P2Q3
REG=0x36B0, 0x0000 //P_RD_P2Q4
REG=0x36D0, 0x0000 //P_RD_P3Q0
REG=0x36D2, 0x0000 //P_RD_P3Q1
REG=0x36D4, 0x0000 //P_RD_P3Q2
REG=0x36D6, 0x0000 //P_RD_P3Q3
REG=0x36D8, 0x0000 //P_RD_P3Q4
REG=0x36F8, 0x0000 //P_RD_P4Q0
REG=0x36FA, 0x0000 //P_RD_P4Q1
REG=0x36FC, 0x0000 //P_RD_P4Q2
REG=0x36FE, 0x0000 //P_RD_P4Q3
REG=0x3700, 0x0000 //P_RD_P4Q4
REG=0x364E, 0x0010 //P_GR_P0Q0
REG=0x3650, 0x0000 //P_GR_P0Q1
REG=0x3652, 0x0000 //P_GR_P0Q2
REG=0x3654, 0x0000 //P_GR_P0Q3
REG=0x3656, 0x0000 //P_GR_P0Q4
REG=0x3676, 0x0000 //P_GR_P1Q0
REG=0x3678, 0x0000 //P_GR_P1Q1
REG=0x367A, 0x0000 //P_GR_P1Q2
REG=0x367C, 0x0000 //P_GR_P1Q3
REG=0x367E, 0x0000 //P_GR_P1Q4
REG=0x369E, 0x0000 //P_GR_P2Q0
REG=0x36A0, 0x0000 //P_GR_P2Q1
REG=0x36A2, 0x0000 //P_GR_P2Q2
REG=0x36A4, 0x0000 //P_GR_P2Q3
REG=0x36A6, 0x0000 //P_GR_P2Q4
REG=0x36C6, 0x0000 //P_GR_P3Q0
REG=0x36C8, 0x0000 //P_GR_P3Q1
REG=0x36CA, 0x0000 //P_GR_P3Q2
REG=0x36CC, 0x0000 //P_GR_P3Q3
REG=0x36CE, 0x0000 //P_GR_P3Q4
REG=0x36EE, 0x0000 //P_GR_P4Q0
REG=0x36F0, 0x0000 //P_GR_P4Q1
REG=0x36F2, 0x0000 //P_GR_P4Q2
REG=0x36F4, 0x0000 //P_GR_P4Q3
REG=0x36F6, 0x0000 //P_GR_P4Q4
REG=0x3662, 0x0010 //P_BL_P0Q0
REG=0x3664, 0x0000 //P_BL_P0Q1
REG=0x3666, 0x0000 //P_BL_P0Q2
REG=0x3668, 0x0000 //P_BL_P0Q3
REG=0x366A, 0x0000 //P_BL_P0Q4
REG=0x368A, 0x0000 //P_BL_P1Q0
REG=0x368C, 0x0000 //P_BL_P1Q1
REG=0x368E, 0x0000 //P_BL_P1Q2
REG=0x3690, 0x0000 //P_BL_P1Q3
REG=0x3692, 0x0000 //P_BL_P1Q4
REG=0x36B2, 0x0000 //P_BL_P2Q0
REG=0x36B4, 0x0000 //P_BL_P2Q1
REG=0x36B6, 0x0000 //P_BL_P2Q2
REG=0x36B8, 0x0000 //P_BL_P2Q3
REG=0x36BA, 0x0000 //P_BL_P2Q4
REG=0x36DA, 0x0000 //P_BL_P3Q0
REG=0x36DC, 0x0000 //P_BL_P3Q1
REG=0x36DE, 0x0000 //P_BL_P3Q2
REG=0x36E0, 0x0000 //P_BL_P3Q3
REG=0x36E2, 0x0000 //P_BL_P3Q4
REG=0x3702, 0x0000 //P_BL_P4Q0
REG=0x3704, 0x0000 //P_BL_P4Q1
REG=0x3706, 0x0000 //P_BL_P4Q2
REG=0x3708, 0x0000 //P_BL_P4Q3
REG=0x370A, 0x0000 //P_BL_P4Q4
REG=0x366C, 0x0010 //P_GB_P0Q0
REG=0x366E, 0x0000 //P_GB_P0Q1
REG=0x3670, 0x0000 //P_GB_P0Q2
REG=0x3672, 0x0000 //P_GB_P0Q3
REG=0x3674, 0x0000 //P_GB_P0Q4
REG=0x3694, 0x0000 //P_GB_P1Q0
REG=0x3696, 0x0000 //P_GB_P1Q1
REG=0x3698, 0x0000 //P_GB_P1Q2
REG=0x369A, 0x0000 //P_GB_P1Q3
REG=0x369C, 0x0000 //P_GB_P1Q4
REG=0x36BC, 0x0000 //P_GB_P2Q0
REG=0x36BE, 0x0000 //P_GB_P2Q1
REG=0x36C0, 0x0000 //P_GB_P2Q2
REG=0x36C2, 0x0000 //P_GB_P2Q3
REG=0x36C4, 0x0000 //P_GB_P2Q4
REG=0x36E4, 0x0000 //P_GB_P3Q0
REG=0x36E6, 0x0000 //P_GB_P3Q1
REG=0x36E8, 0x0000 //P_GB_P3Q2
REG=0x36EA, 0x0000 //P_GB_P3Q3
REG=0x36EC, 0x0000 //P_GB_P3Q4
REG=0x370C, 0x0000 //P_GB_P4Q0
REG=0x370E, 0x0000 //P_GB_P4Q1
REG=0x3710, 0x0000 //P_GB_P4Q2
REG=0x3712, 0x0000 //P_GB_P4Q3
REG=0x3714, 0x0000 //P_GB_P4Q4
REG=0x3644, 0x0000 //POLY_ORIGIN_C (don't care)
REG=0x3642, 0x0000 //POLY_ORIGIN_R (don't care)
STATE=Lens Correction Falloff, 85   // don't care
STATE=Lens Correction Center X, 776   // center of the array
STATE=Lens Correction Center Y, 564   // center of the array
BITFIELD=0x3210, 0x0008, 1 //PGA_ENABLE

[Lens Correction for Largan L992A3; 85% fall off; 10/19/07 17:20:10]
REG=0x3658, 0x7F2F //P_RD_P0Q0
REG=0x365A, 0x812B //P_RD_P0Q1
REG=0x365C, 0x0952 //P_RD_P0Q2
REG=0x365E, 0x3DCC //P_RD_P0Q3
REG=0x3660, 0xD453 //P_RD_P0Q4
REG=0x3680, 0x77A8 //P_RD_P1Q0
REG=0x3682, 0x2E90 //P_RD_P1Q1
REG=0x3684, 0x6530 //P_RD_P1Q2
REG=0x3686, 0xFED1 //P_RD_P1Q3
REG=0x3688, 0xACF3 //P_RD_P1Q4
REG=0x36A8, 0x26F3 //P_RD_P2Q0
REG=0x36AA, 0x0170 //P_RD_P2Q1
REG=0x36AC, 0xE8B5 //P_RD_P2Q2
REG=0x36AE, 0x1A33 //P_RD_P2Q3
REG=0x36B0, 0x9CB2 //P_RD_P2Q4
REG=0x36D0, 0x1371 //P_RD_P3Q0
REG=0x36D2, 0xBC11 //P_RD_P3Q1
REG=0x36D4, 0xC0D2 //P_RD_P3Q2
REG=0x36D6, 0xFF72 //P_RD_P3Q3
REG=0x36D8, 0x9FB7 //P_RD_P3Q4
REG=0x36F8, 0x8955 //P_RD_P4Q0
REG=0x36FA, 0xA2F2 //P_RD_P4Q1
REG=0x36FC, 0xB857 //P_RD_P4Q2
REG=0x36FE, 0xC276 //P_RD_P4Q3
REG=0x3700, 0x2E1B //P_RD_P4Q4
REG=0x364E, 0x0630 //P_GR_P0Q0
REG=0x3650, 0xC24B //P_GR_P0Q1
REG=0x3652, 0x4AB1 //P_GR_P0Q2
REG=0x3654, 0x4A0E //P_GR_P0Q3
REG=0x3656, 0xD813 //P_GR_P0Q4
REG=0x3676, 0x1B89 //P_GR_P1Q0
REG=0x3678, 0xB050 //P_GR_P1Q1
REG=0x367A, 0x22B1 //P_GR_P1Q2
REG=0x367C, 0x0693 //P_GR_P1Q3
REG=0x367E, 0x9BF4 //P_GR_P1Q4
REG=0x369E, 0x0793 //P_GR_P2Q0
REG=0x36A0, 0x9410 //P_GR_P2Q1
REG=0x36A2, 0xFAD5 //P_GR_P2Q2
REG=0x36A4, 0x55F3 //P_GR_P2Q3
REG=0x36A6, 0x5A36 //P_GR_P2Q4
REG=0x36C6, 0x1AF1 //P_GR_P3Q0
REG=0x36C8, 0xFCB0 //P_GR_P3Q1
REG=0x36CA, 0xC4B4 //P_GR_P3Q2
REG=0x36CC, 0x5114 //P_GR_P3Q3
REG=0x36CE, 0x1012 //P_GR_P3Q4
REG=0x36EE, 0xDFB4 //P_GR_P4Q0
REG=0x36F0, 0x35D3 //P_GR_P4Q1
REG=0x36F2, 0x8B56 //P_GR_P4Q2
REG=0x36F4, 0x96F7 //P_GR_P4Q3
REG=0x36F6, 0x633A //P_GR_P4Q4
REG=0x3662, 0x0010 //P_BL_P0Q0
REG=0x3664, 0x36C8 //P_BL_P0Q1
REG=0x3666, 0x1A51 //P_BL_P0Q2
REG=0x3668, 0x888D //P_BL_P0Q3
REG=0x366A, 0x92D3 //P_BL_P0Q4
REG=0x368A, 0x4D8C //P_BL_P1Q0
REG=0x368C, 0x9DF0 //P_BL_P1Q1
REG=0x368E, 0x0B30 //P_BL_P1Q2
REG=0x3690, 0x1B53 //P_BL_P1Q3
REG=0x3692, 0xCB93 //P_BL_P1Q4
REG=0x36B2, 0x73F2 //P_BL_P2Q0
REG=0x36B4, 0xD751 //P_BL_P2Q1
REG=0x36B6, 0xC4F5 //P_BL_P2Q2
REG=0x36B8, 0x0595 //P_BL_P2Q3
REG=0x36BA, 0x67D4 //P_BL_P2Q4
REG=0x36DA, 0x55B1 //P_BL_P3Q0
REG=0x36DC, 0xACD1 //P_BL_P3Q1
REG=0x36DE, 0xC8D4 //P_BL_P3Q2
REG=0x36E0, 0x1874 //P_BL_P3Q3
REG=0x36E2, 0xC816 //P_BL_P3Q4
REG=0x3702, 0x9694 //P_BL_P4Q0
REG=0x3704, 0x6874 //P_BL_P4Q1
REG=0x3706, 0xCC37 //P_BL_P4Q2
REG=0x3708, 0x96F8 //P_BL_P4Q3
REG=0x370A, 0x29DB //P_BL_P4Q4
REG=0x366C, 0x7F0F //P_GB_P0Q0
REG=0x366E, 0x66A3 //P_GB_P0Q1
REG=0x3670, 0x4371 //P_GB_P0Q2
REG=0x3672, 0x6DCD //P_GB_P0Q3
REG=0x3674, 0xD2B3 //P_GB_P0Q4
REG=0x3694, 0x7428 //P_GB_P1Q0
REG=0x3696, 0x0AB0 //P_GB_P1Q1
REG=0x3698, 0x6331 //P_GB_P1Q2
REG=0x369A, 0xCC51 //P_GB_P1Q3
REG=0x369C, 0xC394 //P_GB_P1Q4
REG=0x36BC, 0x0D53 //P_GB_P2Q0
REG=0x36BE, 0x5A0F //P_GB_P2Q1
REG=0x36C0, 0xE675 //P_GB_P2Q2
REG=0x36C2, 0x2AF1 //P_GB_P2Q3
REG=0x36C4, 0x0B76 //P_GB_P2Q4
REG=0x36E4, 0x4CF1 //P_GB_P3Q0
REG=0x36E6, 0x1F51 //P_GB_P3Q1
REG=0x36E8, 0xAAB5 //P_GB_P3Q2
REG=0x36EA, 0xC395 //P_GB_P3Q3
REG=0x36EC, 0x57B6 //P_GB_P3Q4
REG=0x370C, 0xEBB4 //P_GB_P4Q0
REG=0x370E, 0xD1D0 //P_GB_P4Q1
REG=0x3710, 0x94F7 //P_GB_P4Q2
REG=0x3712, 0xCDB6 //P_GB_P4Q3
REG=0x3714, 0x153B //P_GB_P4Q4
REG=0x3644, 0x0304 //POLY_ORIGIN_C
REG=0x3642, 0x0230 //POLY_ORIGIN_R
STATE=Lens Correction Falloff, 85
STATE=Lens Correction Center X, 776
STATE=Lens Correction Center Y, 564
BITFIELD=0x3210, 0x0008, 1 //PGA_ENABLE

[Lens Correction for Largan L992A3; 90% fall off]
REG=0x3658, 0x7FAF //P_RD_P0Q0
REG=0x365A, 0x9BEE //P_RD_P0Q1
REG=0x365C, 0x2972 //P_RD_P0Q2
REG=0x365E, 0x02D0 //P_RD_P0Q3
REG=0x3660, 0xC673 //P_RD_P0Q4
REG=0x3680, 0x880F //P_RD_P1Q0
REG=0x3682, 0x1B70 //P_RD_P1Q1
REG=0x3684, 0x1A12 //P_RD_P1Q2
REG=0x3686, 0xF132 //P_RD_P1Q3
REG=0x3688, 0xCA32 //P_RD_P1Q4
REG=0x36A8, 0x2833 //P_RD_P2Q0
REG=0x36AA, 0x700F //P_RD_P2Q1
REG=0x36AC, 0xCF35 //P_RD_P2Q2
REG=0x36AE, 0x3D14 //P_RD_P2Q3
REG=0x36B0, 0x2AF2 //P_RD_P2Q4
REG=0x36D0, 0x67B0 //P_RD_P3Q0
REG=0x36D2, 0x4731 //P_RD_P3Q1
REG=0x36D4, 0xB372 //P_RD_P3Q2
REG=0x36D6, 0xE615 //P_RD_P3Q3
REG=0x36D8, 0x14F7 //P_RD_P3Q4
REG=0x36F8, 0x9D94 //P_RD_P4Q0
REG=0x36FA, 0x0B52 //P_RD_P4Q1
REG=0x36FC, 0x9D37 //P_RD_P4Q2
REG=0x36FE, 0xDD17 //P_RD_P4Q3
REG=0x3700, 0x00BB //P_RD_P4Q4
REG=0x364E, 0x0790 //P_GR_P0Q0
REG=0x3650, 0xD90C //P_GR_P0Q1
REG=0x3652, 0x5EF1 //P_GR_P0Q2
REG=0x3654, 0x0C0F //P_GR_P0Q3
REG=0x3656, 0xC3D3 //P_GR_P0Q4
REG=0x3676, 0xF90E //P_GR_P1Q0
REG=0x3678, 0x9CD0 //P_GR_P1Q1
REG=0x367A, 0x3431 //P_GR_P1Q2
REG=0x367C, 0x7D71 //P_GR_P1Q3
REG=0x367E, 0x48D1 //P_GR_P1Q4
REG=0x369E, 0x0673 //P_GR_P2Q0
REG=0x36A0, 0x0952 //P_GR_P2Q1
REG=0x36A2, 0x80D6 //P_GR_P2Q2
REG=0x36A4, 0xAC54 //P_GR_P2Q3
REG=0x36A6, 0x3457 //P_GR_P2Q4
REG=0x36C6, 0x1950 //P_GR_P3Q0
REG=0x36C8, 0xA211 //P_GR_P3Q1
REG=0x36CA, 0x0315 //P_GR_P3Q2
REG=0x36CC, 0x4895 //P_GR_P3Q3
REG=0x36CE, 0xE077 //P_GR_P3Q4
REG=0x36EE, 0xA994 //P_GR_P4Q0
REG=0x36F0, 0x8D54 //P_GR_P4Q1
REG=0x36F2, 0xB993 //P_GR_P4Q2
REG=0x36F4, 0xF755 //P_GR_P4Q3
REG=0x36F6, 0x14BA //P_GR_P4Q4
REG=0x3662, 0x0130 //P_BL_P0Q0
REG=0x3664, 0x85AB //P_BL_P0Q1
REG=0x3666, 0x2EB1 //P_BL_P0Q2
REG=0x3668, 0x1BAB //P_BL_P0Q3
REG=0x366A, 0x8353 //P_BL_P0Q4
REG=0x368A, 0x93CF //P_BL_P1Q0
REG=0x368C, 0x9F70 //P_BL_P1Q1
REG=0x368E, 0x0FB2 //P_BL_P1Q2
REG=0x3690, 0x2692 //P_BL_P1Q3
REG=0x3692, 0xE2D2 //P_BL_P1Q4
REG=0x36B2, 0x0253 //P_BL_P2Q0
REG=0x36B4, 0x6911 //P_BL_P2Q1
REG=0x36B6, 0xFA75 //P_BL_P2Q2
REG=0x36B8, 0x8094 //P_BL_P2Q3
REG=0x36BA, 0x2CB7 //P_BL_P2Q4
REG=0x36DA, 0x0930 //P_BL_P3Q0
REG=0x36DC, 0x9550 //P_BL_P3Q1
REG=0x36DE, 0x6294 //P_BL_P3Q2
REG=0x36E0, 0x40B4 //P_BL_P3Q3
REG=0x36E2, 0x8E97 //P_BL_P3Q4
REG=0x3702, 0x9974 //P_BL_P4Q0
REG=0x3704, 0x83B4 //P_BL_P4Q1
REG=0x3706, 0x0293 //P_BL_P4Q2
REG=0x3708, 0x8EB6 //P_BL_P4Q3
REG=0x370A, 0x07FA //P_BL_P4Q4
REG=0x366C, 0x00D0 //P_GB_P0Q0
REG=0x366E, 0xF6AD //P_GB_P0Q1
REG=0x3670, 0x5191 //P_GB_P0Q2
REG=0x3672, 0x11D0 //P_GB_P0Q3
REG=0x3674, 0xBDD3 //P_GB_P0Q4
REG=0x3694, 0x838F //P_GB_P1Q0
REG=0x3696, 0x28D0 //P_GB_P1Q1
REG=0x3698, 0x52F1 //P_GB_P1Q2
REG=0x369A, 0x8CF3 //P_GB_P1Q3
REG=0x369C, 0x2972 //P_GB_P1Q4
REG=0x36BC, 0x12F3 //P_GB_P2Q0
REG=0x36BE, 0x6ED0 //P_GB_P2Q1
REG=0x36C0, 0x8096 //P_GB_P2Q2
REG=0x36C2, 0x9411 //P_GB_P2Q3
REG=0x36C4, 0x2057 //P_GB_P2Q4
REG=0x36E4, 0x5570 //P_GB_P3Q0
REG=0x36E6, 0xBF30 //P_GB_P3Q1
REG=0x36E8, 0x1015 //P_GB_P3Q2
REG=0x36EA, 0x66B3 //P_GB_P3Q3
REG=0x36EC, 0xF8F7 //P_GB_P3Q4
REG=0x370C, 0xCED4 //P_GB_P4Q0
REG=0x370E, 0x2393 //P_GB_P4Q1
REG=0x3710, 0x9955 //P_GB_P4Q2
REG=0x3712, 0xE717 //P_GB_P4Q3
REG=0x3714, 0x371A //P_GB_P4Q4
REG=0x3644, 0x02EC //POLY_ORIGIN_C
REG=0x3642, 0x0230 //POLY_ORIGIN_R
STATE=Lens Correction Falloff, 90
STATE=Lens Correction Center X, 752
STATE=Lens Correction Center Y, 564
BITFIELD=0x3210, 0x0008, 1 //PGA_ENABLE

///////////////////////////////////////////////////////////////////////////////
[Errata for Rev2: issue02]/////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
REG=0x3084, 0x240C
REG=0x3092, 0x0A4C
REG=0x3094, 0x4C4C
REG=0x3096, 0x4C54

///////////////////////////////////////////////////////////////////////////////
[Lens Calibration Setup]///////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
var8=1, 0x02, 0x000   // turn off AE, AWB, Flicker, and histogram
REG=0x3210, 0x0100    // turn off scaler, gamma, ccm, aperture, shading correction
delay=10
REG=0x3330, 0x0140    // enable 8+2 bypass and shading correction bypass
delay=10
var8=1, 0x15, 0x02    // enable video mode in context B
var8=1, 0x03, 0x02    // goto context B

///////////////////////////////////////////////////////////////////////////////
[AWB CCM Calibration setup]////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
VAR=11, 0x04, 0x0000 	// turn off histogram stretch HG_MAX_DLEVEL
VAR=3, 0x55, 0x0021 	// set digital gain to unity AWB_MODE *** AWB New Limits keep setting to 1 ***
VAR=1, 0x02, 0x0000 	// turn off AWB, AE, FD, and HG SEQ_MODE
var=1, 0x1d, 0x0000     // turn off AE in PREVIEW state
var=1, 0x1e, 0x0000     // turn off FD in PREVIEW state
var=1, 0x1f, 0x0000     // turn off AWB in PREVIEW state
var=1, 0x20, 0x0000     // turn off HG in PREVIEW state
var=1, 0x03, 0x0005     // REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100
BITFIELD=0x3210, 0x00A0, 0 // turn off gamma correction and color correction
REG=0x3028, 0x0008 	   // set global analog gain to unity ANALOGUE_GAIN_CODE_GLOBAL

///////////////////////////////////////////////////////////////////////////////
[Viewfinder ON]////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR = SEQ_CAP_MODE, VIDEO, 0     //capture parameters, VIDEO Off
FIELD_WR = SEQ_CMD, 1          //Back to preview

///////////////////////////////////////////////////////////////////////////////
[Viewfinder OFF]///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1     //capture parameters, VIDEO On
FIELD_WR = SEQ_CMD, 2          //Capture on

///////////////////////////////////////////////////////////////////////////////
[Video Capture ON]/////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1     //capture parameters, VIDEO On
FIELD_WR = SEQ_CMD, 2          //Capture on

///////////////////////////////////////////////////////////////////////////////
[Video Capture ON with Auto Functions]/////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1     //capture parameters, VIDEO On
FIELD_WR = SEQ_CAP_MODE, VIDEO_AE_ON, 1     //capture parameters, AE On
FIELD_WR = SEQ_CAP_MODE, VIDEO_AWB_ON, 1     //capture parameters, AWB On
FIELD_WR = SEQ_CAP_MODE, VIDEO_HG_ON, 1     //capture parameters, HG On
FIELD_WR = SEQ_CMD, 2          //Go Capture
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

///////////////////////////////////////////////////////////////////////////////
[Video Capture OFF]////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR = SEQ_CMD, 1          //Back to preview

///////////////////////////////////////////////////////////////////////////////
[2D aperture correction Disable]///////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR=HG_LLMODE, CLUSTERDC_VS_GAINS, 0   // turn off ClusterDC vs Gains
var=1, 0x03, 0x0005   // REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100
BITFIELD=0x3210, 0x0010, 0

///////////////////////////////////////////////////////////////////////////////
[2D aperture correction Enable]////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR=HG_LLMODE, CLUSTERDC_VS_GAINS, 1   // turn on ClusterDC vs Gains and let FW controls it
var=1, 0x03, 0x0005   // REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

///////////////////////////////////////////////////////////////////////////////
[Color Bar Test Pattern Disable]///////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR = MODE_COMMONMODESETTINGS_TEST_MODE, 0x00	//(0) MODE_COMMONMODESETTINGS_TEST_MODE
FIELD_WR = SEQ_CMD, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

///////////////////////////////////////////////////////////////////////////////
[Color Bar Test Pattern: flat field]///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR = MODE_COMMONMODESETTINGS_TEST_MODE, 0x01	//(1) MODE_COMMONMODESETTINGS_TEST_MODE
FIELD_WR = SEQ_CMD, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

///////////////////////////////////////////////////////////////////////////////
[Color Bar Test Pattern: vertical ramp]////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR = MODE_COMMONMODESETTINGS_TEST_MODE, 0x02	//(2) MODE_COMMONMODESETTINGS_TEST_MODE
FIELD_WR = SEQ_CMD, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

///////////////////////////////////////////////////////////////////////////////
[Color Bar Test Pattern: color bar ramp]///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR = MODE_COMMONMODESETTINGS_TEST_MODE, 0x03	//(3) MODE_COMMONMODESETTINGS_TEST_MODE
FIELD_WR = SEQ_CMD, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

///////////////////////////////////////////////////////////////////////////////
[Color Bar Test Pattern: vertical strips]//////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR = MODE_COMMONMODESETTINGS_TEST_MODE, 0x04	//(4) MODE_COMMONMODESETTINGS_TEST_MODE
FIELD_WR = SEQ_CMD, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

///////////////////////////////////////////////////////////////////////////////
[Color Bar Test Pattern: pseudo random]////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR = MODE_COMMONMODESETTINGS_TEST_MODE, 0x05	//(5) MODE_COMMONMODESETTINGS_TEST_MODE
FIELD_WR = SEQ_CMD, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

///////////////////////////////////////////////////////////////////////////////
[Color Bar Test Pattern: horizontal strips]////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
FIELD_WR = MODE_COMMONMODESETTINGS_TEST_MODE, 0x06	//(6) MODE_COMMONMODESETTINGS_TEST_MODE
FIELD_WR = SEQ_CMD, 0x05	//(5) REFRESH
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=100

