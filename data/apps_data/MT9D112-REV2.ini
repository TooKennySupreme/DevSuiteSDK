;**************************************************************************************       
; Copyright 2009 Aptina Imaging Corporation. All rights reserved.                             
;                                                                                             
;                                                                                             
; No permission to use, copy, modify, or distribute this software and/or                      
; its documentation for any purpose has been granted by Aptina Imaging Corporation.           
; If any such permission has been granted ( by separate agreement ), it                       
; is required that the above copyright notice appear in all copies and                        
; that both that copyright notice and this permission notice appear in                        
; supporting documentation, and that the name of Aptina Imaging Corporation or any            
; of its trademarks may not be used in advertising or publicity pertaining                    
; to distribution of the software without specific, written prior permission.                 
;                                                                                             
;                                                                                             
;      This software and any associated documentation are provided "AS IS" and                
;      without warranty of any kind.   APTINA IMAGING CORPORATION EXPRESSLY DISCLAIMS         
;      ALL WARRANTIES EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, NONINFRINGEMENT       
;      OF THIRD PARTY RIGHTS, AND ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS        
;      FOR A PARTICULAR PURPOSE.  APTINA DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED        
;      IN THIS SOFTWARE WILL MEET YOUR REQUIREMENTS, OR THAT THE OPERATION OF THIS SOFTWARE   
;      WILL BE UNINTERRUPTED OR ERROR-FREE.  FURTHERMORE, APTINA DOES NOT WARRANT OR          
;      MAKE ANY REPRESENTATIONS REGARDING THE USE OR THE RESULTS OF THE USE OF ANY            
;      ACCOMPANYING DOCUMENTATION IN TERMS OF ITS CORRECTNESS, ACCURACY, RELIABILITY,         
;      OR OTHERWISE.                                                                          
;*************************************************************************************/       
; Default INI file for the A-2020SOC-REV2 (Chip ID 0x1519)
;
; $Revision: 23722 $
; $Date: 2010-03-09 18:06:03 -0800 (Tue, 09 Mar 2010) $ 
;
; This file holds groups of register presets (sections) specific for this sensor. The 
; presets allow you to overwrite the power-on default settings with optimized register 
; settings. 
; The [Demo Initialization] section contains all optimized register settings for running
; the sensor in the demo environment. Other sections include settings optimized for a
; variety of situations like: Running at different master clock speeds, running under
; different lighting situations, running with different lenses, etc.
; Most of the demonstration software (DevWare, SensorDemo, ...) make use of this file
; to load and store the user presets.
;
; Keyname description:
; REG      = assign a new register value
; BITFIELD = do a READ-MODIFY-WRITE to part of a register. The part is defined as a mask.
; FIELD_WR = Write any register, variable or bitfield, specified by its symbol name
; LOAD     = load an alternate section from this section
; STATE    = set non-register state
; DELAY    = delay a certain amount of milliseconds before continuing 
; POLL_REG = Read a register a specified number of times, or until the register
;            value no longer meets a specified condition. You specify the
;            register by its address, and it only works with simple registers.
;            You also specify a delay between each iteration of the loop.
; POLL_FIELD = Like POLL_REG except you specify the register by its symbol name
;            as defined in the sensor data file. POLL_FIELD works with any kind
;            of register or variable.
;
; Keyname format:
; REG      = [<page>,] <address>, <value>             //<comment>
; BITFIELD = [<page>,] <address>, <mask>, <value>
;            Some examples: 
;            BITFIELD=2, 0x05, 0x0020, 1 //for register 5 on page 2, set the 6th bit to 1
;            BITFIELD=0x06, 0x000F, 0    //for register 6, clear the first 4 bits
; FIELD_WR = <registername>, [<bitfieldname>,] <value>
; LOAD     = <section>
; STATE    = <state>, <value>
; DELAY    = <milliseconds>
; POLL_REG = [<page>,]<address>,<mask>,<condition>,DELAY=<milliseconds>,TIMEOUT=<count> //<comment>
;            Example:  Poll every 50ms, stop when value <= 8 or after 5 times (250ms).
;            POLL_REG= 2, 0x3F, 0xFFFF, >8, DELAY=50, TIMEOUT=5
; POLL_FIELD = <registername>, [<bitfieldname>,] <condition>, DELAY=<milliseconds>, TIMEOUT=<count> //<comment>
;            Example:  Poll every 10 ms, stop when the value = 0, or after 500ms.
;            POLL_FIELD= SEQ_CMD, !=0, DELAY=10, TIMEOUT=50
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developer's guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <registername> Name of a register or variable as defined the sensor data (.sdat) file
; <bitfieldname> Optional name of a bitfield
; <condition>    <  <=  ==  !=  >  or  >=  followed by a numerical value
; <count>        Number of iterations of the polling loop
; <section>      the name of another section to load
; <state>        non-register program state names [do not modify]
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .ini file
;
;*************************************************************************************/

[Reset]
//-------------------------------------
// Reset Image Sensor by Resetting MCU
//-------------------------------------
FIELD_WR=MCU_BOOT_MODE, RESET_MCU, 1  //RESET_MCU  stop MCU
FIELD_WR=MCU_BOOT_MODE, RESET_MCU, 0  //RESET_MCU  start MCU
DELAY=100

[Demo Initialization]
//-----------------------------------------------------------
// This Section Loads all the defaults from the sub-sections
//-----------------------------------------------------------
LOAD=Powerup
DELAY=500
BITFIELD=0x3386, 0x0001, 1 //set MCU reset bit (0x3386(0) = 1)
LOAD=1_2_3 Patch
DELAY=500
BITFIELD=0x3386, 0x0001, 0 //clear MCU reset bit (0x3386(0) = 0)

// clear 0x104D
REG=0x338C, 0x104D //  MCU_ADDRESS
REG=0x3390, 0x0000 //  MCU_DATA_0

// poll seq.state = 3 
POLL_FIELD = SEQ_STATE,!=3,DELAY=10,TIMEOUT=10

LOAD=Run Patch
//LOAD=PLL Setup 24Mhz/80Mhz Out
LOAD=Lens Correction_Largan 971A
LOAD=LUT_Moderate
LOAD=AE
LOAD=Mode
LOAD=Sequencer_Optimized_HiSat_Sharp
LOAD=Noise Reduction Test
;LOAD=Low Power Preview 15 FPS
LOAD=State Setup
LOAD=Refresh

;**************************************************************
; This patch fixes the "1154_line" issue by moving ae.wakeUpLine to 
; the bottom of active frame. 
; New position of ae.wakeUpLine defined by variable 'deltaA' or 'deltaB' as
; ae.wakeUpLine = window.height - delta;
; Variable 'test' - old/new behaviour switch 
;
;	delta = deltaA;
;	if (Mode.context == B)
;		delta = deltaB;
;	
;	if (test > 0)
;	{
;	    ((voidFuncByteSizeByte)Mode.pModeVMT->pGetImageSize)(Mode.context, &win0, 0);
;		ae.wakeUpLine = win0.height - delta;
;	}
;  
;
; 'test' = 1  - allocated at 0x0321 
; 'deltaA' = 10 - allocated at 0x0322
; 'deltaB' = 10 - allocated at 0x0323
;**************************************************************
[1_2_3 Patch]
REG=0x338C, 0x0400 	// MCU_ADDRESS
REG=0x3390, 0x308F 	// MCU_DATA_0
REG=0x3392, 0xC3FF 	// MCU_DATA_1
REG=0x3394, 0xED8F 	// MCU_DATA_2
REG=0x3396, 0x358F 	// MCU_DATA_3
REG=0x3398, 0x188F 	// MCU_DATA_4
REG=0x339A, 0x308F 	// MCU_DATA_5
REG=0x339C, 0xC300 	// MCU_DATA_6
REG=0x339E, 0x158F 	// MCU_DATA_7
REG=0x338C, 0x0410 	// MCU_ADDRESS
REG=0x3390, 0xCC00 	// MCU_DATA_0
REG=0x3392, 0x07BD 	// MCU_DATA_1
REG=0x3394, 0x0560 	// MCU_DATA_2
REG=0x3396, 0xBD9E 	// MCU_DATA_3
REG=0x3398, 0x9FF6 	// MCU_DATA_4
REG=0x339A, 0x0322 	// MCU_DATA_5
REG=0x339C, 0x30E7 	// MCU_DATA_6
REG=0x339E, 0x0AF6 	// MCU_DATA_7
REG=0x338C, 0x0420 	// MCU_ADDRESS
REG=0x3390, 0x0239 	// MCU_DATA_0
REG=0x3392, 0xC101 	// MCU_DATA_1
REG=0x3394, 0x2605 	// MCU_DATA_2
REG=0x3396, 0xF603 	// MCU_DATA_3
REG=0x3398, 0x23E7 	// MCU_DATA_4
REG=0x339A, 0x0A7D 	// MCU_DATA_5
REG=0x339C, 0x0321 	// MCU_DATA_6
REG=0x339E, 0x2720 	// MCU_DATA_7
REG=0x338C, 0x0430 	// MCU_ADDRESS
REG=0x3390, 0xF602 	// MCU_DATA_0
REG=0x3392, 0x39E7 	// MCU_DATA_1
REG=0x3394, 0x028F 	// MCU_DATA_2
REG=0x3396, 0xC300 	// MCU_DATA_3
REG=0x3398, 0x0B30 	// MCU_DATA_4
REG=0x339A, 0xED00 	// MCU_DATA_5
REG=0x339C, 0xFE02 	// MCU_DATA_6
REG=0x339E, 0x37EE 	// MCU_DATA_7
REG=0x338C, 0x0440 	// MCU_ADDRESS
REG=0x3390, 0x045F 	// MCU_DATA_0
REG=0x3392, 0xAD00 	// MCU_DATA_1
REG=0x3394, 0x30E6 	// MCU_DATA_2
REG=0x3396, 0x0A4F 	// MCU_DATA_3
REG=0x3398, 0xED08 	// MCU_DATA_4
REG=0x339A, 0xEC11 	// MCU_DATA_5
REG=0x339C, 0xA308 	// MCU_DATA_6
REG=0x339E, 0xDD56 	// MCU_DATA_7
REG=0x338C, 0x0450 	// MCU_ADDRESS
REG=0x3390, 0x30C6 	// MCU_DATA_0
REG=0x3392, 0x133A 	// MCU_DATA_1
REG=0x3394, 0x3539 	// MCU_DATA_2
REG=0x3396, 0x3C3C 	// MCU_DATA_3
REG=0x3398, 0x34BD 	// MCU_DATA_4
REG=0x339A, 0xAB16 	// MCU_DATA_5
REG=0x339C, 0x30E7 	// MCU_DATA_6
REG=0x339E, 0x02CC 	// MCU_DATA_7
REG=0x338C, 0x0460 	// MCU_ADDRESS
REG=0x3390, 0x011F 	// MCU_DATA_0
REG=0x3392, 0xBD82 	// MCU_DATA_1
REG=0x3394, 0xCF5F 	// MCU_DATA_2
REG=0x3396, 0x30ED 	// MCU_DATA_3
REG=0x3398, 0x03CC 	// MCU_DATA_4
REG=0x339A, 0x011F 	// MCU_DATA_5
REG=0x339C, 0xED00 	// MCU_DATA_6
REG=0x339E, 0xF601 	// MCU_DATA_7
REG=0x338C, 0x0470 	// MCU_ADDRESS
REG=0x3390, 0xB94F 	// MCU_DATA_0
REG=0x3392, 0xE303 	// MCU_DATA_1
REG=0x3394, 0xBD82 	// MCU_DATA_2
REG=0x3396, 0xBB30 	// MCU_DATA_3
REG=0x3398, 0xE602 	// MCU_DATA_4
REG=0x339A, 0x3838 	// MCU_DATA_5
REG=0x339C, 0x3139 	// MCU_DATA_6
REG=0x339E, 0xF601 	// MCU_DATA_7
REG=0x338C, 0x0480 	// MCU_ADDRESS
REG=0x3390, 0xB9F1 	// MCU_DATA_0
REG=0x3392, 0x01BB 	// MCU_DATA_1
REG=0x3394, 0x2306 	// MCU_DATA_2
REG=0x3396, 0xF601 	// MCU_DATA_3
REG=0x3398, 0xBBF7 	// MCU_DATA_4
REG=0x339A, 0x01B9 	// MCU_DATA_5
REG=0x339C, 0xF601 	// MCU_DATA_6
REG=0x339E, 0xB9F1 	// MCU_DATA_7
REG=0x338C, 0x0490 	// MCU_ADDRESS
REG=0x3390, 0x01BA 	// MCU_DATA_0
REG=0x3392, 0x2406 	// MCU_DATA_1
REG=0x3394, 0xF601 	// MCU_DATA_2
REG=0x3396, 0xBAF7 	// MCU_DATA_3
REG=0x3398, 0x01B9 	// MCU_DATA_4
REG=0x339A, 0xCE01 	// MCU_DATA_5
REG=0x339C, 0x4F1C 	// MCU_DATA_6
REG=0x339E, 0x5308 	// MCU_DATA_7
REG=0x338C, 0x04A0 	// MCU_ADDRESS
REG=0x3390, 0x1302 	// MCU_DATA_0
REG=0x3392, 0x0406 	// MCU_DATA_1
REG=0x3394, 0xEE00 	// MCU_DATA_2
REG=0x3396, 0xEE06 	// MCU_DATA_3
REG=0x3398, 0xAD00 	// MCU_DATA_4
REG=0x339A, 0x393C 	// MCU_DATA_5
REG=0x339C, 0x3C3C 	// MCU_DATA_6
REG=0x339E, 0x3CC6 	// MCU_DATA_7
REG=0x338C, 0x04B0 	// MCU_ADDRESS
REG=0x3390, 0x01F7 	// MCU_DATA_0
REG=0x3392, 0x0321 	// MCU_DATA_1
REG=0x3394, 0xC60A 	// MCU_DATA_2
REG=0x3396, 0xF703 	// MCU_DATA_3
REG=0x3398, 0x22F7 	// MCU_DATA_4
REG=0x339A, 0x0323 	// MCU_DATA_5
REG=0x339C, 0xCC03 	// MCU_DATA_6
REG=0x339E, 0x0330 	// MCU_DATA_7
REG=0x338C, 0x04C0 	// MCU_ADDRESS
REG=0x3390, 0xED04 	// MCU_DATA_0
REG=0x3392, 0xFE10 	// MCU_DATA_1
REG=0x3394, 0x50EC 	// MCU_DATA_2
REG=0x3396, 0x04FD 	// MCU_DATA_3
REG=0x3398, 0x02FF 	// MCU_DATA_4
REG=0x339A, 0xFE02 	// MCU_DATA_5
REG=0x339C, 0xFFEC 	// MCU_DATA_6
REG=0x339E, 0x00FD 	// MCU_DATA_7
REG=0x338C, 0x04D0 	// MCU_ADDRESS
REG=0x3390, 0x0301 	// MCU_DATA_0
REG=0x3392, 0x5F4F 	// MCU_DATA_1
REG=0x3394, 0x30ED 	// MCU_DATA_2
REG=0x3396, 0x06EC 	// MCU_DATA_3
REG=0x3398, 0x0605 	// MCU_DATA_4
REG=0x339A, 0xF303 	// MCU_DATA_5
REG=0x339C, 0x018F 	// MCU_DATA_6
REG=0x339E, 0xEC00 	// MCU_DATA_7
REG=0x338C, 0x04E0 	// MCU_ADDRESS
REG=0x3390, 0x30ED 	// MCU_DATA_0
REG=0x3392, 0x00EC 	// MCU_DATA_1
REG=0x3394, 0x0605 	// MCU_DATA_2
REG=0x3396, 0xE304 	// MCU_DATA_3
REG=0x3398, 0x188F 	// MCU_DATA_4
REG=0x339A, 0xEC00 	// MCU_DATA_5
REG=0x339C, 0x18ED 	// MCU_DATA_6
REG=0x339E, 0x00EC 	// MCU_DATA_7
REG=0x338C, 0x04F0 	// MCU_ADDRESS
REG=0x3390, 0x06C3 	// MCU_DATA_0
REG=0x3392, 0x0001 	// MCU_DATA_1
REG=0x3394, 0xED06 	// MCU_DATA_2
REG=0x3396, 0x8300 	// MCU_DATA_3
REG=0x3398, 0x0F25 	// MCU_DATA_4
REG=0x339A, 0xDCEE 	// MCU_DATA_5
REG=0x339C, 0x04CC 	// MCU_DATA_6
REG=0x339E, 0x0400 	// MCU_DATA_7
REG=0x338C, 0x0500 	// MCU_ADDRESS
REG=0x3390, 0xED04 	// MCU_DATA_0
REG=0x3392, 0xCC03 	// MCU_DATA_1
REG=0x3394, 0x03DD 	// MCU_DATA_2
REG=0x3396, 0x52CC 	// MCU_DATA_3
REG=0x3398, 0x0328 	// MCU_DATA_4
REG=0x339A, 0x30ED 	// MCU_DATA_5
REG=0x339C, 0x02FE 	// MCU_DATA_6
REG=0x339E, 0x1050 	// MCU_DATA_7
REG=0x338C, 0x0510 	// MCU_ADDRESS
REG=0x3390, 0xEC06 	// MCU_DATA_0
REG=0x3392, 0xFD03 	// MCU_DATA_1
REG=0x3394, 0x24FE 	// MCU_DATA_2
REG=0x3396, 0x0324 	// MCU_DATA_3
REG=0x3398, 0xEC00 	// MCU_DATA_4
REG=0x339A, 0xFD03 	// MCU_DATA_5
REG=0x339C, 0x265F 	// MCU_DATA_6
REG=0x339E, 0x4F30 	// MCU_DATA_7
REG=0x338C, 0x0520 	// MCU_ADDRESS
REG=0x3390, 0xED06 	// MCU_DATA_0
REG=0x3392, 0xEC06 	// MCU_DATA_1
REG=0x3394, 0x05F3 	// MCU_DATA_2
REG=0x3396, 0x0326 	// MCU_DATA_3
REG=0x3398, 0x8FEC 	// MCU_DATA_4
REG=0x339A, 0x0030 	// MCU_DATA_5
REG=0x339C, 0xED00 	// MCU_DATA_6
REG=0x339E, 0xEC06 	// MCU_DATA_7
REG=0x338C, 0x0530 	// MCU_ADDRESS
REG=0x3390, 0x05E3 	// MCU_DATA_0
REG=0x3392, 0x0218 	// MCU_DATA_1
REG=0x3394, 0x8FEC 	// MCU_DATA_2
REG=0x3396, 0x0018 	// MCU_DATA_3
REG=0x3398, 0xED00 	// MCU_DATA_4
REG=0x339A, 0xEC06 	// MCU_DATA_5
REG=0x339C, 0xC300 	// MCU_DATA_6
REG=0x339E, 0x01ED 	// MCU_DATA_7
REG=0x338C, 0x0540 	// MCU_ADDRESS
REG=0x3390, 0x0683 	// MCU_DATA_0
REG=0x3392, 0x000A 	// MCU_DATA_1
REG=0x3394, 0x25DC 	// MCU_DATA_2
REG=0x3396, 0xEE02 	// MCU_DATA_3
REG=0x3398, 0xCC04 	// MCU_DATA_4
REG=0x339A, 0x56ED 	// MCU_DATA_5
REG=0x339C, 0x0230 	// MCU_DATA_6
REG=0x339E, 0xEE02 	// MCU_DATA_7
REG=0x338C, 0x0550 	// MCU_ADDRESS
REG=0x3390, 0xCC04 	// MCU_DATA_0
REG=0x3392, 0x7EED 	// MCU_DATA_1
REG=0x3394, 0x10CC 	// MCU_DATA_2
REG=0x3396, 0x0328 	// MCU_DATA_3
REG=0x3398, 0xFD01 	// MCU_DATA_4
REG=0x339A, 0x4F38 	// MCU_DATA_5
REG=0x339C, 0x3838 	// MCU_DATA_6
REG=0x339E, 0x3839 	// MCU_DATA_7
REG=0x338C, 0x0560 	// MCU_ADDRESS
REG=0x3390, 0x3736 	// MCU_DATA_0
REG=0x3392, 0x8F30 	// MCU_DATA_1
REG=0x3394, 0xE300 	// MCU_DATA_2
REG=0x3396, 0x8F18 	// MCU_DATA_3
REG=0x3398, 0x8F18 	// MCU_DATA_4
REG=0x339A, 0x3018 	// MCU_DATA_5
REG=0x339C, 0xE300 	// MCU_DATA_6
REG=0x339E, 0x188F 	// MCU_DATA_7
REG=0x338C, 0x0570 	// MCU_ADDRESS
REG=0x3390, 0x3233 	// MCU_DATA_0
REG=0x3392, 0x36A6 	// MCU_DATA_1
REG=0x3394, 0x0018 	// MCU_DATA_2
REG=0x3396, 0xA700 	// MCU_DATA_3
REG=0x3398, 0x0918 	// MCU_DATA_4
REG=0x339A, 0x09C0 	// MCU_DATA_5
REG=0x339C, 0x0124 	// MCU_DATA_6
REG=0x339E, 0xF432 	// MCU_DATA_7
REG=0x338C, 0x0580 	// MCU_ADDRESS
REG=0x3390, 0x8001 	// MCU_DATA_0
REG=0x3392, 0x24EE 	// MCU_DATA_1
REG=0x338C, 0x8584 	// MCU_ADDRESS
REG=0x3390, 0x0039 	// MCU_DATA_0

[Run Patch]
VAR=0, 0x03, 0x04AB	// MON_ARG1
VAR8=0, 0x02, 0x01	// MON_CMD



[Powerup]
//---------------------------------------------
// Per default the sensor comes up in standby, 
// this enables the image output
//---------------------------------------------
REG=0x301A,0x0ACC                  //Reset Register
FIELD_WR= STANDBY_CONTROL,0x0008   //Allow Standby

[Refresh]
//---------------------------------------
// This Section refreshes the variables
//---------------------------------------
VAR8=0x01, 0x03, 0x0005 	//Refresh
DELAY=500			//Wait


[State Setup]
//---------------------------------------
//These settings are used by DevWare to 
//Desplay the correct framerate and select
//The correct image capture mode
//----------------------------------------
STATE=Still Mode, 1
//STATE=Num Capture Frames, 4
//STATE=Still Capture Average, 1
STATE=Save 24bpp BMP, 1
STATE=Save RAW, 0
STATE=Save TXT, 1
STATE=Save HEX, 0
STATE=Save RAW TIFF, 0
STATE=Save 48bpp COLOR TIFF, 0
STATE=Save RAW JPEG, 0
STATE=Save BMP Info, 0
STATE=Display Zoom, 4

[Viewfinder ON]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 0 //VIDEO Off
FIELD_WR = SEQ_CMD, 1          //Back to preview

[Viewfinder OFF]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1 //VIDEO On
FIELD_WR = SEQ_CMD, 2          //Capture on

[Video Capture ON]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1 //VIDEO On
FIELD_WR = SEQ_CMD, 2          //Capture on

[Video Capture OFF]
FIELD_WR = SEQ_CMD, 1          //Back to preview

[Enable Capture with LED Flash]
VAR8=1, 0x06, 1 // SEQ_SHARED_PARAMS_FLASH_TYPE
VAR8=1, 0x35, 1 // SEQ_PREVIEW_PAR_LEAVE_FLASH
VAR8=1, 0x3C, 1 // SEQ_CAP_PAR_ENTER_FLASH

[Disable Capture with Flash]
VAR8=1, 0x06, 0 // SEQ_SHARED_PARAMS_FLASH_TYPE
VAR8=1, 0x35, 0 // SEQ_PREVIEW_PAR_LEAVE_FLASH
VAR8=1, 0x3C, 0 // SEQ_CAP_PAR_ENTER_FLASH
 
[Enable stepper motor AF]
VAR8=6, 0x02, 130 // AFM_TYPE
VAR8=1, 0x2C, 1   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x03, 5   // SEQ_CMD
DELAY=1000
VAR8=1, 0x2C, 0   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x3A, 1   // SEQ_CAP_PAR_ENTER_AF

[Enable helimorph AF]
VAR8=6, 0x02, 129 // AFM_TYPE
VAR8=1, 0x2C, 1   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x03, 5   // SEQ_CMD
DELAY=1000
VAR8=1, 0x2C, 0   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x3A, 1   // SEQ_CAP_PAR_ENTER_AF

[Enable AD5398 AF]
VAR8=6, 0x02, 131 //AFM_TYPE
VAR8=1, 0x03, 5	  //SEQ_CMD
DELAY=500
VAR8=6, 0x0A, 0x80	// AFM_CUSTCTRL
VAR8=1, 0x02, 0x001F	// SEQ_CMD
VAR8=6, 0x22, 0x0018	// AFM_SI_SLAVEADDR

[Disable AF]
VAR8=6, 0x02, 128 // AFM_TYPE
VAR8=1, 0x2C, 0   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x03, 5   // SEQ_CMD
VAR8=1, 0x3A, 0   // SEQ_CAP_PAR_ENTER_AF
 
[Refocus]
VAR8=1, 0x02, 31  // SEQ_MODE
VAR8=5, 0x04, 1   // AF_MODE

[Mode]
//-------------------------------------------
// This Section sets up Preview/Capture Mode
//
// Preview: 640 x 480 at 15 FPS
// Capture: 1600 x 1200 at 15 FPS
//-------------------------------------------
VAR  = 7, 3, 640         //Output Width (A) = 640
VAR  = 7, 5, 480        //Output Height (A) = 480
VAR  = 7, 7, 0x0640         //Output Width (B) = 1600
VAR  = 7, 9, 0x04B0         //Output Height (B) = 1200
VAR  = 7, 13, 0x000         //Row Start (A) = 0
VAR  = 7, 15, 0x000         //Column Start (A) = 0
VAR  = 7, 17, 0x4BD         //Row End (A) = 1213
VAR  = 7, 19, 0x64D         //Column End (A) = 1613
VAR  = 7, 21, 0x4CE         //Extra Delay (A) = 1230
VAR  = 7, 23, 0x2111        //Row Speed (A) = 8465
VAR  = 7, 25, 0x046C        //Read Mode (A) = 1132
VAR  = 7, 27, 0x024F        //sensor_sample_time_pck (A) = 591
VAR  = 7, 29, 0x0102        //sensor_fine_correction (A) = 258
VAR  = 7, 31, 0x0279        //sensor_fine_IT_min (A) = 633
VAR  = 7, 33, 0x0155        //sensor_fine_IT_max_margin (A) = 341
VAR  = 7, 35, 0x04FF        //Frame Lines (A) = 1279
VAR  = 7, 37, 0x0824        //Line Length (A) = 2084
VAR  = 7, 39, 0x2020        //sensor_dac_id_4_5 (A) = 8224
VAR  = 7, 41, 0x2020        //sensor_dac_id_6_7 (A) = 8224
VAR  = 7, 43, 0x1020        //sensor_dac_id_8_9 (A) = 4128
VAR  = 7, 45, 0x2007        //sensor_dac_id_10_11 (A) = 8199
VAR  = 7, 47, 0x004         //Row Start (B) = 4
VAR  = 7, 49, 0x004         //Column Start (B) = 4
VAR  = 7, 51, 0x4BB         //Row End (B) = 1211
VAR  = 7, 53, 0x64B         //Column End (B) = 1611
VAR  = 7, 55, 0x4CE         //Extra Delay (B) = 1230
VAR  = 7, 57, 0x2111        //Row Speed (B) = 8465
VAR  = 7, 59, 0x0024        //Read Mode (B) = 36
VAR  = 7, 61, 0x0120        //sensor_sample_time_pck (B) = 288
VAR  = 7, 69, 0x04FF        //Frame Lines (B) = 1279
VAR  = 7, 71, 0x0824        //Line Length (B) = 2084
VAR  = 7, 81, 0x0000        //Crop_X0 (A) = 0
VAR  = 7, 83, 0x0320        //Crop_X1 (A) = 800
VAR  = 7, 85, 0x0000        //Crop_Y0 (A) = 0
VAR  = 7, 87, 0x0258        //Crop_Y1 (A) = 600
VAR  = 7, 95, 0x0000        //Crop_X0 (B) = 0
VAR  = 7, 97, 0x0640        //Crop_X1 (B) = 1600
VAR  = 7, 99, 0x0000        //Crop_Y0 (B) = 0
VAR  = 7, 101, 0x04B0       //Crop_Y1 (B) = 1200
VAR  = 2, 46, 0x00A0        //R9 Step = 160
VAR8 = 4, 8, 0x1F           //search_f1_50 = 31
VAR8 = 4, 9, 0x21           //search_f2_50 = 33
VAR8 = 4, 10, 0x25          //search_f1_60 = 37
VAR8 = 4, 11, 0x27          //search_f2_60 = 39
VAR  = 4, 17, 0x00A0        //R9_Step_60_A = 160
VAR  = 4, 19, 0x00C0        //R9_Step_50_A = 192
VAR  = 4, 21, 0x00A0        //R9_Step_60_B = 160
VAR  = 4, 23, 0x00C0        //R9_Step_50_B = 192
VAR=0x07, 0x99, 0x6408 	    //MODE_SPEC_EFFECTS_A  Dither for Noise Reduction
VAR=0x07, 0x9B, 0x6408 	    //MODE_SPEC_EFFECTS_B  Dither for Noise Reduction
VAR8 = 1, 3, 0x05        //Refresh Sequencer = 5
DELAY = 500
VAR8 = 1, 3, 0x06        //Refresh Sequencer Mode = 6


[PLL Setup 24Mhz/80Mhz Out]
//----------------------------------------------
// This Section sets up the PLL for en external
// Masterclock of 24 MHZ and an internal clock
// of 80 MHz.
//----------------------------------------------
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: BYPASS PLL = 36617
REG = 0, 0x341C, 0x0250        //PLL Control 1 = 592
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: PLL ON, bypassed = 36617
DELAY = 5	      	      // More than ample time to allow PLL to lock
REG = 0, 0x341E, 0x8F08        //PLL/ Clk_in control: USE PLL = 36616
//STATE=Master Clock, 80000000
REG=1, 0x3214, 0x06E6 	      //default 0x0480  -> make Slope work for 80 MHz Mclk

[PLL Setup 48Mhz In/80Mhz Out]
//----------------------------------------------
// This Section sets up the PLL for en external
// Masterclock of 48 MHZ and an internal clock
// of 80 MHz.
//----------------------------------------------
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: BYPASS PLL = 36617
REG = 0, 0x341C, 0x0550        //PLL Set M=80, N=5
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: PLL ON, bypassed = 36617
DELAY = 5	      	      // More than ample time to allow PLL to lock
REG = 0, 0x341E, 0x8F08        //PLL/ Clk_in control: USE PLL = 36616
STATE=Master Clock, 80000000
REG=1, 0x3214, 0x06E6 	      //default 0x0480  -> make Slope work for 80 MHz Mclk


[PLL Setup 24Mhz In/48Mhz Out]
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: BYPASS PLL = 36617
REG = 0, 0x341C, 0x0120        //PLL Control 1 = 288
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: PLL ON, bypassed = 36617
DELAY = 5	      	      // More than ample time to allow PLL to lock
REG = 0, 0x341E, 0x8F08        //PLL/ Clk_in control: USE PLL = 36616
REG=1, 0x3214, 0x06E6 	      //default 0x0480  -> make Slope work for 80 MHz Mclk


[Lens Correction_Largan 971A]
REG=0x34CE, 0x01A0 //LENS_CORRECTION_CONTROL
REG=0x34D0, 0x6633 //ZONE_BOUNDS_X1_X2
REG=0x34D2, 0x319A //ZONE_BOUNDS_X0_X3
REG=0x34D4, 0x9463 //ZONE_BOUNDS_X4_X5
REG=0x34D6, 0x4B25 //ZONE_BOUNDS_Y1_Y2
REG=0x34D8, 0x2670 //ZONE_BOUNDS_Y0_Y3
REG=0x34DA, 0x724C //ZONE_BOUNDS_Y4_Y5
REG=0x34DC, 0xFF04 //CENTER_OFFSET
REG=0x34DE, 0x00FD //FX_RED
REG=0x34E6, 0x00E8 //FY_RED
REG=0x34EE, 0x0EE5 //DF_DX_RED
REG=0x34F6, 0x0CC8 //DF_DY_RED
REG=0x3500, 0xE3F3 //SECOND_DERIV_ZONE_0_RED
REG=0x3508, 0x11E5 //SECOND_DERIV_ZONE_1_RED
REG=0x3510, 0x262E //SECOND_DERIV_ZONE_2_RED
REG=0x3518, 0x2633 //SECOND_DERIV_ZONE_3_RED
REG=0x3520, 0x373D //SECOND_DERIV_ZONE_4_RED
REG=0x3528, 0x393F //SECOND_DERIV_ZONE_5_RED
REG=0x3530, 0x12B0 //SECOND_DERIV_ZONE_6_RED
REG=0x3538, 0xDC9F //SECOND_DERIV_ZONE_7_RED
REG=0x354C, 0x07FF //K_FACTOR_IN_K_FX_FY_R_TL
REG=0x3544, 0x07FF //K_FACTOR_IN_K_FX_FY_R_TR
REG=0x355C, 0x0472 //K_FACTOR_IN_K_FX_FY_R_BL
REG=0x3554, 0x07FF //K_FACTOR_IN_K_FX_FY_R_BR
REG=0x34E0, 0x00DB //FX_GREEN
REG=0x34E8, 0x008A //FY_GREEN
REG=0x34F0, 0x0FF2 //DF_DX_GREEN
REG=0x34F8, 0x0E41 //DF_DY_GREEN
REG=0x3502, 0xF1E6 //SECOND_DERIV_ZONE_0_GREEN
REG=0x350A, 0x02C3 //SECOND_DERIV_ZONE_1_GREEN
REG=0x3512, 0x112B //SECOND_DERIV_ZONE_2_GREEN
REG=0x351A, 0x1C26 //SECOND_DERIV_ZONE_3_GREEN
REG=0x3522, 0x2428 //SECOND_DERIV_ZONE_4_GREEN
REG=0x352A, 0x271E //SECOND_DERIV_ZONE_5_GREEN
REG=0x3532, 0x02E0 //SECOND_DERIV_ZONE_6_GREEN
REG=0x353A, 0xFC17 //SECOND_DERIV_ZONE_7_GREEN
REG=0x354E, 0x07FF //K_FACTOR_IN_K_FX_FY_G1_TL
REG=0x3546, 0x07FF //K_FACTOR_IN_K_FX_FY_G1_TR
REG=0x355E, 0x0600 //K_FACTOR_IN_K_FX_FY_G1_BL
REG=0x3556, 0x018E //K_FACTOR_IN_K_FX_FY_G1_BR
REG=0x34E4, 0x00B2 //FX_BLUE
REG=0x34EC, 0x0059 //FY_BLUE
REG=0x34F4, 0x0FDF //DF_DX_BLUE
REG=0x34FC, 0x0D95 //DF_DY_BLUE
REG=0x3506, 0x14F5 //SECOND_DERIV_ZONE_0_BLUE
REG=0x350E, 0x06C6 //SECOND_DERIV_ZONE_1_BLUE
REG=0x3516, 0x1A26 //SECOND_DERIV_ZONE_2_BLUE
REG=0x351E, 0x2219 //SECOND_DERIV_ZONE_3_BLUE
REG=0x3526, 0x1423 //SECOND_DERIV_ZONE_4_BLUE
REG=0x352E, 0x0E14 //SECOND_DERIV_ZONE_5_BLUE
REG=0x3536, 0xF4EC //SECOND_DERIV_ZONE_6_BLUE
REG=0x353E, 0xDD1D //SECOND_DERIV_ZONE_7_BLUE
REG=0x3552, 0x05A1 //K_FACTOR_IN_K_FX_FY_B_TL
REG=0x354A, 0x03FF //K_FACTOR_IN_K_FX_FY_B_TR
REG=0x3562, 0x018E //K_FACTOR_IN_K_FX_FY_B_BL
REG=0x355A, 0x018E //K_FACTOR_IN_K_FX_FY_B_BR
REG=0x34E2, 0x00AA //FX_GREEN2
REG=0x34EA, 0x0066 //FY_GREEN2
REG=0x34F2, 0x0E92 //DF_DX_GREEN2
REG=0x34FA, 0x0D63 //DF_DY_GREEN2
REG=0x3504, 0x0E1B //SECOND_DERIV_ZONE_0_GREEN2
REG=0x350C, 0x0DE7 //SECOND_DERIV_ZONE_1_GREEN2
REG=0x3514, 0x1D22 //SECOND_DERIV_ZONE_2_GREEN2
REG=0x351C, 0x2A2A //SECOND_DERIV_ZONE_3_GREEN2
REG=0x3524, 0x1A26 //SECOND_DERIV_ZONE_4_GREEN2
REG=0x352C, 0x1420 //SECOND_DERIV_ZONE_5_GREEN2
REG=0x3534, 0xF2AB //SECOND_DERIV_ZONE_6_GREEN2
REG=0x353C, 0xD2E0 //SECOND_DERIV_ZONE_7_GREEN2
REG=0x3550, 0x03FF //K_FACTOR_IN_K_FX_FY_G2_TL
REG=0x3548, 0x07FF //K_FACTOR_IN_K_FX_FY_G2_TR
REG=0x3560, 0x03FF //K_FACTOR_IN_K_FX_FY_G2_BL
REG=0x3558, 0x07FF //K_FACTOR_IN_K_FX_FY_G2_BR
REG=0x3540, 0x0000 //X2_FACTORS
REG=0x3542, 0x0004 //GLOBAL_OFFSET_FXY_FUNCTION
STATE=Lens Correction Falloff, 90
STATE=Lens Correction Center X, 820
STATE=Lens Correction Center Y, 600
BITFIELD=0x3210, 0x0004, 1 //LENS_CORRECTION


[CCM]
//-------------------------------------------
// Demo Boards. (Derived with Largan Lens)
//-------------------------------------------
VAR8=0x03, 0x4A, 0x005A //AWB_GAIN_MIN
  (Needed so we get enough Red Gain....)


[AE]
//--------------------------------------------------
// This Section sets up the AE. 
// - Target is lower than default (50 compared to 60)
// - MDR uses MaxRGB for upper Clipping Detection
// - Reduce the Maximum EV shift for MDR
//--------------------------------------------------
VAR8=0x02, 0x06, 48 	//AE_TARGET


[one step MDR]
VAR8=2, 0x18, 0x00A4 	// AE_STATUS   Set bit 5 to 1
VAR8=1, 0x30, 0x0000 	// SEQ_PREVIEW_2_AE


[LUT_sRGB]
//---------------------------------------------------
// This Settings produce sRGB output from the Sensor
// (No contrast and low saturation)
//---------------------------------------------------
VAR8=3,0x52,100 //Current Saturation Control
VAR8=1,0x18,100 //Sequencer Saturation Control
VAR8=1,0x19,25 //Sequencer Saturation Control
VAR8=7,0x6D,0x0003 //ModeDriver Gamma Control
VAR8=7,0x6E,0x0003
VAR8=7,0x6F,0
VAR8=7,0x70,39
VAR8=7,0x71,53
VAR8=7,0x72,73
VAR8=7,0x73,100
VAR8=7,0x74,119
VAR8=7,0x75,136
VAR8=7,0x76,151
VAR8=7,0x77,164
VAR8=7,0x78,175
VAR8=7,0x79,186
VAR8=7,0x7A,197
VAR8=7,0x7B,206
VAR8=7,0x7C,216
VAR8=7,0x7D,224
VAR8=7,0x7E,232
VAR8=7,0x7F,241
VAR8=7,0x80,248
VAR8=7,0x81,255
VAR8=7,0x82,0
VAR8=7,0x83,39
VAR8=7,0x84,53
VAR8=7,0x85,73
VAR8=7,0x86,100
VAR8=7,0x87,119
VAR8=7,0x88,136
VAR8=7,0x89,151
VAR8=7,0x8A,164
VAR8=7,0x8B,175
VAR8=7,0x8C,186
VAR8=7,0x8D,197
VAR8=7,0x8E,206
VAR8=7,0x8F,216
VAR8=7,0x90,224
VAR8=7,0x91,232
VAR8=7,0x92,241
VAR8=7,0x93,248
VAR8=7,0x94,255
VAR8=1,0x03,6 	//SEQ_CMD


[LUT_Vivid]
//------------------------------------------------------
// This Settings produce a Vivid output from the Sensor
// (Lots of contrast and Saturation
//------------------------------------------------------
VAR8=3,0x52,75 //Current Saturation Control
VAR8=1,0x18,75 //Sequencer Saturation Control
VAR8=1,0x19,10 //Sequencer Saturation Control
VAR8=7,0x6D,0x0003 //ModeDriver Gamma Control
VAR8=7,0x6E,0x0003
VAR8=7,0x6F,0
VAR8=7,0x70,27
VAR8=7,0x71,46
VAR8=7,0x72,76
VAR8=7,0x73,120
VAR8=7,0x74,152
VAR8=7,0x75,176
VAR8=7,0x76,193
VAR8=7,0x77,207
VAR8=7,0x78,217
VAR8=7,0x79,225
VAR8=7,0x7A,232
VAR8=7,0x7B,238
VAR8=7,0x7C,242
VAR8=7,0x7D,246
VAR8=7,0x7E,249
VAR8=7,0x7F,251
VAR8=7,0x80,253
VAR8=7,0x81,255
VAR8=7,0x82,0
VAR8=7,0x83,27
VAR8=7,0x84,46
VAR8=7,0x85,76
VAR8=7,0x86,120
VAR8=7,0x87,152
VAR8=7,0x88,176
VAR8=7,0x89,193
VAR8=7,0x8A,207
VAR8=7,0x8B,217
VAR8=7,0x8C,225
VAR8=7,0x8D,232
VAR8=7,0x8E,238
VAR8=7,0x8F,242
VAR8=7,0x90,246
VAR8=7,0x91,249
VAR8=7,0x92,251
VAR8=7,0x93,253
VAR8=7,0x94,255
VAR8=1,0x03,6 	//SEQ_CMD

[LUT_Moderate]
//-----------------------------------------------------
// This Settings produce a moderatly contrast enhanced 
// and saturated image output from the Sensor
//-----------------------------------------------------
VAR8=3,0x52,60 //Current Saturation Control
VAR8=1,0x18,60 //Sequencer Saturation Control
VAR8=1,0x19,10 //Sequencer Saturation Control
VAR8=7,0x6D,0x0003 //ModeDriver Gamma Control
VAR8=7,0x6E,0x0003
VAR8=7,0x6F,0
VAR8=7,0x70,41
VAR8=7,0x71,59
VAR8=7,0x72,83
VAR8=7,0x73,118
VAR8=7,0x74,145
VAR8=7,0x75,167
VAR8=7,0x76,184
VAR8=7,0x77,197
VAR8=7,0x78,207
VAR8=7,0x79,216
VAR8=7,0x7A,224
VAR8=7,0x7B,230
VAR8=7,0x7C,236
VAR8=7,0x7D,241
VAR8=7,0x7E,245
VAR8=7,0x7F,249
VAR8=7,0x80,252
VAR8=7,0x81,255
VAR8=7,0x82,0
VAR8=7,0x83,41
VAR8=7,0x84,59
VAR8=7,0x85,83
VAR8=7,0x86,118
VAR8=7,0x87,145
VAR8=7,0x88,167
VAR8=7,0x89,184
VAR8=7,0x8A,197
VAR8=7,0x8B,207
VAR8=7,0x8C,216
VAR8=7,0x8D,224
VAR8=7,0x8E,230
VAR8=7,0x8F,236
VAR8=7,0x90,241
VAR8=7,0x91,245
VAR8=7,0x92,249
VAR8=7,0x93,252
VAR8=7,0x94,255
VAR8=1,0x03,6 	//SEQ_CMD

[Low Light Preview 15 FPS]
//---------------------------------------------------
// Minimum 15 FPS (66 ms Int-Time)
//---------------------------------------------------
VAR8=0x02, 0x0C, 8 	//AE_MAX_INDEX
VAR8=0x02, 0x14, 36 	//AE_MAX_DGAIN_AE2

VAR8=0x01, 0x03, 5 	//Refresh
DELAY=500		//Wait


[Low Light Preview 10 FPS]
//---------------------------------------------------
// Minimum 10 FPS (100 ms Int-Time)
//---------------------------------------------------
VAR8=0x02, 0x0C, 12	//AE_MAX_INDEX
VAR8=0x02, 0x14, 34 	//AE_MAX_DGAIN_AE2

VAR8=0x01, 0x03, 5 	//Refresh
DELAY=500		//Wait


[Low Light Preview 7_5 FPS]
//---------------------------------------------------
// Minimum 7.5 FPS (133 ms Int-Time)
//---------------------------------------------------
VAR8=0x02, 0x0C, 16	//AE_MAX_INDEX
VAR8=0x02, 0x14, 34 	//AE_MAX_DGAIN_AE2

VAR8=0x01, 0x03, 5 	//Refresh
DELAY=500		//Wait


[Low Light Preview 5 FPS]
//---------------------------------------------------
// Minimum 5 FPS (200 ms Int-Time)
//---------------------------------------------------
VAR8=0x02, 0x0C, 24	//AE_MAX_INDEX
VAR8=0x02, 0x14, 30 	//AE_MAX_DGAIN_AE2

VAR8=0x01, 0x03, 5 	//Refresh
DELAY=500		//Wait



[Sequencer_Optimized_HiSat_Sharp]
//---------------------------------------------------
//  These Sequencer Settings include optimized
//  Transition values between bright and low light
//  for the following:
//  - Noise Reduction
//  - Saturation
//  - Aperture Correction
//  and also enable the MDR AE algorithm
//---------------------------------------------------
VAR8=0x01, 0x30, 0x0004 	//SEQ_PREVIEW_2_AE (MDR)
VAR8=0x01, 0x15, 0x00EF 	//SEQ_LLMODE
VAR8=0x01, 0x16, 48		//SEQ_LLVIRTGAIN1
VAR8=0x01, 0x17, 85 		//SEQ_LLVIRTGAIN2
VAR8=0x01, 0x18, 90 		//SEQ_LLSAT1
VAR8=0x01, 0x19, 40 		//SEQ_LLSAT2
VAR8=0x01, 0x1A, 8	 	//SEQ_LLINTERPTHRESH1
VAR8=0x01, 0x1B, 30	 	//SEQ_LLINTERPTHRESH2
VAR8=0x01, 0x1C, 2 		//SEQ_LLAPCORR1
VAR8=0x01, 0x1D, 0 		//SEQ_LLAPCORR2
VAR8=0x01, 0x1E, 0 		//SEQ_LLAPTHRESH1
VAR8=0x01, 0x1F, 4 		//SEQ_LLAPTHRESH2


[Flip and Mirror]
VAR=7, 0x19, 0x046F 	// MODE_SENSOR_READ_MODE_A
VAR=7, 0x3B, 0x0027 	// MODE_SENSOR_READ_MODE_B
VAR8=1, 0x03, 0x0006 	// SEQ_CMD

[Noise Reduction Test]
//Reduce Histogram to 0% Clipping
VAR8=0x0B, 0x05, 0x0000 	//HG_PERCENT
//Use New Gamma Table with Noise Kill
VAR8=7,0x6D,0x0003 //ModeDriver Gamma Control
VAR8=7,0x6E,0x0003
VAR8=7,0x6F,0
VAR8=7,0x70,21
VAR8=7,0x71,37
VAR8=7,0x72,63
VAR8=7,0x73,100
VAR8=7,0x74,128
VAR8=7,0x75,151
VAR8=7,0x76,169
VAR8=7,0x77,186
VAR8=7,0x78,199
VAR8=7,0x79,210
VAR8=7,0x7A,220
VAR8=7,0x7B,228
VAR8=7,0x7C,234
VAR8=7,0x7D,240
VAR8=7,0x7E,244
VAR8=7,0x7F,248
VAR8=7,0x80,252
VAR8=7,0x81,255
VAR8=7,0x82,0
VAR8=7,0x83,21
VAR8=7,0x84,37
VAR8=7,0x85,63
VAR8=7,0x86,100
VAR8=7,0x87,128
VAR8=7,0x88,151
VAR8=7,0x89,169
VAR8=7,0x8A,186
VAR8=7,0x8B,199
VAR8=7,0x8C,210
VAR8=7,0x8D,220
VAR8=7,0x8E,228
VAR8=7,0x8F,234
VAR8=7,0x90,240
VAR8=7,0x91,244
VAR8=7,0x92,248
VAR8=7,0x93,252
VAR8=7,0x94,255
VAR8=1,0x03,6 	//SEQ_CMD
//Boost Color In YUV Space
BITFIELD=0x35A4, 0x0007, 0x0006 //Color kill saturation point

//New Sequencer Settings
VAR8=0x01, 0x18, 30 		//SEQ_LLSAT1
VAR8=0x01, 0x19, 4 		//SEQ_LLSAT2
VAR8=0x01, 0x1A, 10	 	//SEQ_LLINTERPTHRESH1
VAR8=0x01, 0x1B, 32	 	//SEQ_LLINTERPTHRESH2

//Noise Setup
VAR8=0x01, 0x3E, 4 	//SEQ_NR_TH1_R
VAR8=0x01, 0x3F, 14 	//SEQ_NR_TH1_G
VAR8=0x01, 0x40, 4 	//SEQ_NR_TH1_B
VAR8=0x01, 0x41, 4 	//SEQ_NR_TH1_OL
VAR8=0x01, 0x42, 50 	//SEQ_NR_TH2_R
VAR8=0x01, 0x43, 15 	//SEQ_NR_TH2_G
VAR8=0x01, 0x44, 50 	//SEQ_NR_TH2_B
VAR8=0x01, 0x45, 50 	//SEQ_NR_TH2_OL
VAR8=0x01, 0x46, 5 	//SEQ_NR_GAINTH1
VAR8=0x01, 0x47, 58 	//SEQ_NR_GAINTH2

REG=0x33F4, 0x031D	//Defect correction, noise reduction, etc


[Lens Calibration Setup]
//---------------------------------------------------
// This Setup can be used to calibrate the lens
//---------------------------------------------------
VAR8=1, 0x02, 0x0000 	// SEQ_MODE (turn off AE, AWB)
BITFIELD=0x3210, 0x0004, 0 //turn off Enable lens shading
REG=0x3212, 0x0001 	// FACTORY_BYPASS
DELAY=1000
REG=0x3330, 0x0140 	// OUTPUT_FORMAT_TEST (LC bypass)
DELAY=1000
STATE=Lens Correction Overlay, 1


[Color Setup]
//---------------------------------------------------
// This Setup can be used to calibrate the color
//---------------------------------------------------
VAR8=11, 0x04, 0x0000 	//(1) HG_MAX_DLEVEL
VAR8=3, 0x53, 0x0021 	//(1) AWB_MODE
DELAY=1000
VAR8=1, 0x02, 0x0000 	//(2) SEQ_MODE
DELAY=1000
BITFIELD=0x3210, 0x00A0, 0 //turn off gamma correction and color correction
REG=0x3028, 0x0008 	//(1) ANALOGUE_GAIN_CODE_GLOBAL


[True Gray Setup]
//---------------------------------------------------
// This Setup can be used to calibrate true grey TH
// When calibrating True Gray, we recommend that the
//user first load the [Power up] section and then this 
// [True Gray Setup] preset and not load any other 
// preset because if noise reduction related preset
// is included, the color saturation is altered.  
//---------------------------------------------------
VAR8=11, 0x04, 0x0000 	// HG_MAX_DLEVEL
VAR=3, 0x18, 0x0020 	// AWB_CCM_L_9
VAR=3, 0x1A, 0x0020 	// AWB_CCM_L_10
VAR=3, 0x2E, 0x0000 	// AWB_CCM_RL_9
VAR=3, 0x30, 0x0000 	// AWB_CCM_RL_10
VAR8=3, 0x53, 0x0021 	// AWB_MODE
BITFIELD=0x3210, 0x00A0, 0 //turn off gamma correction and color correction


[8 bit walking 1 test pattern] 
REG=0x3212, 0x0000      //(1) FACTORY_BYPASS 
REG=0x3290, 0x0020      //(1) TEST_PATTERN 
REG=0x3386, 0x0501      //(1) MCU_BOOT_MODE 


[10 bit walking 1 test pattern] 
REG=0x3212, 0x0000      //(1) FACTORY_BYPASS 
REG=0x3290, 0x0060      //(1) TEST_PATTERN 
REG=0x3386, 0x0501      //(1) MCU_BOOT_MODE 


[high power preview mode -  nongated pixclk] 
//-----------------------------------------------------
// This setup enables the user to get non-gated pixclk 
// running in context A and half of the speed compared
// to context B.  The example uses a 24MHz input clk 
// and an output of 80MHz.  Therefore context A clk 
// speed is 40MHz and context B is 80MHz.  Please note 
// user needs to first use Register Wizard v1.2 to 
// generate timing settings for high power preview mode
//-----------------------------------------------------
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: BYPASS PLL = 36617 
REG = 0, 0x341C, 0x0250        //PLL Control 1 = 288 
REG = 0, 0x341E, 0x8F09        //PLL/ Clk_in control: PLL ON, bypassed = 36617 
DELAY = 200                   // More than ample time to allow PLL to lock 
REG = 0, 0x341E, 0x8F08        //PLL/ Clk_in control: USE PLL = 36616 

//Set Watermark and enable Half rate mode 
REG=0x321E, 0x0014      //(1) OF_WATERMARK 
REG=0x321C, 0x0006      //(1) OF_CONTROL_STATUS 
REG=0x3216, 0x82DF      //(1) INTERNAL_CLOCK_CONTROL 
REG=0x3212, 0x0002      //(1) FACTORY_BYPASS 
