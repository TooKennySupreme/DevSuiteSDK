;**************************************************************************************       
; Copyright 2009 Aptina Imaging Corporation. All rights reserved.                             
;                                                                                             
;                                                                                             
; No permission to use, copy, modify, or distribute this software and/or                      
; its documentation for any purpose has been granted by Aptina Imaging Corporation.           
; If any such permission has been granted ( by separate agreement ), it                       
; is required that the above copyright notice appear in all copies and                        
; that both that copyright notice and this permission notice appear in                        
; supporting documentation, and that the name of Aptina Imaging Corporation or any            
; of its trademarks may not be used in advertising or publicity pertaining                    
; to distribution of the software without specific, written prior permission.                 
;                                                                                             
;                                                                                             
;      This software and any associated documentation are provided "AS IS" and                
;      without warranty of any kind.   APTINA IMAGING CORPORATION EXPRESSLY DISCLAIMS         
;      ALL WARRANTIES EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, NONINFRINGEMENT       
;      OF THIRD PARTY RIGHTS, AND ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS        
;      FOR A PARTICULAR PURPOSE.  APTINA DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED        
;      IN THIS SOFTWARE WILL MEET YOUR REQUIREMENTS, OR THAT THE OPERATION OF THIS SOFTWARE   
;      WILL BE UNINTERRUPTED OR ERROR-FREE.  FURTHERMORE, APTINA DOES NOT WARRANT OR          
;      MAKE ANY REPRESENTATIONS REGARDING THE USE OR THE RESULTS OF THE USE OF ANY            
;      ACCOMPANYING DOCUMENTATION IN TERMS OF ITS CORRECTNESS, ACCURACY, RELIABILITY,         
;      OR OTHERWISE.                                                                          
;*************************************************************************************/       
; Default INI file for the A-2010SOCJ-REV2 (Chip ID 0x1519)
;
; $Revision: 25734 $
; $Date: 2010-10-05 14:28:51 -0700 (Tue, 05 Oct 2010) $ 
;
; This file holds groups of register presets (sections) specific for this sensor. The 
; presets allow you to overwrite the power-on default settings with optimized register 
; settings. 
; The [Demo Initialization] section contains all optimized register settings for running
; the sensor in the demo environment. Other sections include settings optimized for a
; variety of situations like: Running at different master clock speeds, running under
; different lighting situations, running with different lenses, etc.
; Most of the demonstration software (DevWare, SensorDemo, ...) make use of this file
; to load and store the user presets.
;
; Keyname description:
; REG      = assign a new register value
; BITFIELD = do a READ-MODIFY-WRITE to part of a register. The part is defined as a mask.
; FIELD_WR = Write any register, variable or bitfield, specified by its symbol name
; LOAD     = load an alternate section from this section
; STATE    = set non-register state
; DELAY    = delay a certain amount of milliseconds before continuing 
; POLL_REG = Read a register a specified number of times, or until the register
;            value no longer meets a specified condition. You specify the
;            register by its address, and it only works with simple registers.
;            You also specify a delay between each iteration of the loop.
; POLL_FIELD = Like POLL_REG except you specify the register by its symbol name
;            as defined in the sensor data file. POLL_FIELD works with any kind
;            of register or variable.
;
; Keyname format:
; REG      = [<page>,] <address>, <value>             //<comment>
; BITFIELD = [<page>,] <address>, <mask>, <value>
;            Some examples: 
;            BITFIELD=2, 0x05, 0x0020, 1 //for register 5 on page 2, set the 6th bit to 1
;            BITFIELD=0x06, 0x000F, 0    //for register 6, clear the first 4 bits
; FIELD_WR = <registername>, [<bitfieldname>,] <value>
; LOAD     = <section>
; STATE    = <state>, <value>
; DELAY    = <milliseconds>
; POLL_REG = [<page>,]<address>,<mask>,<condition>,DELAY=<milliseconds>,TIMEOUT=<count> //<comment>
;            Example:  Poll every 50ms, stop when value <= 8 or after 5 times (250ms).
;            POLL_REG= 2, 0x3F, 0xFFFF, >8, DELAY=50, TIMEOUT=5
; POLL_FIELD = <registername>, [<bitfieldname>,] <condition>, DELAY=<milliseconds>, TIMEOUT=<count> //<comment>
;            Example:  Poll every 10 ms, stop when the value = 0, or after 500ms.
;            POLL_FIELD= SEQ_CMD, !=0, DELAY=10, TIMEOUT=50
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developer's guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <registername> Name of a register or variable as defined the sensor data (.sdat) file
; <bitfieldname> Optional name of a bitfield
; <condition>    <  <=  ==  !=  >  or  >=  followed by a numerical value
; <count>        Number of iterations of the polling loop
; <section>      the name of another section to load
; <state>        non-register program state names [do not modify]
; <milliseconds> wait for this ammount of milliseconds before continuing 
; <comment>      Some form of C-style comments are supported in this .ini file
;
;*************************************************************************************/

[Reset]
REG=0, 0x65, 0xA000     // bypassed PLL (prepare for soft reset)
REG=1, 0xC3, 0x0501     // MCU_BOOT_MODE (MCU reset)
REG=0, 0x0D, 0x0021     // RESET_REG (enable soft reset)
DELAY=1
REG=0, 0x0D, 0x0000     // RESET_REG (disable soft reset)
DELAY=100
STATE=Detect Master Clock,1

[Demo Initialization]
REG=0, 0x2B, 0x20 //Doesn't do anything, used as a placeholder

[Viewfinder ON]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 0     //capture parameters, VIDEO Off
FIELD_WR = SEQ_CMD, 1          //Back to preview

[Viewfinder OFF]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1     //capture parameters, VIDEO On
FIELD_WR = SEQ_CMD, 2          //Capture on

[Video Capture ON]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1     //capture parameters, VIDEO On
FIELD_WR = SEQ_CMD, 2          //Capture on

[Video Capture OFF]
FIELD_WR = SEQ_CMD, 1          //Back to preview

[LED Flash On]
BITFIELD=0, 0x23, 0x100, 1
 
[LED Flash Off]
BITFIELD=0, 0x23, 0x100, 0

[Enable Capture with LED Flash]
VAR8=1, 0x06, 1 // SEQ_SHARED_PARAMS_FLASH_TYPE
VAR8=1, 0x35, 1 // SEQ_PREVIEW_PAR_LEAVE_FLASH
VAR8=1, 0x3C, 1 // SEQ_CAP_PAR_ENTER_FLASH

[Disable Capture with Flash]
VAR8=1, 0x06, 0 // SEQ_SHARED_PARAMS_FLASH_TYPE
VAR8=1, 0x35, 0 // SEQ_PREVIEW_PAR_LEAVE_FLASH
VAR8=1, 0x3C, 0 // SEQ_CAP_PAR_ENTER_FLASH
 
[Capture - YUV output]
VAR=7, 0x0B, 0x0030 // MODE_CONFIG
VAR8=7, 0x7E, 0x0000 // MODE_OUTPUT_FORMAT_B
VAR=7, 0x74, 0xE5E1 // MODE_FIFO_CONF1_B
VAR8=7, 0x76, 0x00E3 // MODE_FIFO_CONF2_B

[Enable stepper motor AF]
VAR8=6, 0x02, 130 // AFM_TYPE
VAR8=1, 0x2C, 1   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x03, 5   // SEQ_CMD
DELAY=1000
VAR8=1, 0x2C, 0   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x3A, 1   // SEQ_CAP_PAR_ENTER_AF

[Enable helimorph AF]
VAR8=6, 0x02, 129 // AFM_TYPE
VAR8=1, 0x2C, 1   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x03, 5   // SEQ_CMD
DELAY=1000
VAR8=1, 0x2C, 0   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x3A, 1   // SEQ_CAP_PAR_ENTER_AF
VAR=6, 0x0B, 0x0262 //AFM_FREQ_MCLK_HI For 40MHz
VAR=6, 0x0D, 0x5A00 //AFM_FREQ_MCLK_LO

[Disable AF]
VAR8=6, 0x02, 128 // AFM_TYPE
VAR8=1, 0x2C, 0   // SEQ_PREVIEW_PAR_AF
VAR8=1, 0x03, 5   // SEQ_CMD
VAR8=1, 0x3A, 0   // SEQ_CAP_PAR_ENTER_AF
 
[Refocus]
VAR8=1, 0x02, 31  // SEQ_MODE
VAR8=5, 0x04, 1   // AF_MODE

[Enable PLL 24 Mhz Ext/80 Mhz Out]
REG=0, 0x66, 0x500B         
REG=0, 0x67, 0x0200 
REG=0, 0x65, 0xA000  
REG=0, 0x65, 0x2000 
DELAY=100
STATE=Detect Master Clock,1

[Enable PLL 24 Mhz Ext/48 Mhz Out]
REG=0, 0x66, 0x600B         
REG=0, 0x67, 0x0201 
REG=0, 0x65, 0xA000  
REG=0, 0x65, 0x2000 
DELAY=100
STATE=Detect Master Clock,1

[Lens Shading Setup]
REG=1, 0x08, 0x0158 	// COLOR_PIPELINE_CONTROL
VAR8=1, 0x02, 0x0000 	// SEQ_MODE

[Color Tuning Setup]
VAR8=11, 0x04, 0x0000 	// HG_MAX_DLEVEL
VAR8=3, 0x53, 0x0023 	// AWB_MODE
VAR8=1, 0x02, 0x0000 	// SEQ_MODE
REG=1, 0x08, 0x01D8 	// COLOR_PIPELINE_CONTROL
REG=1, 0x08, 0x0158 	// COLOR_PIPELINE_CONTROL
REG=0, 0x2F, 0x0020 	// GLOBAL_GAIN_REG

//
// Data Types to remain in this INI - there is no RegDB entry 
// and the SDAT files were created manually.
/
[Data Types]
DATATYPE=GREEN1_GAIN_REG, GREEN1_GAIN_VALUE, ufixed5
DATATYPE=BLUE_GAIN_REG, BLUE_GAIN_VALUE, ufixed5
DATATYPE=RED_GAIN_REG, RED_GAIN_VALUE, ufixed5
DATATYPE=GREEN2_GAIN_REG, GREEN2_GAIN_VALUE, ufixed5
DATATYPE=GLOBAL_GAIN_REG, GLOBAL_GAIN_VALUE, ufixed5
DATATYPE=CAL_G1, signed
DATATYPE=CAL_B, signed
DATATYPE=CAL_R, signed
DATATYPE=CAL_G2, signed
DATATYPE=DIGITAL_GAIN_1_RED, ufixed7
DATATYPE=DIGITAL_GAIN_1_GREEN1, ufixed7
DATATYPE=DIGITAL_GAIN_1_GREEN2, ufixed7
DATATYPE=DIGITAL_GAIN_1_BLUE, ufixed7
DATATYPE=DIGITAL_GAIN_1_ALL_COLORS, ufixed7
DATATYPE=GLOBAL_OFFSET_FXY_FUNCTION, signed
DATATYPE=DF_DX_RED, signed
DATATYPE=DF_DX_GREEN, signed
DATATYPE=DF_DX_BLUE, signed
DATATYPE=DF_DY_RED, signed
DATATYPE=DF_DY_GREEN, signed
DATATYPE=DF_DY_BLUE, signed
DATATYPE=SECOND_DERIV_ZONE_0_RED, X, signed
DATATYPE=SECOND_DERIV_ZONE_0_RED, Y, signed
DATATYPE=SECOND_DERIV_ZONE_0_GREEN, X, signed
DATATYPE=SECOND_DERIV_ZONE_0_GREEN, Y, signed
DATATYPE=SECOND_DERIV_ZONE_0_BLUE, X, signed
DATATYPE=SECOND_DERIV_ZONE_0_BLUE, Y, signed
DATATYPE=SECOND_DERIV_ZONE_1_RED, X, signed
DATATYPE=SECOND_DERIV_ZONE_1_RED, Y, signed
DATATYPE=SECOND_DERIV_ZONE_1_GREEN, X, signed
DATATYPE=SECOND_DERIV_ZONE_1_GREEN, Y, signed
DATATYPE=SECOND_DERIV_ZONE_1_BLUE, X, signed
DATATYPE=SECOND_DERIV_ZONE_1_BLUE, Y, signed
DATATYPE=SECOND_DERIV_ZONE_2_RED, X, signed
DATATYPE=SECOND_DERIV_ZONE_2_RED, Y, signed
DATATYPE=SECOND_DERIV_ZONE_2_GREEN, X, signed
DATATYPE=SECOND_DERIV_ZONE_2_GREEN, Y, signed
DATATYPE=SECOND_DERIV_ZONE_2_BLUE, X, signed
DATATYPE=SECOND_DERIV_ZONE_2_BLUE, Y, signed
DATATYPE=SECOND_DERIV_ZONE_3_RED, X, signed
DATATYPE=SECOND_DERIV_ZONE_3_RED, Y, signed
DATATYPE=SECOND_DERIV_ZONE_3_GREEN, X, signed
DATATYPE=SECOND_DERIV_ZONE_3_GREEN, Y, signed
DATATYPE=SECOND_DERIV_ZONE_3_BLUE, X, signed
DATATYPE=SECOND_DERIV_ZONE_3_BLUE, Y, signed
DATATYPE=SECOND_DERIV_ZONE_4_RED, X, signed
DATATYPE=SECOND_DERIV_ZONE_4_RED, Y, signed
DATATYPE=SECOND_DERIV_ZONE_4_GREEN, X, signed
DATATYPE=SECOND_DERIV_ZONE_4_GREEN, Y, signed
DATATYPE=SECOND_DERIV_ZONE_4_BLUE, X, signed
DATATYPE=SECOND_DERIV_ZONE_4_BLUE, Y, signed
DATATYPE=SECOND_DERIV_ZONE_5_RED, X, signed
DATATYPE=SECOND_DERIV_ZONE_5_RED, Y, signed
DATATYPE=SECOND_DERIV_ZONE_5_GREEN, X, signed
DATATYPE=SECOND_DERIV_ZONE_5_GREEN, Y, signed
DATATYPE=SECOND_DERIV_ZONE_5_BLUE, X, signed
DATATYPE=SECOND_DERIV_ZONE_5_BLUE, Y, signed
DATATYPE=SECOND_DERIV_ZONE_6_RED, X, signed
DATATYPE=SECOND_DERIV_ZONE_6_RED, Y, signed
DATATYPE=SECOND_DERIV_ZONE_6_GREEN, X, signed
DATATYPE=SECOND_DERIV_ZONE_6_GREEN, Y, signed
DATATYPE=SECOND_DERIV_ZONE_6_BLUE, X, signed
DATATYPE=SECOND_DERIV_ZONE_6_BLUE, Y, signed
DATATYPE=SECOND_DERIV_ZONE_7_RED, X, signed
DATATYPE=SECOND_DERIV_ZONE_7_RED, Y, signed
DATATYPE=SECOND_DERIV_ZONE_7_GREEN, X, signed
DATATYPE=SECOND_DERIV_ZONE_7_GREEN, Y, signed
DATATYPE=SECOND_DERIV_ZONE_7_BLUE, X, signed
DATATYPE=SECOND_DERIV_ZONE_7_BLUE, Y, signed
DATATYPE=AWB_CCM_L_0, fixed8
DATATYPE=AWB_CCM_L_1, fixed8
DATATYPE=AWB_CCM_L_2, fixed8
DATATYPE=AWB_CCM_L_3, fixed8
DATATYPE=AWB_CCM_L_4, fixed8
DATATYPE=AWB_CCM_L_5, fixed8
DATATYPE=AWB_CCM_L_6, fixed8
DATATYPE=AWB_CCM_L_7, fixed8
DATATYPE=AWB_CCM_L_8, fixed8
DATATYPE=AWB_CCM_L_9, fixed5
DATATYPE=AWB_CCM_L_10, fixed5
DATATYPE=AWB_CCM_RL_0, fixed8
DATATYPE=AWB_CCM_RL_1, fixed8
DATATYPE=AWB_CCM_RL_2, fixed8
DATATYPE=AWB_CCM_RL_3, fixed8
DATATYPE=AWB_CCM_RL_4, fixed8
DATATYPE=AWB_CCM_RL_5, fixed8
DATATYPE=AWB_CCM_RL_6, fixed8
DATATYPE=AWB_CCM_RL_7, fixed8
DATATYPE=AWB_CCM_RL_8, fixed8
DATATYPE=AWB_CCM_RL_9, fixed5
DATATYPE=AWB_CCM_RL_10, fixed5
DATATYPE=AWB_CCM_0, fixed8
DATATYPE=AWB_CCM_1, fixed8
DATATYPE=AWB_CCM_2, fixed8
DATATYPE=AWB_CCM_3, fixed8
DATATYPE=AWB_CCM_4, fixed8
DATATYPE=AWB_CCM_5, fixed8
DATATYPE=AWB_CCM_6, fixed8
DATATYPE=AWB_CCM_7, fixed8
DATATYPE=AWB_CCM_8, fixed8
DATATYPE=AWB_CCM_9, fixed5
DATATYPE=AWB_CCM_10, fixed5
DATATYPE=AWB_GAIN_MIN, ufixed7
DATATYPE=AWB_GAIN_MAX, ufixed7
DATATYPE=AWB_GAIN_R, ufixed7
DATATYPE=AWB_GAIN_G, ufixed7
DATATYPE=AWB_GAIN_B, ufixed7
DATATYPE=AWB_SATURATION, ufixed7
